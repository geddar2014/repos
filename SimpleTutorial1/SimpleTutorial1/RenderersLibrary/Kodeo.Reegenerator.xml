<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kodeo.Reegenerator</name>
    </assembly>
    <members>
        <member name="T:Kodeo.Reegenerator.DynamicCode.MarshalByRefObjectDisposable">
            <summary>
            Defines a base class for classes that must inherit from <see cref="T:System.MarshalByRefObject"/> and 
            that must not be automatically garbage collected when they execute for a long time. 
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.MarshalByRefObjectDisposable.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Kodeo.Reegenerator.DynamicCode.MarshalByRefObjectDisposable"/> class.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.MarshalByRefObjectDisposable.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /> property.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure" />
            </PermissionSet>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.MarshalByRefObjectDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.MarshalByRefObjectDisposable.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader">
            <summary>
            <b>This class supports the Reegenerator templates and is not intended to be used directly from your code.</b>
            <para><b>This class is for internal use only.</b></para>
            <para>
            Class that loads types that implement the <see cref="T:Kodeo.Reegenerator.Generators.ICodeRenderer"/> 
            interface from an assembly. 
            </para>
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader"/> class.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.GetRenderTypes(System.String)">
            <summary>
            Gets all the types that implement the <see cref="T:Kodeo.Reegenerator.Generators.ICodeRenderer"/> interface
            belonging to an assembly specified by path.
            </summary>
            <param name="assemblyPath">The assembly path.</param>
            <returns>An array of strings containing the full name of the classes that implement <see cref="T:Kodeo.Reegenerator.Generators.ICodeRenderer"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.SetProperties(Kodeo.Reegenerator.Generators.ICodeRenderer,Kodeo.Reegenerator.Generators.RgenAttachedRenderer)">
            <summary>
            Sets the properties of <paramref name="generator"/> that have the <see cref="T:Kodeo.Reegenerator.Generators.TemplatePropertyAttribute"/> attribute
            to values defined when attaching the generator taken from <paramref name="rgenAttachedRenderer"/>.
            </summary>
            <param name="generator">The generator instance whose properties are to be set.</param>
            <param name="rgenAttachedRenderer">Contains the values for the properties.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo">
            <summary>
            Represents the information regarding a code generator.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.Property">
            <summary>
            Represents settings of <see cref="T:Kodeo.Reegenerator.Generators.TemplatePropertyAttribute"/> and of the property defined for a class
            inheriting from <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer"/> the attribute is attached to.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.Property.Name">
            <summary>
            The name of the code generator property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.Property.DefaultValue">
            <summary>
            The default value as defined by the attribute.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.Property.Description">
            <summary>
            The description as displayed in the property grid.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.Property.Category">
            <summary>
            The display category of the property as defined by the attribute.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.Property.TypeFullName">
            <summary>
            The full name of the type of the code generator property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.Property.MustBeSpecified">
            <summary>
            Determines whether the propery must be set as defined by the atribute.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.Property.ValuesList">
            <summary>
            The list of acceptable enumeration values.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo"/> class.
            </summary>
            <param name="fullName">The full name.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.FullName">
            <summary>
            The full name of the type.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.DisplayName">
            <summary>
            The display name of the type.
            </summary>
            <remarks>
            You can control this by attaching the <see cref="T:Kodeo.Reegenerator.Generators.TemplateDisplayAttribute"/> to the renderer class.
            </remarks>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.Description">
            <summary>
            The type description.
            </summary>
            <remarks>
            You can control this by attaching the <see cref="T:Kodeo.Reegenerator.Generators.TemplateDisplayAttribute"/> to the renderer class.
            </remarks>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.DefaultExtension">
            <summary>
            The default extension.
            </summary>
            <remarks>
            You can control this by attaching the <see cref="T:Kodeo.Reegenerator.Generators.DefaultExtensionAttribute"/> to the renderer class.
            </remarks>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.RequiresGlobalServices">
            <summary>
            The option whether the execution of the renderer requires global services.
            </summary>
            <remarks>
            You can control this by attaching the <see cref="T:Kodeo.Reegenerator.Generators.ExecutionAttribute"/> to the renderer class.
            </remarks>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.HideInDialog">
            <summary>
            Determines whether the renderer shows up in the dialog.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.Properties">
            <summary>
            The generation properties according to attributes attached to properties defined for the type.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo.CodeSnippetAttribute">
            <summary>
            The code snippet replacement mode if <see cref="T:Kodeo.Reegenerator.Generators.CodeSnippetAttribute" /> was defined.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory">
            <summary>
            Factory class for creating objects in a separate application domain.
            </summary>
            <remarks>
            This class is instantiated by methods of the <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper"/> class in 
            the <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/> application domain.
            All methods of the <b>AppDomainObjectFactory</b> 
            will therefore run in the separate application domain.
            <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper"/> calls methods on the created instance 
            that will create other objects or load assemblies. These actions will all inherently 
            happen in the separated application domain.
            <example>
            This is the code of the <see cref="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.CreateInstanceFromPath(System.String,System.String)"/> method.
            <code>
            public object CreateInstanceFromPath(string assemblyPath, string className)
            {
                if (string.IsNullOrEmpty(assemblyPath))
                    throw new ArgumentNullException("assemblyPath");
                if (string.IsNullOrEmpty(className))
                    throw new ArgumentNullException("className");
                // gets the full name of the assembly.
                AssemblyName assemblyName = AssemblyName.GetAssemblyName(assemblyPath);
                // creates a factory object that runs in the wrapped domain.
                AppDomainObjectFactory factory = CreateInstanceAndUnwrap&lt;AppDomainObjectFactory&gt;();
                // loads the assembly in the application domain.
                factory.LoadAssemblyFromPath(assemblyPath);
                // use the factory to create the class instance in the wrapped domain.
                return factory.CreateInstance(assemblyName.Name, className);
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory"/> class.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory.GetAssembly(System.String)">
            <summary>
            Gets an assembly by browsing through the list of loaded assemblies in the current application domain.
            </summary>
            <param name="assemblyName">The full description of the assembly to look for.</param>
            <returns>an <see cref="T:System.Reflection.Assembly"/> object that matched the description.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory.CreateInstance(System.String,System.String)">
            <summary>
            Creates an instance of a class belonging to a specified assembly in the same 
            application domain as this <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory"/> instance.
            </summary>
            <remarks>The instance will be created in the same application domain as the <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory"/> instance. 
            <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper"/> calls this method on an <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory"/> 
            instance running in a separate application domain
            to create instances of other classes in the same application domain.</remarks>
            <param name="assemblyName">The full name of the assembly that contains <paramref name="className"/>.</param>
            <param name="className">The full name of the class to be instantiated.</param>
            <returns>an instance of the specified class.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory.LoadAssemblyFromPath(System.String)">
            <summary>
            Loads an assembly in the same application domain as this <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory"/> instance.
            </summary>
            <remarks>The assembly will be loaded in the same application domain as the <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory"/> instance. 
            <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper"/> calls this method on an <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory"/> 
            instance running in <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/>
            to load assemblies in the separate application domain.</remarks>
            <param name="assemblyPath">The full path of the assembly.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory.LoadAssemblyAndRetrievePath(System.String)">
            <summary>
            Loads an assembly from its full name in the same application domain as this <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory"/> instance
            and retrieves the assembly path.
            </summary>
            <remarks>The assembly will be loaded in the same application domain as the <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory"/> instance. 
            <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper"/> calls this method on an <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainObjectFactory"/> 
            instance running in <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/>
            to load assemblies in the separate application domain.</remarks>
            <param name="assemblyFullName">The full name of the assembly to be loaded.</param>
            <returns>The path of the assembly.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper">
            <summary>
            Provides the functionality of executing code in a separate application domain.
            </summary>
            <remarks>
            <para>
            This is a wrapper class for <see cref="T:System.AppDomain"/>. 
            It provides the ability to load code and assemblies in the separate application domain
            and then create objects that can work accross application domain boundaries.
            The separate application domain is unloaded by implementing and using 
            the <see cref="T:System.IDisposable"/> interface functionality. 
            </para>
            <para>
            If an instance is not disposed of properly, it will trace a message.
            It is recommended to explicitly release resources used by instances 
            of <b>AppDomainWrapper</b> by calling <see cref="M:System.IDisposable.Dispose"/> or
            for C# by implementing the <c>using</c> technique.
            </para>
            <example>This is an example on how to use <b>AppDomainWrapper</b>.
            <code>
            using (Kodeo.Reegenerator.DynamicCode.AppDomainWrapper appDomainWrapper = new Kodeo.Reegenerator.DynamicCode.AppDomainWrapper())
            {
                // this object will be created in a different application domain.
                object o = appDomainWrapper.CreateInstanceFromPath(assemblyPath, className) as ICodeRenderer;
                // the ToString call runs in a different application domain.
                string s = o.ToString();
            }
            </code>
            See <see cref="T:Kodeo.Reegenerator.DynamicCode.Code"/> for an example on how to use <b>AppDomainWrapper</b> in conjunction with dynamic code.
            </example>
            </remarks>
        </member>
        <member name="F:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.DefaultName">
            <summary>
            Default name for the application domain created by an <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper"/> instance. 
            This is the name used by the default constructor.
            </summary>
            <value>The value is <c>ReegeneratorApplicationDomain</c>.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper"/> class using <see cref="F:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.DefaultName"/>.
            </summary>
            <remarks>The name of the wrapped application domain will be <see cref="F:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.DefaultName"/>.</remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper"/> class 
            with a specified name for the wrapped application domain.
            </summary>
            <remarks>
            The name of the application domain is important only if you concurrently create several
            application domains. In this case you would need to give them different names.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c> or empty.</exception>
            <param name="name">The name of the application domain to be created and wrapped.</param>
            <param name="privateBinPath">The path used to probing when loading private assemblies.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.Finalize">
            <summary>
            Ensures that this instance is disposed of and the domain is unloaded.
            </summary>
            <remarks>The method will trace a warning if <see cref="M:System.IDisposable.Dispose"/> has not been called.</remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.System#IDisposable#Dispose">
            <summary>
            Unloads the <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/> application domain.
            </summary>
            <remarks>An error is traced if <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/> cannot be unloaded sucesfully</remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.LoadCompiledCode(System.Byte[])">
            <summary>
            Loads an assembly in binary form in the <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/> application domain.
            </summary>
            <remarks>
            You would normally build the code to be loaded by using the <see cref="T:Kodeo.Reegenerator.DynamicCode.Code"/> class, 
            or by using <see cref="T:System.CodeDom.Compiler.CodeDomProvider"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="code"/> is <c>null</c>.</exception>
            <param name="code">The assembly in binary form.</param>
        </member>
        <member name="F:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.CompiledCode">
            <summary>
            The key for the compiled code that gets serialized between domains.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.LoadCompiledCodeCallback">
            <summary>
            This method runs in the target domain
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.Name">
            <summary>
            Gets the friendly name of the <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/> application domain.
            </summary>
            <remarks>This is the name parameter passed when this instance was constructed.</remarks>
            <value>The friendly name of the <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/> application domain.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain">
            <summary>
            Gets the application domain wrapped by this instance.
            </summary>
            <value>The <see cref="T:System.AppDomain"/> wrapped by this instance.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.CreateInstance(System.String,System.String)">
            <summary>
            Creates an instance of a class in the <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/> application domain.
            </summary>
            <remarks>
            The specified <paramref name="assemblyName"/> must have previously been loaded in the application domain, otherwise the call will fail.
            You can load assemblies in the application domain by using 
            <see cref="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.LoadAssemblyFromPath(System.String)"/>, <see cref="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.LoadAssemblyAndRetrievePath(System.String)"/> or <see cref="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.CreateInstanceFromPath(System.String,System.String)"/>.
            The specified class must implement <see cref="T:System.MarshalByRefObject"/> in order to work across 
            application domain boundaries.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyName"/> or <paramref name="className"/> is <c>null</c> or empty.</exception>
            <param name="assemblyName">The name of the assembly that contains <paramref name="className"/>.</param>
            <param name="className">The name of the class to be instantiated.</param>
            <returns>An instance of the specified class that runs in the separate application domain.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.CreateInstanceFromPath(System.String,System.String)">
            <summary>
            Creates an instance of a class belonging to an assembly specified by path in the <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/> application domain.
            </summary>
            <remarks>The method will load the specified assembly in the <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/> application domain.
            The specified <paramref name="className"/> must implement the <see cref="T:System.MarshalByRefObject"/> interface in order 
            to work across application domain boundaries.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyPath"/> or <paramref name="className"/> is <c>null</c> or empty.</exception>
            <param name="assemblyPath">The assembly path.</param>
            <param name="className">The description of the class whose instance is to be created.</param>
            <returns>An instance of the specified class that runs in the separate application domain.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.LoadAssemblyFromPath(System.String)">
            <summary>
            Loads an assembly in the <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/> application domain from a given path.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyPath"/> is <c>null</c> or empty.</exception>
            <param name="assemblyPath">The path of the assembly.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.LoadAssemblyAndRetrievePath(System.String)">
            <summary>
            Loads an assembly in the <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/> application domain and retrieves the assembly path.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyFullName"/> is <c>null</c> or empty.</exception>
            <param name="assemblyFullName">The full name of the assembly.</param>
            <returns>The path of the assembly.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.CreateInstanceAndUnwrap``1">
            <summary>
            Creates an instance of a type in the <see cref="P:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper.AppDomain"/> application domain.
            </summary>
            <remarks>The assembly that contains <typeparamref name="T"/> must be already loaded in the application domain.</remarks>
            <typeparam name="T">The type of object to be created in the application domain. Must inherit from <see cref="T:Kodeo.Reegenerator.DynamicCode.MarshalByRefObjectDisposable"/>.</typeparam>
            <returns>An instance of <typeparamref name="T"/> that runs in this application domain.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.DynamicCode.Code">
            <summary>
            Compiles a given source code into an assembly.
            </summary>
            <remarks>
            The compilation happens at construct time, using the constructor parameters.
            The compiled assembly can then be accessed using the <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.CompiledCode"/> property.
            <para>The <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.CompiledCode"/> property can then be loaded into a separate application domain
            by using the <see cref="T:Kodeo.Reegenerator.DynamicCode.AppDomainWrapper"/> class.</para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.Code.#ctor(System.String,System.String[],System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.DynamicCode.Code"/> class from one source code.
            </summary>
            <remarks>
            The constructor takes a source code (<paramref name="sourceCode"/>) of a specified 
            language (<paramref name="language"/>) and builds it into an assembly 
            named <paramref name="assemblyName"/> that references a list of assemblies (<paramref name="references"/>).
            <para>The <paramref name="references"/> contain absolute paths to the assemblies to be 
            referenced by the assembly to be built.</para>
            <para>Failing to add the references required by <paramref name="sourceCode"/> will determine a compile error.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyName"/> or <paramref name="sourceCode"/> is null or empty.</exception>
            <param name="language">The language of the <paramref name="sourceCode"/>. 
            The acceptable values are the same as for <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)"/> method. 
            If <c>null</c>, it defaults to C#.</param>
            <param name="references">The references of the assembly to be compiled. 
            Each array item must contains the full path of the assembly to be referenced.
            A <c>null</c> value or an empty array means that the assembly being dynamically created 
            does not reference other assemblies.
            <c>System</c> is referenced by default and does not need to be specified.
            </param>
            <param name="assemblyName">The name of the assembly to be compiled.</param>
            <param name="sourceCode">The source code. It has to be in the language specified by the <paramref name="language"/> parameter.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.Code.#ctor(System.String,System.String[],System.String,System.String[])">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.DynamicCode.Code"/> class from several code sources.
            </summary>
            <remarks>
            The constructor takes an array of source code (<paramref name="sourceCodes"/>) of a specified language (<paramref name="language"/>)
            and builds it into an assembly named <paramref name="assemblyName"/> that references a list of assemblies (<paramref name="references"/>).
            <para>The <paramref name="references"/> contain absolute paths to the assemblies to be referenced by the assembly to be built.</para>
            <para>Failing to add the references required by <paramref name="sourceCodes"/> will determine a compile error.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyName"/> or <paramref name="sourceCodes"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceCodes"/> contains elements that are null or empty.</exception>
            <param name="language">The language of the code sources in <paramref name="sourceCodes"/>. 
            The acceptable values are the same as for <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)"/> method. 
            If <c>null</c>, it defaults to C#.</param>
            <param name="references">The references of the assembly to be compiled. 
            Each array item must contains the full path of the assembly to be referenced.
            A <c>null</c> value or an empty array means that the assembly being dynamically created 
            does not reference other assemblies.
            <c>System</c> is referenced by default and does not need to be specified.
            </param>
            <param name="assemblyName">The name of the assembly to be compiled.</param>
            <param name="sourceCodes">An string array, each item containing source code. All sources must be written in the language specified by the <paramref name="language"/> parameter.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.Code.Language">
            <summary>
            Gets the language of all source code in <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.SourceCodes"/>.
            </summary>
            <remarks>
            The value is specified at construction time.
            <para>The acceptable values are the same as for <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)"/> method. If null, it defaults to C#.</para>
            </remarks>
            <value>The language of the source codes.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.Code.References">
            <summary>
            Gets the list of assemblies referenced by the assembly built from <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.SourceCodes"/>.
            </summary>
            <remarks>The value is specified at construction time.</remarks>
            <value>The list of assemblies referenced by the assembly built from <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.SourceCodes"/>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.Code.AssemblyName">
            <summary>
            Gets the name of the assembly built from <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.SourceCodes"/>.
            </summary>
            <remarks>The value is specified at construction time.</remarks>
            <value>The name of the assembly built from <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.SourceCodes"/>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.Code.SourceCodes">
            <summary>
            Gets the array of source codes to be compiled into an assembly.
            </summary>
            <remarks>The value is specified at construction time and compiled into <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.CompiledCode"/>.
            <para>All sources are in the same <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.Language"/> language.</para>
            </remarks>
            <value>The array of strings contaning source codes specified at construction time.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.DynamicCode.Code.CompiledCode">
            <summary>
            Gets the compiled assembly as an array of bytes.
            </summary>
            <remarks>
            The compilation takes place at construction time.
            <para>
            The constructor takes <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.SourceCodes"/> sources written in <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.Language"/> language
            and builds them into an assembly named <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.AssemblyName"/> 
            that references the <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.References"/> list of assemblies.
            <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.CompiledCode"/> is the binary content of the compiled assembly.
            </para>
            </remarks>
            <value>The compiled assembly as an array of bytes.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.DynamicCode.Code.Init">
            <summary>
            Compiles the source code and sets the <see cref="P:Kodeo.Reegenerator.DynamicCode.Code.CompiledCode"/>.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.BaseException">
            <summary>
            Represents business errors that occur during application execution. This is the base class for all business errors.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.BaseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kodeo.Reegenerator.BaseException"/> class.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.BaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.BaseException.#ctor(System.String,System.Exception)">
            <summary>
             Initializes a new instance of the System.Exception class with a specified
            error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.BaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the System.Exception class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Extensions">
            <summary>
            A  collections of useful methods defined as extension methods.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Extensions.EqualsCI(System.String,System.String)">
            <summary>
            Tests whether two string are equal case insensitive.
            </summary>
            <param name="s1">The first string to compare.</param>
            <param name="s2">The second string to compare.</param>
            <returns>True if <paramref name="s1"/> equals <paramref name="s2"/>; false otherwise.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Extensions.ExtensionRationalize(System.String)">
            <summary>
            Returns an extension prefixed with the '.' character from an extension that might or might not be prefixed.
            </summary>
            <param name="extension">The extension</param>
            <returns>The extension prefixed with the '.' character.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Extensions.ExtensionIsEmpty(System.String)">
            <summary>
            Determines whether an extension is an empty extension (null, empty string, just spaces or just dots).
            </summary>
            <param name="extension">The extension</param>
            <returns>The extension prefixed with the '.' character.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Extensions.ExtensionEquivalent(System.String,System.String)">
            <summary>
            Tests whether two extensions are equal.
            The differences in case or whether they are prefixed with '.' do not matter.
            </summary>
            <param name="extension1">The first extension to compare.</param>
            <param name="extension2">The second extension to compare.</param>
            <returns>True if <paramref name="extension1"/> is the equivalent of <paramref name="extension2"/>; false otherwise.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Extensions.GetSolutionExplorerIcons(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Get the image list associated with a hierarchy. These contained images are the ones displayed in soluation explorer.
            </summary>
            <param name="vsHierarchy">The hierarchy.</param>
            <returns>The image list associated with the hierarchy parameter.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Extensions.GetSolutionExplorerIcon(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Func{System.Windows.Forms.ImageList},System.UInt32)">
            <summary>
            Gets the image associated with an item in the solution explorer.
            </summary>
            <param name="vsHierarchy">The hierarchy the item belongs to.</param>
            <param name="itemId">The id of the item with the hierarchy.</param>
            <param name="getImageList">The image list containing all the images used by the hierarchy.</param>
            <returns>The image associated with an item in the solution explorer.</returns>
            <remarks>
            The <paramref name="getImageList"/> gives the callers the opportunity to cache the image list associated with a hierarchy when repeatedly retrieving
            images for items within the same hierarchy. If this parameter is null, a call to <see cref="M:Kodeo.Reegenerator.Extensions.GetSolutionExplorerIcons(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)"/> will be used instead.
            </remarks>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Renderer.IAttachInfoLoader">
            <summary>
            Loader for a list of <see cref="T:Kodeo.Reegenerator.Generators.Renderer.Directive"/>.
            </summary>
            <remarks>
            The <see cref="T:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager"/> class uses a list of classes that implement this interface
            in order to provide a repository for the renderer directives specified for a project item.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.IAttachInfoLoader.Contains(Kodeo.Reegenerator.Wrappers.ProjectItem)">
            <summary>
            Checks if a project item has renderer attach information specified in the repository 
            managed by this type of loader.
            </summary>
            <param name="projectItem">The project item to be checked.</param>
            <returns>True if the repository contains rendererd attach information for <paramref name="projectItem"/>; false otherwise.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.IAttachInfoLoader.Load(Kodeo.Reegenerator.Wrappers.ProjectItem)">
            <summary>
            Loads the information about the renderers attached to a project item 
            from the repository managed by this type of loader.
            </summary>
            <param name="projectItem">The project item to load info for.</param>
            <returns>The <see cref="T:Kodeo.Reegenerator.Generators.RgenAttachInfo"/> attached to <paramref name="projectItem"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.IAttachInfoLoader.Save(Kodeo.Reegenerator.Wrappers.ProjectItem,Kodeo.Reegenerator.Generators.RgenAttachInfo)">
            <summary>
            Saves attached generators information to the repository managed by this type of loader.
            for <paramref name="projectItem"/> 
            </summary>
            <param name="projectItem">The project item to save info for.</param>
            <param name="attachInfo">The attached generators information.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.IAttachInfoLoader.Remove(Kodeo.Reegenerator.Wrappers.ProjectItem)">
            <summary>
            Removes all the renderers attached to <paramref name="projectItem"/>
            from the repository managed by this type of loader.
            </summary>
            <param name="projectItem">The project to remove renderers from.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Renderer.RgenAttachXmlFileDirectivesLoader">
            <summary>
            Directives loader class that stores directives in an xml file stored in the root of the solution.
            </summary>
            <remarks>
            The directives are stored as build properties associated with the project item.
            </remarks>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager">
            <summary>
            Manages renderer directives associated with a project item.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.EDirectivesStorageType">
            <summary>
            Represents the location where the renderer directives for a project item are stored.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.EDirectivesStorageType.Unknown">
            <summary>
            Not yet known. The <see cref="T:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager"/> has not attempted to load them yet.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.EDirectivesStorageType.InProjectFile">
            <summary>
            In the project file the project item belongs to.
            The renderers directives are stored as a build property for the project item.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.EDirectivesStorageType.InFile">
            <summary>
            Embedded in the project item's file.
            Renderer directives are XML nodes or XML schema nodes.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.EDirectivesStorageType.InSolutionXmlFile">
            <summary>
            In an XML file located in solution's root folder.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.#ctor(Kodeo.Reegenerator.Wrappers.ProjectItem)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectItem"/> is <c>null</c>.</exception>
            <param name="projectItem">The project item whose directives are to be loaded by this instance.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.ProjectItem">
            <summary>
            Gets the <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> whose directives are
            managed by this instance.
            </summary>
            <value>The <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> whose directives are
            managed by this instance.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.CanDoInFile">
            <summary>
            Gets a value that indicates whether <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.ProjectItem"/> supports in file renderer directives.
            </summary>
            <remarks>
            The file types that supprt in file renderer directives definition are XML and XML schema files (.XML and .xsd).
            </remarks>
            <value><c>true</c> if <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.ProjectItem"/> supports in file renderer directives; <c>false</c> otherwise.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.LoaderType">
            <summary>
            Gets the type of the loader currently in use.
            </summary>
            <remarks>
            When you change from a type to another, the directives from the repository
            associated with the old type will be removed.
            <para>
            For example, if the current type is in file and you change it to in project, all the
            directives defined in the file will be removed, and the <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Directives"/> will
            be saved in the project file when <see cref="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Save"/> is called.
            </para>
            </remarks>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.DirectivesLoader">
            <summary>
            Gets the current <see cref="T:Kodeo.Reegenerator.Generators.Renderer.IAttachInfoLoader"/>.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Directives">
            <summary>
            Gets the list of all the directives defined for <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.ProjectItem"/>.
            </summary>
            <value>The list of all the directives defined for <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.ProjectItem"/>.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Save">
            <summary>
            Saves the directives into the current storage for <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.ProjectItem"/>.
            </summary>
            <remarks>
            If the current <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.LoaderType"/> is <see cref="F:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.EDirectivesStorageType.Unknown"/>,
            it will automatically be switched to <see cref="F:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.EDirectivesStorageType.InProjectFile"/>,
            and the directives will be saved by default into the project file.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.RemoveAll">
            <summary>
            Removes all directives from the current storage for <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.ProjectItem"/>.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.DetachPossible">
            <summary>
            Tells whether <see cref="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Detach(System.Boolean)"/> operation is possible.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Detach(System.Boolean)">
            <summary>
            Removes all directives from the current storage for <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.ProjectItem"/> by calling <see cref="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.RemoveAll"/>  
            and performs all necessary adjacent operations (e.g. checking our necessary files, setting some properties on the project item).
            </summary>
            <param name="deleteGeneratedFiles">Controls whether previously generated files are to be deleted after detaching.</param>
            <returns><c>true</c> if detach was successful; <c>false</c> otherwise (e.g. <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.DetachPossible"/> is <c>false</c> or project could could not be checked out).</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.EnablePossible">
            <summary>
            Tells whether <see cref="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Enable"/> operation is possible.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Enable">
            <summary>
            Enables the directives for <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.ProjectItem"/>
            and performs all necessary adjacent operations (e.g. checking our necessary files, setting some properties on the project item).
            </summary>
            <returns><c>true</c> if operation was successful; <c>false</c> otherwise (e.g. <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.EnablePossible"/> is <c>false</c> or check out could not be done).</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.DisablePossible">
            <summary>
            Tells whether <see cref="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Disable"/> operation is possible.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Disable">
            <summary>
            Disables the directives for <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.ProjectItem"/>
            and performs all necessary adjacent operations (e.g. checking our necessary files, setting some properties on the project item).
            </summary>
            <returns><c>true</c> if operation was successful; <c>false</c> otherwise (e.g. <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.DisablePossible"/> is <c>false</c> or check out could not be done).</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.RunPossible">
            <summary>
            Tells whether <see cref="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Run"/> operation is possible.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Run">
            <summary>
            Executes the directives for <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.ProjectItem"/> as instructed in <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Directives"/>
            and performs all necessary adjacent operations (e.g. checking our necessary files, setting some properties on the project item).
            </summary>
            <returns><c>true</c> if operation was successful; <c>false</c> otherwise (e.g. <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.RunPossible"/> is <c>false</c> or check out could not be done).</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.SafeGetDirectives(System.Boolean)">
            <summary>
            Gets the information about the attached renderers if any.
            </summary>
            <param name="throwIfNotFound">Controls whether the method throws an error if nothing is attached or returns <c>null</c>.</param>
            <returns>the information about the attached renderers or <c>null</c> if nothing is attached and <paramref name="throwIfNotFound"/> is <c>false</c>.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.AttachPossible">
            <summary>
            Tells whether <see cref="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Attach(Kodeo.Reegenerator.Generators.RgenAttachInfo)"/> operation is possible.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.Attach(Kodeo.Reegenerator.Generators.RgenAttachInfo)">
            <summary>
            Attaches <paramref name="attachInfo"/> to <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.ProjectItem"/>.
            </summary>
            <param name="attachInfo">The instance containing what renderers to attach to <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.ProjectItem"/>.</param>
            <returns><c>true</c> if attach was successful; <c>false</c> otherwise (e.g. <see cref="P:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager.AttachPossible"/> is <c>false</c> or project could could not be checked out).</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Renderer.CustomTool">
             <summary>
             Custom tool class that executes multiple renderers specified for the associated project item.
             </summary>
             <remarks>
             The renderers are the generated code of an rgt file or custom renderers that implement <see cref="T:Kodeo.Reegenerator.Generators.ICodeRenderer"/>.
             The renderers are identified by renderer directives that 
             are defined in the project file as build attributes or in the file itself
             but only for files that support this feature (XML files and XML schema files).
             No matter where the directives are stored, they share the same attributes 
             that point to the renderers to be used.
             <para>There are two types of renderers: adhoc and compiled.</para>
             <para>Adhoc renderers are always the result of an rgt file code generation. They do not live in a dedicated
             generators project and they are compiled and executed on the fly when needed. They are best suited for simpler generation
             tasks when you do not need to share code between different generators or projects. You have however the ability
             to include files and reference assemblies for more complicated scenarios. To do so, you need to define
             the proper template directives in the rgt file as explained here <see cref="T:Kodeo.Reegenerator.Generators.Template.CodeRenderer"/>.
             </para>
             <para>These are the attributes of the render directives for adhoc renderers:</para>
             <list type="table">
             <listheader>
                 <term>Attribute</term>
                 <description>Description</description>
             </listheader>
             <item>
                 <term>templatePath</term>
                 <description>
                     The path to the rgt file that defines the renderer. 
                     <para>You can use path directives as per <see cref="M:Kodeo.Reegenerator.Wrappers.ProjectItem.ExpandPath(System.String)"/>.</para>
                 </description>
             </item>
             <item>
                 <term>class</term>
                 <description>The full class name of the renderer class.</description>
             </item>
             <item>
                 <term>extension</term>
                 <description>Optional attribute that defines the extension of the generated file.</description>
             </item>
             </list>
             <para>Compiled renderers always live in a generators project.
             A generators project is a class library that defines render classes that implement <see cref="T:Kodeo.Reegenerator.Generators.ICodeRenderer"/>. 
             The renders can be created from rgt files or manually defined in class files.
             The generator project does not compile with the solution. It compiles on the fly during a custom tool run if a 
             render directive points to a class belonging to it.
             </para>
             <para>The compiled renderers offer more flexibility than adhoc renderers and are better suited for complex scenarios. 
             They are a bit slower to render as they need to build the contained project.</para>
             <para>You will have defined one of the following attributes:</para>
             <list type="table">
             <listheader>
                 <term>Attribute</term>
                 <description>Description</description>
             </listheader>
             <item>
                 <term>projectPath</term>
                 <description>
                     Identifies the project by path.
                     <para>You can use path directives as per <see cref="M:Kodeo.Reegenerator.Wrappers.ProjectItem.ExpandPath(System.String)"/>.</para>
                 </description>
             </item>
             <item>
                 <term>projectName</term>
                 <description>The unique project id of the project.</description>
             </item>
             <item>
                 <term>assemblyPath</term>
                 <description>The path of the assembly containing the renderer class.
                     <para>You can use path directives as per <see cref="M:Kodeo.Reegenerator.Wrappers.ProjectItem.ExpandPath(System.String)"/>.</para>
                 </description>
             </item>
             <item>
                 <term>assemblyName</term>
                 <description>The full name of the assembly containing the renderer class.</description>
             </item>
             </list>
             <para>
             When <c>projectPath</c> or <c>projectName</c> is used, the project identified by these attributes is compiled before the render process.
             The resulting assembly from the current configuration is then used to create the renderer class.
             If <c>assemblyPath</c> or <c>assemblyName</c> is used, the process is identical except there is no build process involved.
             </para>
             <para>You will also define these attibutes no matter what choice you made above.</para>
             <list type="table">
             <listheader>
                 <term>Attribute</term>
                 <description>Description</description>
             </listheader>
             <item>
                 <term>class</term>
                 <description>The full class name of the renderer class.</description>
             </item>
             <item>
                 <term>extension</term>
                 <description>Optional attribute that defines the extension of the generated file.</description>
             </item>
             </list>
            
             <para>
             When multiple renderers are invoked, a <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/> instance is built 
             from all the <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/> instances returned by each individual renderer. 
             You have to organize the renderers extension attributes so that they do not overlap.
             Please note that you can author a custom renderer that returns multiple source files.
             </para>
             </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.CustomTool.Render">
            <summary>
            Renders the code within a given context. This is called by the GenerateCode method.
            </summary>
            <remarks>
            The render method reads the render directives from the source project item file.
            It then instantiate the render classes and assembles their results into an <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/> instance.
            </remarks>
            <returns>An <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/> instance containing the results of the render process.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.CustomTool.RenderOneDirective(Kodeo.Reegenerator.Generators.RgenAttachedRenderer)">
            <summary>
            Renders one directive.
            </summary>
            <param name="rendererDirective">The directive to be rendered.</param>
            <returns>The results of the execution of <paramref name="rendererDirective"/>.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Renderer.ProjectItemDirectivesLoader">
            <summary>
            Directives loader class that stores directives in the project file.
            </summary>
            <remarks>
            The directives are stored as build properties associated with the project item.
            </remarks>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Renderer.XmlSchemaDirectivesLoader">
            <summary>
            Directives loader class that stores directives in an XML schema file.
            </summary>
            <remarks>
            The XML schema file can specify multiple renderers and can therefore generate multiple files from the same project item.
            A renderer directive is located at <c>xs:schema/xs:annotation/xs:appinfo</c> and is enclosed between <c>&lt;renderer</c> and <c>/&gt;</c>.
            See <see cref="T:Kodeo.Reegenerator.Generators.Renderer.CustomTool"/> for a detailed description of the renderer directives.
            </remarks>
            <example>
            This is an example on how to define render directives in an XML schema file:
            <code>
            &lt;xs:schema id="AssetsService" 
                       targetNamespace="urn:Solution:Business.AssetsService" 
                       elementFormDefault="qualified" 
                       xmlns="urn:Solution:Business.AssetsService" 
                       xmlns:mstns="urn:Solution:Business.AssetsService" 
                       xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                       xmlns:Assets="urn:Solution:Business.Assets"&gt;
                &lt;xs:annotation&gt;
                    &lt;xs:appinfo source="urn:Kodeo.Reegenerator" &gt;
                        &lt;renderer projectName="RenderersLibrary\RenderersLibrary.csproj" class="RenderersLibrary.BusinessService" xmlns="urn:Kodeo.Reegenerator:renderer" /&gt;
                        &lt;renderer projectName="RenderersLibrary\RenderersLibrary.csproj" class="RenderersLibrary.BusinessService" extension=".txt" xmlns="urn:Kodeo.Reegenerator:renderer" /&gt;
                    &lt;/xs:appinfo&gt;
                &lt;/xs:annotation&gt;
            &lt;xs:schema&gt;
            </code>
            </example>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Renderer.Directive">
            <summary>
            The representation of a directive as defined in a file.
            </summary>
            <remarks>
            This class provides methods for inheritors to access and load directive attributes.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.Directive.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.Renderer.Directive"/> class with a specified name.
            </summary>
            <remarks>
            Creates a new directive with a given <paramref name="name"/> 
            and initializes the <see cref="P:Kodeo.Reegenerator.Generators.Renderer.Directive.Attributes"/> to an empty list.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty.</exception>
            <param name="name">The name of the directive.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Renderer.Directive.Name">
            <summary>
            Gets the name of the directive.
            </summary>
            <value>The name of the directive.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Renderer.Directive.Attributes">
            <summary>
            Gets the attributes defined for this directive.
            </summary>
            <value>A dictionary of attributes.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Renderer.Directive.Item(System.String)">
            <summary>
            Gets the value of the directive attribute identified by <paramref name="key"/>. 
            If the attribute is not found in the directive, an exception is thrown.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> cannot be found in <see cref="P:Kodeo.Reegenerator.Generators.Renderer.Directive.Attributes"/>.</exception>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute identified by <paramref name="key"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.Directive.GetValue(System.String,System.Boolean)">
            <summary>
            Gets the value of a directive attribute.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> cannot be found in <see cref="P:Kodeo.Reegenerator.Generators.Renderer.Directive.Attributes"/>
            and <paramref name="throwIfNotFound"/> is <c>true</c>.</exception>
            <param name="key">The key of the attribute.</param>
            <param name="throwIfNotFound">If the attribute with the specified key cannot be found, throw an error if true.</param>
            <returns>The value of the attribute identified by the key.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.Directive.LoadFromKeyValuePairs(System.String)">
            <summary>
            Gets a value for a key from a string in the key1="value1" key="value2" format.
            </summary>
            <param name="input">A string of key value pairs (e.g. key1="value1" key="value2").</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Renderer.Directive.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Kodeo.Reegenerator.Generators.Renderer.Directive"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Kodeo.Reegenerator.Generators.Renderer.Directive"/>.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Renderer.XmlFileDirectivesLoader">
            <summary>
            Directives loader class that stores directives in an XML file.
            </summary>
            <remarks>
            The XML file can specify multiple renderers and can therefore generate multiple files from the same project item.
            A renderer directive must be enclosed between <c>&lt;?</c> and <c>?&gt;</c>.
            See <see cref="T:Kodeo.Reegenerator.Generators.Renderer.CustomTool"/> for a detailed description of the renderer directives.
            </remarks>
            <example>
            This is an example on how to define render directives in an XML file:
            <code>
            &lt;?XML version="1.0" encoding="utf-8" ?&gt;
            &lt;?renderer projectName="RenderersLibrary\RenderersLibrary.csproj" class="RenderersLibrary.DatabaseDataReader" xmlns="urn:Kodeo.Reegenerator:renderer" ?&gt;
            &lt;?renderer projectName="RenderersLibrary\RenderersLibrary.csproj" class="RenderersLibrary.DatabaseTables" extension=".Table.sql" xmlns="urn:Kodeo.Reegenerator:renderer" ?&gt;
            &lt;?renderer projectName=b"RenderersLibrary\RenderersLibrary.csproj" class="RenderersLibrary.DatabaseCRUDSPs" extension=".CRUD.sql" xmlns="urn:Kodeo.Reegenerator:renderer" ?&gt;
            
            &lt;GenerationUnit xmlns="urn:Solution:RenderersLibrary.Database" 
                            ConfigurationPath="Configuration.XML"&gt;
              &lt;Table Name="Customers" /&gt;
            &lt;/GenerationUnit&gt;
            </code>
            </example>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.RgenAttachedRenderersXmlFile">
            <remarks/>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenAttachedRenderersXmlFile.PathFromSolution(EnvDTE.Solution)">
            <summary>
            Gets the path where the xml file is stored for a given solution.
            </summary>
            <param name="solution">The solution.</param>
            <returns>The path where the xml file is stored for a given solution.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenAttachedRenderersXmlFile.FromSolution(EnvDTE.Solution)">
            <summary>
            Gets the current <see cref="T:Kodeo.Reegenerator.Generators.RgenAttachedRenderersXmlFile" />  for a solution.
            </summary>
            <param name="solution">The solution containing the <see cref="F:Kodeo.Reegenerator.Constants.RgenAttachedRenderersFileName"/> file in the root.</param>
            <returns>An instance of <see cref="T:Kodeo.Reegenerator.Generators.RgenAttachedRenderersXmlFile" /> with the content of the <see cref="F:Kodeo.Reegenerator.Constants.RgenAttachedRenderersFileName"/> file located in the solution's root.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachedRenderersXmlFile.Items">
            <remarks/>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.RgenAttachedRenderersXmlFileItem">
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachedRenderersXmlFileItem.Path">
            <remarks/>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.RgenAttachInfo">
            <summary>
            Defines the code generators attached to a project item.
            </summary>
            <remarks/>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenAttachInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.RgenAttachInfo"/> class.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachInfo.AttachedRenderers">
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachInfo.OldCustomTool">
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachInfo.ExecutionTrigger">
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachInfo.IsEnabled">
            <remarks/>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.RgenAttachedRenderer">
            <summary>
            Defines one renderer attached to a project item of <see cref="P:Kodeo.Reegenerator.Generators.RgenAttachedRenderer.RgenAttachInfo"/>.
            </summary>
            <remarks/>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenAttachedRenderer.Clone(Kodeo.Reegenerator.Generators.RgenAttachedRenderer)">
            <summary>
            Creates a new renderer that is a copy of this renderer.
            </summary>
            <param name="original">The renderer to be cloned.</param>
            <returns>A renderer that is a copy of this renderer.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenAttachedRenderer.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns>A System.String that represents the current System.Object.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenAttachedRenderer.SetValues(Kodeo.Reegenerator.DynamicCode.RendererTypesLoader.RenderTypeInfo)">
            <summary>
            Sets the <see cref="P:Kodeo.Reegenerator.Generators.RgenAttachedRendererProperty.ValueAsObject"/> for all
            properties according to the type as defined in the code generator.
            </summary>
            <param name="rti">The type information about the code generator.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenAttachedRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.RgenAttachedRenderer"/> class.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachedRenderer.Item">
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachedRenderer.ItemElementName">
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachedRenderer.Properties">
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachedRenderer.ClassName">
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachedRenderer.Extension">
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachedRenderer.IsEnabled">
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachedRenderer.RequiresGlobalServices">
            <remarks/>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.RgenAttachedRendererProperty">
            <summary>
            Defines a code generation variable for <see cref="P:Kodeo.Reegenerator.Generators.RgenAttachedRendererProperty.RgenAttachedRenderer"/>.
            </summary>
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachedRendererProperty.ValueAsObject">
            <summary>
            Represents <see cref="P:Kodeo.Reegenerator.Generators.RgenAttachedRendererProperty.Value"/> connverted to the type of the associated propery from the code generator.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenAttachedRendererProperty.Equals(System.Object)">
            <summary>
            Determines whether the specified property is equal to this property.
            </summary>
            <param name="obj">The object to compare with the this property.</param>
            <returns>true if the specified property is equal to this property; otherwise, false.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenAttachedRendererProperty.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>A hash code for the current instance.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachedRendererProperty.Name">
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachedRendererProperty.Value">
            <remarks/>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.ItemChoiceType">
            <remarks/>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.ItemChoiceType.AssemblyName">
            <remarks/>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.ItemChoiceType.AssemblyPath">
            <remarks/>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.ItemChoiceType.ProjectName">
            <remarks/>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.ItemChoiceType.ProjectPath">
            <remarks/>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.ItemChoiceType.TemplatePath">
            <remarks/>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.ExecutionTrigger">
            <remarks/>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.ExecutionTrigger.CustomTool">
            <remarks/>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.ExecutionTrigger.FileSave">
            <remarks/>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.ExecutionTrigger.Build">
            <remarks/>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.ExecutionTrigger.Manual">
            <remarks/>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.RgenAttachInfoSchemaFactory">
            <summary>
            Factory class for classes defined in the RgenAttachInfoSchema schema.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachInfoSchemaFactory.Schemas">
            <summary>
            The contents of the RgenAttachInfoSchema schema and the imported schema.
            It is used to check the validity of XML files against the XML schema.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenAttachInfoSchemaFactory.XmlSchemaSet">
            <summary>
            Gets a compiled schema set containing the RgenAttachInfoSchema schema and all included schemas.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenAttachInfoSchemaFactory.Create``1(System.Xml.XmlReader)">
            <summary>
            Creates an object by deserializing the content of an xml document
            into an instance of the <typeparamref name="T"/>.
            <typeparamref name="T"/> must implement IInitializable to be initialized post creation.
            </summary>
            <typeparam name="T">The type of the instance to be created from the <paramref name="xmlReader"/>.</typeparam>
            <param name="xmlReader">The XML file project item.</param>
            <returns>An instance of type <typeparamref name="T"/>.</returns>"
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenAttachInfoSchemaFactory.Create``1(System.IO.Stream)">
            <summary>
            Creates an object by deserializing the content of an xml document
            into an instance of the <typeparamref name="T"/>.
            <typeparamref name="T"/> must implement IInitializable to be initialized post creation.
            </summary>
            <typeparam name="T">The type of the instance to be created from the <paramref name="stream"/>.</typeparam>
            <param name="stream">The XML file project item.</param>
            <returns>An instance of type <typeparamref name="T"/>.</returns>"
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenAttachInfoSchemaFactory.Create``1(System.String)">
            <summary>
            Creates an object by deserializing the content of an xml document
            into an instance of the <typeparamref name="T"/>.
            <typeparamref name="T"/> must implement IInitializable to be initialized post creation.
            </summary>
            <typeparam name="T">The type of the instance to be created from the <paramref name="path"/>.</typeparam>
            <param name="path">The XML file project item.</param>
            <returns>An instance of type <typeparamref name="T"/>.</returns>"
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenAttachInfoSchemaFactory.Create``1(System.IO.TextReader)">
            <summary>
            Creates an object by deserializing the content of an xml document
            into an instance of the <typeparamref name="T"/>.
            <typeparamref name="T"/> must implement IInitializable to be initialized post creation.
            </summary>
            <typeparam name="T">The type of the instance to be created from the <paramref name="textReader"/>.</typeparam>
            <param name="textReader">The XML file project item.</param>
            <returns>An instance of type <typeparamref name="T"/>.</returns>"
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.DependencyProjectItem">
            <remarks/>
            <summary>
            Defines the code generation depenedencies for one project item.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.DependencyProjectItem.DependsOn">
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.DependencyProjectItem.Path">
            <remarks/>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.DependsOn">
            <remarks/>
            <summary>
            Defines one project item <see cref="P:Kodeo.Reegenerator.Generators.DependsOn.DependencyProjectItem"/> is dependent on.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.DependsOn.Path">
            <remarks/>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.RgenDependencies">
            <remarks/>
            <summary>
            Defines the code generation dependencies within the current solution.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenDependencies.DependencyProjectItem">
            <remarks/>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenDependencies.PathFromSolution(EnvDTE.Solution)">
            <summary>
            Gets the path where the xml file is stored for a given solution.
            </summary>
            <param name="solution">The solution.</param>
            <returns>The path where the xml file is stored for a given solution.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenDependencies.FromSolution(EnvDTE.Solution)">
            <summary>
            Gets the current <see cref="T:Kodeo.Reegenerator.Generators.RgenDependencies" />  for a solution.
            </summary>
            <param name="solution">The solution containing the <see cref="F:Kodeo.Reegenerator.Constants.RgenDependenciesFileName"/> file.</param>
            <returns>An instance of <see cref="T:Kodeo.Reegenerator.Generators.RgenDependencies" /> with the content of the <see cref="F:Kodeo.Reegenerator.Constants.RgenDependenciesFileName"/> file located in the solution's root.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.RgenDependenciesSchemaFactory">
            <summary>
            Factory class for classes defined in the RgenDependenciesSchema schema.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenDependenciesSchemaFactory.Schemas">
            <summary>
            The contents of the RgenDependenciesSchema schema and the imported schema.
            It is used to check the validity of XML files against the XML schema.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenDependenciesSchemaFactory.XmlSchemaSet">
            <summary>
            Gets a compiled schema set containing the RgenDependenciesSchema schema and all included schemas.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenDependenciesSchemaFactory.Create``1(System.Xml.XmlReader)">
            <summary>
            Creates an object by deserializing the content of an xml document
            into an instance of the <typeparamref name="T"/>.
            <typeparamref name="T"/> must implement IInitializable to be initialized post creation.
            </summary>
            <typeparam name="T">The type of the instance to be created from the <paramref name="xmlReader"/>.</typeparam>
            <param name="xmlReader">The XML file project item.</param>
            <returns>An instance of type <typeparamref name="T"/>.</returns>"
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenDependenciesSchemaFactory.Create``1(System.IO.Stream)">
            <summary>
            Creates an object by deserializing the content of an xml document
            into an instance of the <typeparamref name="T"/>.
            <typeparamref name="T"/> must implement IInitializable to be initialized post creation.
            </summary>
            <typeparam name="T">The type of the instance to be created from the <paramref name="stream"/>.</typeparam>
            <param name="stream">The XML file project item.</param>
            <returns>An instance of type <typeparamref name="T"/>.</returns>"
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenDependenciesSchemaFactory.Create``1(System.String)">
            <summary>
            Creates an object by deserializing the content of an xml document
            into an instance of the <typeparamref name="T"/>.
            <typeparamref name="T"/> must implement IInitializable to be initialized post creation.
            </summary>
            <typeparam name="T">The type of the instance to be created from the <paramref name="path"/>.</typeparam>
            <param name="path">The XML file project item.</param>
            <returns>An instance of type <typeparamref name="T"/>.</returns>"
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenDependenciesSchemaFactory.Create``1(System.IO.TextReader)">
            <summary>
            Creates an object by deserializing the content of an xml document
            into an instance of the <typeparamref name="T"/>.
            <typeparamref name="T"/> must implement IInitializable to be initialized post creation.
            </summary>
            <typeparam name="T">The type of the instance to be created from the <paramref name="textReader"/>.</typeparam>
            <param name="textReader">The XML file project item.</param>
            <returns>An instance of type <typeparamref name="T"/>.</returns>"
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.RgenQueue">
            <summary>
            Defines the generators queued for generation.
            </summary>
            <remarks/>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenQueue.OnIdle(EnvDTE.Solution)">
            <summary>
            Performs the idle processing of the generation jobs.
            </summary>
            <param name="solution">The solution.</param>
            <returns>True when there is more processing to be done; false otherwise.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenQueue.QueueItems">
            <remarks/>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.RgenQueueItem">
            <summary>
            Defines a generator queued for generation in <see cref="T:Kodeo.Reegenerator.Generators.RgenQueue"/>.
            </summary>
            <remarks/>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenQueueItem.Path">
            <remarks/>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.LicenseInfo">
            <summary>
            Represents the license assigned to the current installation.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.LicenseInfo.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:Kodeo.Reegenerator.Generators.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.LicenseInfo.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.LicenseInfo"/> class.
            </summary>
            <param name="emailAddress">The email address the license is assigned to.</param>
            <param name="serialNumber">The serial number assigned to the email address.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.LicenseInfo.EmailAddress">
            <summary>
            Gets the email address the license is assigned to.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.LicenseInfo.SerialNumber">
            <summary>
            Gets the serial number of the license
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.LicenseInfo.IsRegistered">
            <summary>
            Gets a value representing whether Reegenerator is registered (usable for commercial use).
            </summary>
            <value><c>true</c> if registered, <c>false</c> otherwise (for non-commercial use).</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.LicenseInfo.LicensesNo">
            <summary>
            Gets the number of licenses assigned to <see cref="P:Kodeo.Reegenerator.Generators.LicenseInfo.EmailAddress"/>.
            </summary>
            <remarks>
            <c>0</c> means unlimited and <c>null</c> not-registered (non-commercial use).
            </remarks>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.CustomTool">
            <summary>
            Base custom tool for all Reegenerator custom tools.
            </summary>
            <remarks>
            The code render process is triggered by custom tool execution within the IDE. A custom tool must
            be exposed and associated with a name in order to be used by the IDE. Please check Microsoft Visual Studio 
            and the Microsoft Visual Studio SDK documentation on what custom tools are and how to register them.
            <para>
            This class is used as the base class by all custom tools exposed by Reegenerator.
            Child classes override <see cref="M:Kodeo.Reegenerator.Generators.CustomTool.CreateRenderer"/> providing specific code rendering functionality.
            The <see cref="T:Kodeo.Reegenerator.Generators.CustomTool"/> instance will use the renderer to obtain the generation results as <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/>.
            It will then take care of transforming these results into files dependent 
            on the project item associated with the custom tool.
            </para>
            <para>
            Inheritants can opt for an alternative method. They can override the <see cref="M:Kodeo.Reegenerator.Generators.CustomTool.Render"/> 
            method to provide a completely customized render functionality.
            </para>
            <example>
            This is the default implementation of the <see cref="M:Kodeo.Reegenerator.Generators.CustomTool.Render"/> method:
            <code>
            protected virtual RenderResults Render()
            {
                ICodeRenderer codeRender = this.CreateRenderer();
                codeRender.SetSite(this.Site, new CustomToolExecutionContext(this.VsGeneratorProgress, this.Site));
                codeRender.PreRender();
                RenderResults renderResults = codeRender.Render();
                codeRender.PostRender();
                return renderResults;
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CustomTool.IsRegistered">
            <summary>
            Gets a value representing whether Reegenerator is registered (usable for commercial use).
            </summary>
            <value><c>true</c> if registered, <c>false</c> otherwise (for non-commercial use).</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CustomTool.LicenseInfo">
            <summary>
            Gets the license info on this computer.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#GetSite(System.Guid@,System.IntPtr@)">
            <summary>
            Gets the last site set with <b>Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.SetSite</b>. 
            If there is no known site, the object returns a failure code.
            </summary>
            <param name="riid">The IID of the interface pointer that should be returned in <paramref name="ppvSite"/>.</param>
            <param name="ppvSite">The address of the caller's <c>void*</c> variable in which the object stores the 
            interface pointer of the site last seen in <b>Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.SetSite</b>. 
            The specific interface returned depends on the riid argument; 
            the two arguments act identically to those in QueryInterface. 
            If the appropriate interface pointer is available, 
            the object must call AddRef on that pointer before returning successfully. 
            If no site is available, or the requested interface is not supported, 
            the object sets this argument to <c>null</c>, and returns a failure code.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)">
            <summary>
            Provides the site's <b>System.IUnknown</b> pointer to the object.
            </summary>
            <param name="pUnkSite">An interface pointer to the site managing this object.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CustomTool.Site">
            <summary>
            Gets or sets the site for this custom tool.
            </summary>
            <remarks>
            The site is normally set via the <b>Microsoft.VisualStudio.OLE.Interop.IObjectWithSite</b> interface
            mechanism so there is no need to manually set this property.
            </remarks>
            <value>The site for this custom tool.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CustomTool.SiteServiceProvider">
            <summary>
            Gets a <b>Microsoft.VisualStudio.Shell.ServiceProvider</b> associated with <see cref="P:Kodeo.Reegenerator.Generators.CustomTool.Site"/>.
            </summary>
            <value>A <b>Microsoft.VisualStudio.Shell.ServiceProvider</b> associated with <see cref="P:Kodeo.Reegenerator.Generators.CustomTool.Site"/>.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.GetService(System.Guid)">
            <summary>
            Gets the specified service from <see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider"/>.
            </summary>
            <param name="serviceGuid">The GUID of the service to retrieve.</param>
            <returns>The requested service, or <c>null</c> if the service could not be located.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.GetService``1">
            <summary>
            Gets type based services from <see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider"/>.
            </summary>
            <typeparam name="T">The type of service to retrieve. The GUID of this type is used to obtain
            the service from the native service provider.</typeparam>
            <returns>The requested service, or <c>null</c> if the service could not be located.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CustomTool.CodeDomProvider">
            <summary>
            Returns a <see cref="T:System.CodeDom.Compiler.CodeDomProvider"/> instance for the language of the project containing
            the project item the custom tool executes on.
            </summary>
            <returns>A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"/> instance.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.Microsoft#VisualStudio#Shell#Interop#IVsSingleFileGenerator#DefaultExtension(System.String@)">
            <summary>
            Implements the <b>Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator.DefaultExtension</b> method. 
            Returns the extension of the generated file
            </summary>
            <param name="pbstrDefaultExtension">Out parameter, will hold the extension that is to be given to the output file description. The returned extension must include a leading period</param>
            <returns><c>S_OK</c> if successful, <c>E_FAIL</c> if not.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.Microsoft#VisualStudio#Shell#Interop#IVsSingleFileGenerator#Generate(System.String,System.String,System.String,System.IntPtr[],System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress)">
            <summary>
            Implements the <b>Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator.Generate</b> method.
            </summary>
            <remarks>
            This method passes the execution to the <see cref="M:Kodeo.Reegenerator.Generators.CustomTool.GenerateCode(System.String)"/> method to process the custom tool execution request.
            </remarks>
            <param name="wszInputFilePath">The full path of the input file. May be a null reference (Nothing in Visual Basic) in future releases of Visual Studio, xmlSchemaObject generators should not rely on this value.</param>
            <param name="bstrInputFileContents">The contents of the input file. This is either a UNICODE BSTR (if the input file is text) or a binary BSTR (if the input file is binary). If the input file is a text file, the project system automatically converts the BSTR to UNICODE.</param>
            <param name="wszDefaultNamespace">This parameter is meaningful only for custom tools that generate code. It represents the namespace into which the generated code will be placed. If the parameter is not a null reference (Nothing in Visual Basic) and not empty, the custom tool can use the following syntax to enclose the generated code.</param>
            <param name="rgbOutputFileContents">[out] Returns an array of bytes to be written to the generated file. You must include UNICODE or UTF-8 signature bytes in the returned byte array, as this is a raw stream. The memory for rgbOutputFileContents must be allocated using the .NET Framework call, System.Runtime.InteropServices.AllocCoTaskMem, or the equivalent Win32 system call, CoTaskMemAlloc. The project system is responsible for freeing this memory.</param>
            <param name="pcbOutput">[out] Returns the count of bytes in the rgbOutputFileContent array.</param>
            <param name="pGenerateProgress">A reference to the IVsGeneratorProgress interface through which the generator can report its progress to the project system.</param>
            <returns>If the code succeeds, it returns <c>S_OK</c>. If it fails, it returns <c>E_FAIL</c>.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CustomTool.VsGeneratorProgress">
            <summary>
            Gets the <b>Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress</b> interface that can be used to report errors.
            </summary>
            <remarks>
            This property is set when <b>Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator.Generate</b> is called by Visual Studio.
            </remarks>
            <value>The <b>Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress</b> interface that can be used to report errors.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.GeneratorError(System.UInt32,System.String,System.UInt32,System.UInt32)">
            <summary>
            Method that will communicate an error via the shell callback mechanism.
            </summary>
            <remarks>
            This method that creates an error entry in the Error List window of the IDE.
            </remarks>
            <param name="level">Level or severity.</param>
            <param name="message">Text displayed to the user.</param>
            <param name="line">Line number of error.</param>
            <param name="column">Column number of error.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.GeneratorWarning(System.UInt32,System.String,System.UInt32,System.UInt32)">
            <summary>
            Method that will communicate a warning via the shell callback mechanism.
            </summary>
            <remarks>
            This method that creates an warning entry in the Error List window of the IDE.
            </remarks>
            <param name="level">Level or severity.</param>
            <param name="message">Text displayed to the user.</param>
            <param name="line">Line number of warning.</param>
            <param name="column">Column number of warning.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.CustomTool"/> class.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.OnIdle(EnvDTE.Solution)">
            <summary>
            Performs idle processing.
            </summary>
            <param name="solution">The current solution.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CustomTool.StatusBarTraceListener">
            <summary>
            Gets a trace listener that writes to the Microsoft Visual Studio status bar.
            </summary>
            <remarks>This listener is enlisted in the Trace listeners collection, 
            therefore you can use trace methods to write on this listener.
            <para>The status bar can accomodate one line only. When you write multi line messages, only the first line will be displayed on the status bar.</para>
            </remarks>
            <value>A <see cref="T:Kodeo.Reegenerator.Generators.StatusBarTraceListener"/> that writes to the Visual Studio status bar.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CustomTool.OutputPaneTraceListener">
            <summary>
            Gets a trace listener that writes to the Visual Studio Output window.
            </summary>
            <remarks>This listener is enlisted in the Trace listeners collection, 
            therefore you can use trace methods to write on this listener.
            <para>The name of the Output window pane is <c>Code Generation Ouput</c>.</para>
            </remarks>
            <value>An <see cref="T:Kodeo.Reegenerator.Generators.OutputPaneTraceListener"/> instance that writes to a Visual Studio Output window pane.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.GenerateCode(System.String)">
            <summary>
            The method is called by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator.Generate(System.String,System.String,System.String,System.IntPtr[],System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress)"/> 
            implementation of this class when a custom tool execution is triggered.
            </summary>
            <remarks>
            This method creates the necessary trace listeners, gets the <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/>
            by invoking the <see cref="M:Kodeo.Reegenerator.Generators.CustomTool.Render"/> method.
            It then saves all the results of render process as files dependent on the project item associated with this custom tool.
            The last step is to return <see cref="P:Kodeo.Reegenerator.Generators.RenderResults.GeneratedCode"/> to the Visual Studio IDE
            which will save it as the first dependent file of the project item.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputFileContent"/> is <c>null</c>.</exception>
            <param name="inputFileContent">File contents as a string</param>
            <returns>The generated code file as a byte-array</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.Render">
            <summary>
            Renders the code within a given context. This is called by the <see cref="M:Kodeo.Reegenerator.Generators.CustomTool.GenerateCode(System.String)"/> method.
            </summary>
            <remarks>
            Override this method if you want to provide a completely customized rendering process.
            The default implementation of this method is as follows:
            <code>
            protected virtual RenderResults Render()
            {
                ICodeRenderer codeRender = this.CreateRenderer();
                codeRender.SetSite(this.Site, new CustomToolExecutionContext(this.VsGeneratorProgress, this.Site));
                codeRender.PreRender();
                RenderResults renderResults = codeRender.Render();
                codeRender.PostRender();
                return renderResults;
            }
            </code>
            </remarks>
            <returns>The generated code.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.CreateRenderer">
            <summary>
            Render function that is to be overriden by child custom tool classes.
            </summary>
            <remarks>
            Inheritors can create an instance of a class that implements the ICodeRenderer interface
            thus providing the desired rendering functionality.
            <para>
            This method is called by the default <see cref="M:Kodeo.Reegenerator.Generators.CustomTool.Render"/> method. 
            If a child class overrides <see cref="M:Kodeo.Reegenerator.Generators.CustomTool.Render"/>, it does not need to override this method.
            </para>
            <example>
            This is the default implementation of the <see cref="M:Kodeo.Reegenerator.Generators.CustomTool.Render"/> method:
            <code>
            protected virtual RenderResults Render()
            {
                ICodeRenderer codeRender = this.CreateRenderer();
                codeRender.SetSite(this.Site, new CustomToolExecutionContext(this.VsGeneratorProgress, this.Site));
                codeRender.PreRender();
                RenderResults renderResults = codeRender.Render();
                codeRender.PostRender();
                return renderResults;
            }
            </code>
            </example>
            </remarks>
            <exception cref="T:System.NotImplementedException">Child class has overriden neither this method, nor <see cref="M:Kodeo.Reegenerator.Generators.CustomTool.Render"/>.</exception>
            <returns>An <see cref="T:Kodeo.Reegenerator.Generators.ICodeRenderer"/> that will be used by <see cref="M:Kodeo.Reegenerator.Generators.CustomTool.GenerateCode(System.String)"/> method to render the resulting code.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomTool.ReportProgress(System.UInt32,System.UInt32)">
            <summary>
            Reports generation progress to the IDE.
            </summary>
            <param name="complete">The number of completed steps.</param>
            <param name="total">The total number of steps.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CustomTool.ProjectItem">
            <summary>
            Gets <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> that triggered the custom tool execution.
            </summary>
            <value>The <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> that triggered the custom tool execution.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CustomTool.FileExtension">
            <summary>
            Gets or sets the extension of the rendered file. The extension starts with '.'.
            </summary>
            <remarks>If the extension has been set to a value, it returns that value. 
            Otherwise it returns the default extension for the current code provider appended to <c>.Designer.</c>.
            <para>
            The contents of the file with this extension is set to <see cref="P:Kodeo.Reegenerator.Generators.RenderResults.GeneratedCode"/>
            during the rendering process.
            </para>
            </remarks>
            <value>The extension of the rendered file.</value>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.AdditionalFile">
            <summary>
            Represents a additional file generated as a result of a render process.
            </summary>
            <remarks>
            <see cref="T:Kodeo.Reegenerator.Generators.AdditionalFile"/> class allows rendering multiple files as part of a render process.
            It is a part of the <see cref="T:Kodeo.Reegenerator.Generators.AdditionalResults"/> class.
            <para>
            The <see cref="P:Kodeo.Reegenerator.Generators.AdditionalFile.Extension"/> property will determine the name of the file
            that will be created as a dependent file. The file will be created in the same folder as
            the source file associated with the Reegenerator custom tool that triggered the generation process.
            </para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.AdditionalFile.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.AdditionalFile"/> class from a string content.
            Encoding defaults to <see cref="F:Kodeo.Reegenerator.Generators.RenderResults.DefaultEncoding"/>
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="generatedCode"/> is <c>null</c>.</exception>
            <param name="fileName">The name of the file. It must be just the name, no path information is allowed.</param>
            <param name="generatedCode">The content of the generated file.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.AdditionalFile.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.AdditionalFile"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="generatedCode"/> is <c>null</c>.</exception>
            <param name="fileName">The name of the file. It must be just the name, no path information is allowed.</param>
            <param name="generatedCode">The content of the generated file.</param>
            <param name="encoding">The encoding to be used when transforming <paramref name="generatedCode"/> into the binary array that will be saved as generated file. Defaults to <see cref="F:Kodeo.Reegenerator.Generators.RenderResults.DefaultEncoding"/>.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.AdditionalFile.#ctor(System.String,System.Byte[],System.Text.Encoding)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.AdditionalFile"/> class.
            </summary>
            <remarks>
            <paramref name="encoding"/> can be <c>null</c> if no encoding is required (e.g. generating binary files).
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="extension"/> is <c>null</c> or empty.</exception>
            <param name="extension">The extension of the file.</param>
            <param name="generatedCode">The content of the generated file.</param>
            <param name="encoding">The encoding used by <paramref name="generatedCode"/>.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.AdditionalFile.Extension">
            <summary>
            Gets the extension of the additional file to be created.
            </summary>
            <value>The extension of the additional file to be created.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.AdditionalFile.GeneratedCode">
            <summary>
            Gets or sets the content of the file to be created.
            </summary>
            <remarks>
            The property uses <see cref="P:Kodeo.Reegenerator.Generators.AdditionalFile.Encoding"/> encoding. Make sure you use the same when setting the value.
            </remarks>
            <value>The content of the file to be created.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.AdditionalFile.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <value>
            The encoding.
            </value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.AdditionalFile.IsEnabled">
            <summary>
            Determines whether the results are enabled.
            A value of <c>false</c> means that the rendering process did not actually take place and
            that the generated file is not supposed to change.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.AdditionalResults">
            <summary>
            Represents a list of <see cref="T:Kodeo.Reegenerator.Generators.AdditionalFile"/> instances.
            </summary>
            <remarks>
            <see cref="T:Kodeo.Reegenerator.Generators.AdditionalResults"/> class allows rendering multiple files as part of a render process. 
            It is a part of the <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/> class and a holder of 
            multiple <see cref="T:Kodeo.Reegenerator.Generators.AdditionalFile"/> instances.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.AdditionalResults.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.AdditionalResults"/> class.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.AdditionalResults.Add(Kodeo.Reegenerator.Generators.AdditionalFile)">
            <summary>
            Adds an <see cref="T:Kodeo.Reegenerator.Generators.AdditionalFile"/> to this instance.
            </summary>
            <remarks>
            This method enforces the unicity of the <see cref="T:Kodeo.Reegenerator.Generators.AdditionalFile"/> instances belonging to the class.
            This is due to the fact that the additional files become physical files with names derived
            from the source project item name and the extension. We therefore cannot allow same extension, otherwise
            additional files would override each other's results.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="additionalFile"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The extension of the <paramref name="additionalFile"/> is already used by another additional file.</exception>
            <param name="additionalFile">The <see cref="T:Kodeo.Reegenerator.Generators.AdditionalFile"/> to be added.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.AdditionalResults.AddRange(System.Collections.Generic.IEnumerable{Kodeo.Reegenerator.Generators.AdditionalFile})">
            <summary>
            Adds the <see cref="T:Kodeo.Reegenerator.Generators.AdditionalFile"/> instances of the specified collection to the end of this list.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="additionalFiles"/> is <c>null</c>.</exception>
            <param name="additionalFiles">The collection whose elements should be added to the end of this list.
            The collection itself cannot be null, and its elements must specify different extensions.
            </param>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.CodeRenderer">
            <summary>
            Base class for code renderers. Provides a basic implementation of <see cref="T:Kodeo.Reegenerator.Generators.ICodeRenderer"/>.
            </summary>
            <remarks>
            This class provides an implementation of the <see cref="T:Kodeo.Reegenerator.Generators.ICodeRenderer"/> that is based
            on an internal <see cref="T:System.IO.StringWriter"/> instance to gather the rendered code. 
            Use the <see cref="F:Kodeo.Reegenerator.Generators.CodeRenderer.Output"/> property to write to the resulting rendered file.
            <para>To manually build a generator, inherit from this class or directly implement <see cref="T:Kodeo.Reegenerator.Generators.ICodeRenderer"/>.</para>
            <para>It implements <see cref="T:Kodeo.Reegenerator.DynamicCode.MarshalByRefObjectDisposable"/> since the renderer must work accross application domains boundaries.</para>
            <para>The class provides various methods that help render code and trace capability for the child classes.</para>
            </remarks>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.CodeRenderer._outputStringBuilder">
            <summary>
            This <see cref="T:System.Text.StringBuilder"/> holds the code that will do the generation.
            (not the generated code, but rather the  code that generates the code).
            This is the result of the template being transformed into compilable code.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.CodeRenderer.Output">
            <summary>
            The <see cref="T:System.IO.StringWriter"/> instance that gathers the render results.
            </summary>
            <remarks>
            The content of this <see cref="T:System.IO.StringWriter"/> is returned by the <see cref="M:Kodeo.Reegenerator.Generators.CodeRenderer.Render"/> as part of the returned <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/>.
            <para>
            It will determine the content of the rendered file. You therefore need to write into into this property
            </para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer"/> class.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.SetSite(System.Object,Kodeo.Reegenerator.Generators.CustomToolExecutionContext)">
            <summary>
            Sets the site this generator is hosted by.
            </summary>
            <param name="site">The site that hosts the generator.</param>
            <param name="context">The context of the custom tool execution.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CodeRenderer.OutputPaneTraceListener">
            <summary>
            Gets a <see cref="P:Kodeo.Reegenerator.Generators.CodeRenderer.OutputPaneTraceListener"/> that can be used to write to the IDE Output window.
            </summary>
            <remarks>
            This trace listener is added to the list of listeners used by <see cref="T:System.Diagnostics.Trace"/>.
            Therefore, you do not need to call it directly for compiled generators (that are part of the generator libraries).
            <see cref="T:System.Diagnostics.Trace"/> should be used instead.
            However, it is useful for ad hoc templates because the classic Trace mechanism does not work in this case).
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.PreRender">
            <summary>
            Method that gets called prior to calling <see cref="M:Kodeo.Reegenerator.Generators.CodeRenderer.Render"/>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.PostRender">
            <summary>
            Method that gets called after calling <see cref="M:Kodeo.Reegenerator.Generators.CodeRenderer.Render"/>.
            </summary>
            <remarks>
            The default behavior removes the <see cref="P:Kodeo.Reegenerator.Generators.CodeRenderer.OutputPaneTraceListener"/> trace listener installed at <see cref="M:Kodeo.Reegenerator.Generators.CodeRenderer.PreRender"/> time.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.Render">
            <summary>
            Abstract render function that must be overriden by child render classes.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CodeRenderer.SiteServiceProvider">
            <summary>
            Gets the IDE service provider.
            </summary>
            <remarks>
            You can use this property to obtain services from the IDE.
            </remarks>
            <value>A <b>Microsoft.VisualStudio.Shell.ServiceProvider</b> instance.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.GetService(System.Guid)">
            <summary>
            Gets a service of a specified guid.
            </summary>
            <param name="serviceGuid">The service identifier.</param>
            <returns>A service object.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.GetService(System.Type)">
            <summary>
            Gets a service of a specified type.
            </summary>
            <param name="serviceType">The type of the service.</param>
            <returns>A service object.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CodeRenderer.ProjectItem">
            <summary>
            Gets the <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> instance that triggered the render process.
            </summary>
            <remarks>
            Generally the renderer is activated by a custom tool (<see cref="T:Kodeo.Reegenerator.Generators.CustomTool"/>). 
            The custom tool is attached to a project item. 
            This is the project item returned by this property (e.g. an XML file attached to a code renderer).
            <para>
            This property is the entry point to the IDE internal structures. You can use it to get hold of the
            containing project, IDE settings, current solution, current IDE instance or code metadata.
            </para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.CamelCaseName(System.String)">
            <summary>
            Transforms a string into camel case format (e.g. <c>CustomerName</c> becomes <c>customerName</c>). 
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <param name="name">The string to be tranformed.</param>
            <returns>The camel case form of the <paramref name="name"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.DecorateMultiLine(System.String,System.Object)">
            <summary>
            Decorates the string representation of an object by transforming each line starting 
            with the second line according to a pattern.
            </summary>
            <remarks>
            <example>
            This is an example of how this method works:
            <code>
            string message = @"First line
            Second line";
            this.Output.WriteLine(this.DecorateMultiLine("-> {0}", message); 
            </code>
            will create this rendered code:
            <code>
            First line
            -> Second line
            </code>
            </example>
            </remarks>
            <param name="lineFormat">The format to be applied to each line (e.g. <c>line: {0}</c>, where <c>0</c> will be replaced with the line content).</param>
            <param name="o">The object whose string representation is to be transformed.</param>
            <returns>A multiline string containing the formatted lines from the object string representation.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.DecorateMultiLine(System.String,System.Object,System.Boolean)">
            <summary>
            Decorates the string representation of an object by transforming each line according to a pattern.
            </summary>
            <remarks>
            <example>
            This is an example of how this method works when <paramref name="decorateFirstLine"/> is <c>true</c>:
            <code>
            string message = @"First line
            Second line";
            this.Output.WriteLine(this.DecorateMultiLine("-> {0}", message, true); 
            </code>
            will create this rendered code:
            <code>
            -> First line
            -> Second line
            </code>
            </example>
            <example>
            This is an example of how this method works when <paramref name="decorateFirstLine"/> is <c>false</c>:
            <code>
            string message = @"First line
            Second line";
            this.Output.WriteLine(this.DecorateMultiLine("-> {0}", message, true); 
            </code>
            will create this rendered code:
            <code>
            First line
            -> Second line
            </code>
            </example>
            </remarks>
            <param name="lineFormat">The format to be applied to each line (e.g. <c>line: {0}</c>, where <c>0</c> will be replaced with the line content).</param>
            <param name="o">The object whose string representation is to be transformed.</param>
            <param name="decorateFirstLine">Decorate the first line only if this is true.</param>
            <returns>A multiline string containing the formatted lines from the object string representation.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.DecorateMultiLine(System.String,System.String)">
            <summary>
            Decorates a multiline string by transforming each line starting 
            with the second line according to a pattern.
            </summary>
            <remarks>
            <example>
            This is an example of how this method works:
            <code>
            string message = @"First line
            Second line";
            this.Output.WriteLine(this.DecorateMultiLine("-> {0}", message); 
            </code>
            will create this rendered code:
            <code>
            First line
            -> Second line
            </code>
            </example>
            </remarks>
            <param name="lineFormat">The format to be applied to each line (e.g. <c>line: {0}</c>, where <c>0</c> will be replaced with the line content).</param>
            <param name="multiLine">The is the multiline string that needs to be transformed.</param>
            <returns>A multiline string containing the formatted lines from the original input.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.DecorateMultiLine(System.String,System.String,System.Boolean)">
            <summary>
            Decorates a multiline string by transforming each line according to a pattern.
            </summary>
            <remarks>
            <example>
            This is an example of how this method works when <paramref name="decorateFirstLine"/> is <c>true</c>:
            <code>
            string message = @"First line
            Second line";
            this.Output.WriteLine(this.DecorateMultiLine("-> {0}", message, true); 
            </code>
            will create this rendered code:
            <code>
            -> First line
            -> Second line
            </code>
            </example>
            <example>
            This is an example of how this method works when <paramref name="decorateFirstLine"/> is <c>false</c>:
            <code>
            string message = @"First line
            Second line";
            this.Output.WriteLine(this.DecorateMultiLine("-> {0}", message, true); 
            </code>
            will create this rendered code:
            <code>
            First line
            -> Second line
            </code>
            </example>
            </remarks>
            <param name="lineFormat">The format to be applied to each line (e.g. <c>line: {0}</c>, where <c>0</c> will be replaced with the line content).</param>
            <param name="multiLine">The is the multiline string that needs to be transformed.</param>
            <param name="decorateFirstLine">Determines whether the first line will be decorated according to the format.</param>
            <returns>A multiline string containing the formatted lines from the original input.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.CodeRenderer.Format`1">
            <summary>
            Delegate to be applied to a type as part of a Join method call.
            </summary>
            <example>
            <code>
            delegate(Column c) {return c.Name;}
            </code>
            </example>
            <typeparam name="T">The type of object to be formatted.</typeparam>
            <param name="t">The object to be formatted.</param>
            <returns>A string representing the formated object.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.Join``1(System.Collections.IEnumerable,System.String,Kodeo.Reegenerator.Generators.CodeRenderer.Format{``0})">
            <summary>
            Formats a list of objects by applying a <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer.Format`1"/> function to each one of them.
            </summary>
            <example>
            This is an example on how this method operates:
            <code>
            List&lt;string&gt; list = new List&lt;string&gt;();
            list.Add("Column1");
            list.Add("Column2");
            string result = TestTemplate.Join(list, ",\r\n",
                   delegate(string s) { return string.Format("item {0}", s); });
            </code>
            This code will set <c>result</c> to the same value as in this declaration:
            <code>
            string result = @"item Column1,
            item Column2";
            </code>
            </example>
            <typeparam name="T">The type of objects that belong to the list.</typeparam>
            <param name="enumerable">The list of objects to be formated.</param>
            <param name="between">The string to be inserted between the items.</param>
            <param name="itemFormat">The method that will be called to format each item.</param>
            <returns>A string with formated objects list.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,Kodeo.Reegenerator.Generators.CodeRenderer.Format{``0})">
            <summary>
            Formats a list of objects by applying a <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer.Format`1"/> function to each one of them.
            </summary>
            <example>
            This is an example on how this method operates:
            <code>
            List&lt;string&gt; list = new List&lt;string&gt;();
            list.Add("Column1");
            list.Add("Column2");
            string result = TestTemplate.Join(list, ",\r\n",
                   delegate(string s) { return string.Format("item {0}", s); });
            </code>
            This code will set <c>result</c> to the same value as in this declaration:
            <code>
            string result = @"item Column1,
            item Column2";
            </code>
            </example>
            <typeparam name="T">The type of objects that belong to the list.</typeparam>
            <param name="enumerable">The list of objects to be formated.</param>
            <param name="between">The string to be inserted between the items.</param>
            <param name="itemFormat">The method that will be called to format each item.</param>
            <returns>A string with formated objects list.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.Join``1(System.Collections.IEnumerable,System.String,System.String,System.String,Kodeo.Reegenerator.Generators.CodeRenderer.Format{``0})">
            <summary>
            Formats a list of objects by applying a <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer.Format`1"/> function to each one of them 
            and adds information at the begining and at the end of the result.
            </summary>
            <example>
            This is an example on how this method operates:
            <code>
            List&lt;string&gt; list = new List&lt;string&gt;();
            list.Add("Column1");
            list.Add("Column2");
            string result = TestTemplate.Join(list, "start ", " end", ",\r\n",
                   delegate(string s) { return string.Format("item {0}", s); });
            </code>
            This code will set <c>result</c> to the same value as in this declaration:
            <code>
            string result = @"start item Column1,
            item Column2 end";
            </code>
            </example>
            <typeparam name="T">The type of objects that belong to the list.</typeparam>
            <param name="enumerable">The list of objects to be formated.</param>
            <param name="start">String to be added to the begining of the result if there are elements in the <paramref name="enumerable"/>.</param>
            <param name="end">String to be added to the end of the result if there are elements in the <paramref name="enumerable"/>.</param>
            <param name="between">The string to be inserted between the items.</param>
            <param name="itemFormat">The method that will be called to format each item.</param>
            <returns>A string with formated objects list.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,Kodeo.Reegenerator.Generators.CodeRenderer.Format{``0})">
            <summary>
            Formats a list of objects by applying a <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer.Format`1"/> function to each one of them 
            and adds information at the begining and at the end of the result.
            </summary>
            <example>
            This is an example on how this method operates:
            <code>
            List&lt;string&gt; list = new List&lt;string&gt;();
            list.Add("Column1");
            list.Add("Column2");
            string result = TestTemplate.Join(list, "start ", " end", ",\r\n",
                   delegate(string s) { return string.Format("item {0}", s); });
            </code>
            This code will set <c>result</c> to the same value as in this declaration:
            <code>
            string result = @"start item Column1,
            item Column2 end";
            </code>
            </example>
            <typeparam name="T">The type of objects that belong to the list.</typeparam>
            <param name="enumerable">The list of objects to be formated.</param>
            <param name="start">String to be added to the begining of the result if there are elements in the <paramref name="enumerable"/>.</param>
            <param name="end">String to be added to the end of the result if there are elements in the <paramref name="enumerable"/>.</param>
            <param name="between">The string to be inserted between the items.</param>
            <param name="itemFormat">The method that will be called to format each item.</param>
            <returns>A string with formated objects list.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.RunOtherCustomTool(System.String)">
            <summary>
            Gets the results of the execution of a specified custom tool on the current project item. 
            </summary>
            <remarks>
            This function returns what would have been the contents of the Designer file resulted
            if <paramref name="customToolName"/> was associated with the project item.
            <para>
            If you require the results as a string, pass the results of this method 
            to the RenderResults.DefaultEncoding.GetString function.
            </para>
            </remarks>
            <param name="customToolName">The name of the custom tool to execute (e.g. MSDataSetGenerator).</param>
            <returns>The resulting code as an array of bytes.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.RunOtherCustomTool(System.String,Kodeo.Reegenerator.Wrappers.ProjectItem)">
            <summary>
            Gets the results of the execution of a specified custom tool on a specified project item. 
            </summary>
            <remarks>
            This function returns what would have been the contents of the Designer file resulted
            if <paramref name="customToolName"/> was associated with the project item.
            <para>
            If you require the results as a string, pass the results of this method 
            to the RenderResults.DefaultEncoding.GetString function.
            </para>
            </remarks>
            <param name="customToolName">The name of the custom tool to execute (e.g. MSDataSetGenerator).</param>
            <param name="projectItem">The <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> to execute the custom tool on.</param>
            <returns>The resulting code as an array of bytes.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.RunOtherCustomTool(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the results of the execution of a specified custom tool on an adhoc content.
            </summary>
            <remarks>
            This function returns what would have been the contents of the Designer file resulted
            if <paramref name="customToolName"/> was associated with a project item containing <paramref name="content"/>.
            <para>
            If you require the results as a string, pass the results of this method 
            to the RenderResults.DefaultEncoding.GetString function.
            </para>
            </remarks>
            <param name="customToolName">The name of the custom tool to execute (e.g. MSDataSetGenerator).</param>
            <param name="fullPath">A fake path of the supposedly project item. Can be the path of the current project item.</param>
            <param name="content">The content of the supposedly project item.</param>
            <param name="nameSpace">The namespace to be used for the generation process.</param>
            <returns>The resulting code as an array of bytes.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.GetLanguageTypeName(System.String)">
            <summary>
            Gets the language specific for a specified type (System.String -> string) according to the type of the project.
            </summary>
            <param name="typeName">The type to be transformed into language specific type.</param>
            <returns>The language specific type.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CodeRenderer.GetGlobalService``1">
            <summary>
            Gets a global service.
            </summary>
            <typeparam name="T">The type of the service to be returned.</typeparam>
            <returns>A service of the specified type.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.CustomToolExecutionContext">
            <summary>
            This class represents the context of the custom tool execution.
            </summary>
            <remarks>
            This class' purpose is to allow execution of certain code in the context (application domain) of the custom tool and Visual Studio. 
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.CustomToolExecutionContext.#ctor(System.Object,Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress,Kodeo.Reegenerator.Wrappers.ProjectItem)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.CustomToolExecutionContext"/> class.
            </summary>
            <param name="site">The site of the custom tool.</param>
            <param name="vsGeneratorProgress">The custom tool progress indicator.</param>
            <param name="projectItem">The project item that triggered the code generation.</param>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.CustomToolExecutionContext.Site">
            <summary>
            Gets the site of the custom tool as specified at construct time.
            </summary>
            <value>The site of the custom tool.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.CustomToolExecutionContext.VsGeneratorProgress">
            <summary>
            Gets the custom tool progress indicator as specified at construct time.
            </summary>
            <value>The custom tool progress indicator.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.CustomToolExecutionContext.ProjectItem">
            <summary>
            The project item for the code generation.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.ICodeRenderer">
            <summary>
            The interface to be implemented by code renderers. Abstracts the functionality that renders code.
            </summary>
            <remarks>
            A <see cref="T:Kodeo.Reegenerator.Generators.CustomTool"/> object will instantiate an instance of a class that 
            implements <see cref="T:Kodeo.Reegenerator.Generators.ICodeRenderer"/>. The instance will have access to the project item that triggered the custom tool execution.
            <para>
            This is the order the methods of this interface will be called by <see cref="T:Kodeo.Reegenerator.Generators.CustomTool"/>:
            <list type="number">
                <item><description><see cref="M:Kodeo.Reegenerator.Generators.ICodeRenderer.SetSite(System.Object,Kodeo.Reegenerator.Generators.CustomToolExecutionContext)"/></description></item>
                <item><description><see cref="M:Kodeo.Reegenerator.Generators.ICodeRenderer.PreRender"/></description></item>
                <item><description><see cref="M:Kodeo.Reegenerator.Generators.ICodeRenderer.Render"/></description></item>
                <item><description><see cref="M:Kodeo.Reegenerator.Generators.ICodeRenderer.PostRender"/></description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.ICodeRenderer.SetSite(System.Object,Kodeo.Reegenerator.Generators.CustomToolExecutionContext)">
            <summary>
            Sets the site for the code renderer, so that it can retrieve DTE objects.
            </summary>
            <remarks>
            The site instance that gets passed as a parameter to this method can be used to obtain service from the Microsoft Visual Studio IDE.
            <example>
            This is how you can obtain a service provider from the site parameter:
            <code>
            Microsoft.VisualStudio.Shell.ServiceProvider serviceProvider = new Microsoft.VisualStudio.Shell.ServiceProvider(site as Microsoft.VisualStudio.OLE.Interop.IServiceProvider)
            </code>
            </example>
            </remarks>
            <param name="site">The site for the code renderer.</param>
            <param name="context">The context of the custom tool execution.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.ICodeRenderer.PreRender">
            <summary>
            Method that gets called prior to calling <see cref="M:Kodeo.Reegenerator.Generators.ICodeRenderer.Render"/>.
            </summary>
            <remarks>
            This is an opportunity for a renderer to instantiate global variables and perform various operation as a preparation
            for the render process.
            <para>
            At this moment, <see cref="M:Kodeo.Reegenerator.Generators.ICodeRenderer.SetSite(System.Object,Kodeo.Reegenerator.Generators.CustomToolExecutionContext)"/> has already been executed. You therefore have access to the Microsoft Visual Studio structures.
            </para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.ICodeRenderer.Render">
            <summary>
            The method that creates the results of the render process.
            </summary>
            <returns>A <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/> instance that contains the rendered code.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.ICodeRenderer.PostRender">
            <summary>
            Method that gets called after calling <see cref="M:Kodeo.Reegenerator.Generators.ICodeRenderer.Render"/>.
            </summary>
            <remarks>
            This method offers the opportunity to release resources after the render process has finished.
            </remarks>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.OutputPaneTraceListener">
            <summary>
            Trace listener that writes to a pane belonging to the IDE Output window.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.OutputPaneTraceListener.#ctor(EnvDTE.DTE,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.OutputPaneTraceListener"/> class
            using a named pane within a specified <b>EnvDTE.DTE</b>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="dte"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty.</exception>
            <param name="dte">The <b>EnvDTE.DTE</b> instance whose Output window this instance will use.</param>
            <param name="name">The name of the Output pane.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.OutputPaneTraceListener.EnsureInit">
            <summary>
            Initializes the Output pane using the a specified name.
            The the pane is added if it cannot be found.
            </summary>
            <returns>The <b>EnvDTE.OutputWindowPane</b> created Output pane.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.OutputPaneTraceListener.Pane">
            <summary>
            Gets the <b>EnvDTE.OutputWindowPane</b> where messages are written.
            </summary>
            <value>The <b>EnvDTE.OutputWindowPane</b> where messages are written.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.OutputPaneTraceListener.Write(System.String)">
            <summary>
            Writes a message to the named Output pane.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.OutputPaneTraceListener.WriteLine(System.String)">
            <summary>
            Writes a message to the named Output pane followed by a line terminator.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.RgenQueueSchemaFactory">
            <summary>
            Factory class for classes defined in the RgenQueueSchema schema.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenQueueSchemaFactory.Schemas">
            <summary>
            The contents of the RgenQueueSchema schema and the imported schema.
            It is used to check the validity of XML files against the XML schema.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RgenQueueSchemaFactory.XmlSchemaSet">
            <summary>
            Gets a compiled schema set containing the RgenQueueSchema schema and all included schemas.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenQueueSchemaFactory.Create``1(System.Xml.XmlReader)">
            <summary>
            Creates an object by deserializing the content of an xml document
            into an instance of the <typeparamref name="T"/>.
            <typeparamref name="T"/> must implement IInitializable to be initialized post creation.
            </summary>
            <typeparam name="T">The type of the instance to be created from the <paramref name="xmlReader"/>.</typeparam>
            <param name="xmlReader">The XML file project item.</param>
            <returns>An instance of type <typeparamref name="T"/>.</returns>"
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenQueueSchemaFactory.Create``1(System.IO.Stream)">
            <summary>
            Creates an object by deserializing the content of an xml document
            into an instance of the <typeparamref name="T"/>.
            <typeparamref name="T"/> must implement IInitializable to be initialized post creation.
            </summary>
            <typeparam name="T">The type of the instance to be created from the <paramref name="stream"/>.</typeparam>
            <param name="stream">The XML file project item.</param>
            <returns>An instance of type <typeparamref name="T"/>.</returns>"
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenQueueSchemaFactory.Create``1(System.String)">
            <summary>
            Creates an object by deserializing the content of an xml document
            into an instance of the <typeparamref name="T"/>.
            <typeparamref name="T"/> must implement IInitializable to be initialized post creation.
            </summary>
            <typeparam name="T">The type of the instance to be created from the <paramref name="path"/>.</typeparam>
            <param name="path">The XML file project item.</param>
            <returns>An instance of type <typeparamref name="T"/>.</returns>"
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RgenQueueSchemaFactory.Create``1(System.IO.TextReader)">
            <summary>
            Creates an object by deserializing the content of an xml document
            into an instance of the <typeparamref name="T"/>.
            <typeparamref name="T"/> must implement IInitializable to be initialized post creation.
            </summary>
            <typeparam name="T">The type of the instance to be created from the <paramref name="textReader"/>.</typeparam>
            <param name="textReader">The XML file project item.</param>
            <returns>An instance of type <typeparamref name="T"/>.</returns>"
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.TemplateDisplayAttribute">
            <summary>
            Attribute that controls how the renderer is displayed in the dialog that associates project items with the renderer. 
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.TemplateDisplayAttribute.DisplayName">
            <summary>
            The display name of the renderer.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.TemplateDisplayAttribute.Description">
            <summary>
            The description of the renderer.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.TemplateDisplayAttribute.HideInDialog">
            <summary>
            If this is true, the user cannot select the generator in the user interface.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.TemplatePropertyAttribute">
            <summary>
            The attribute to be applied to properties of classes inheriting from <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer"/>.
            </summary>
            <remarks>
            Applying this attribute to a property makes it editable in the generation variables window.
            At runtime, the values will be applied to the 
            generator and will be usable by the code generation.
            </remarks>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.TemplatePropertyAttribute.DefaultValue">
            <summary>
            The default value of the property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.TemplatePropertyAttribute.Category">
            <summary>
            Defines the property category as displayed in the property grid when attaching renderers to project items.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.TemplatePropertyAttribute.Description">
            <summary>
            Defines the description displayed in the property grid.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.TemplatePropertyAttribute.MustBeSpecified">
            <summary>
            Detetrmines whether the propery must be set so that the code generator can function.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.DefaultExtensionAttribute">
            <summary>
            Attribute that controls the default extension for files created by a renderer.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.DefaultExtensionAttribute.Extension">
            <summary>
            The default extension.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.ExecutionAttribute">
            <summary>
            Attribute that controls the default execution settings for a renderer.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.ExecutionAttribute.RequiresGlobalServices">
            <summary>
            Gets or sets a value indicating whether the execution of the renderer requires global services.
            </summary>
            <value>
            <c>true</c> if requires global services; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.CodeSnippetAttribute">
            <summary>
            Attribute that controls whether a generator can act as a code snippet.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CodeSnippetAttribute.ExtensionRegularExpression">
            <summary>
            The project item extension the snippet can act upon. If empty, it applies to all project items in solution.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CodeSnippetAttribute.CodeAnchorExpression">
            <summary>
            Defines the code anchor that the snippet is associated with.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.CodeSnippetAttribute.ReplacementModes">
            <summary>
            Defines the ways a code snippet inserts/replaces the active document's text with generated code.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.CodeSnippetAttribute.ReplacementModes.ReplaceAnchor">
            <summary>
            The achor is replaced by the generated code.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.CodeSnippetAttribute.ReplacementModes.BeforeAnchor">
            <summary>
            The achor is kept and the generated code is inserted before.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.CodeSnippetAttribute.ReplacementModes.AfterAnchor">
            <summary>
            The achor is kept and the generated code is inserted after.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.CodeSnippetAttribute.ReplacementModes.ReplaceAllContent">
            <summary>
            Replaces all file content with the generated code.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.CodeSnippetAttribute.ReplacementMode">
            <summary>
            Defines how the code snippet inserts/replaces the active document's text with generated code.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.RenderResults">
            <summary>
            Represents the results of a render process.
            </summary>
            <remarks>
            A <see cref="T:Kodeo.Reegenerator.Generators.CustomTool"/> class creates a <see cref="T:Kodeo.Reegenerator.Generators.ICodeRenderer"/> instance.
            It will call the <see cref="M:Kodeo.Reegenerator.Generators.ICodeRenderer.Render"/> method
            and will use the returned <b>RenderResults</b> to create or update the
            solution files that are dependent of the solution file associated
            with the custom tool that launched the generation process.
            <para>
            This class contains the render result in <see cref="P:Kodeo.Reegenerator.Generators.RenderResults.GeneratedCode"/>. This will be saved as a dependent file of the project item that triggered
            the custom tool execution. The extenstion of that file is determined by <see cref="P:Kodeo.Reegenerator.Generators.CustomTool.FileExtension"/>.
            </para>
            <para>
            Any additional files must be added to <see cref="P:Kodeo.Reegenerator.Generators.RenderResults.AdditionalResults"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Kodeo.Reegenerator.Generators.RenderResults.DefaultEncoding">
            <summary>
            The default encoding used for strings.
            </summary>
            <value>System.Text.Encoding.UTF8</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RenderResults.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/> class.
            </summary>
            <remarks>
            <see cref="P:Kodeo.Reegenerator.Generators.RenderResults.GeneratedCode"/> will be an empty array and <see cref="P:Kodeo.Reegenerator.Generators.RenderResults.Encoding"/> will default to <see cref="F:Kodeo.Reegenerator.Generators.RenderResults.DefaultEncoding"/>.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RenderResults.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/> class
            from a specified generated code that will be encoded using <see cref="F:Kodeo.Reegenerator.Generators.RenderResults.DefaultEncoding"/>.
            </summary>
            <param name="generatedCode">The generated code.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RenderResults.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/> class
            from a specified generated code that will be encoded with <paramref name="encoding"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is <c>null</c>.</exception>
            <param name="generatedCode">The generated code.</param>
            <param name="encoding">The encoding to be used when transforming <paramref name="generatedCode"/> into the binary array that will be saved as generated file. Defaults to <see cref="F:Kodeo.Reegenerator.Generators.RenderResults.DefaultEncoding"/>.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RenderResults.#ctor(System.Byte[],System.Text.Encoding)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/> class
            from a specified generated code.
            </summary>
            <remarks>
            <paramref name="encoding"/> can be <c>null</c> if no encoding is required (e.g. generating binary files).
            </remarks>
            <param name="generatedCode">The generated code.</param>
            <param name="encoding">The encoding used by <paramref name="generatedCode"/>.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RenderResults.GeneratedCode">
            <summary>
            Gets or sets the rendered code.
            </summary>
            <remarks>
            This property becomes the content of the first rendered file of project item associated with a custom tool.
            The name of the file will be the name of the source file associated with the custom tool appended with <see cref="P:Kodeo.Reegenerator.Generators.CustomTool.FileExtension"/>.
            <para>
            The property uses <see cref="P:Kodeo.Reegenerator.Generators.RenderResults.Encoding"/> encoding. Make sure you use the same when setting the value.
            </para>
            </remarks>
            <value>The render result of as saved into the first file dependent on the project item associated with a custom tool.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RenderResults.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <value>
            The encoding.
            </value>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.RenderResults.Encode(System.String,System.Text.Encoding)">
            <summary>
            Encodes a string into an array of bytes.
            </summary>
            <remarks>
            The result does not contain the preamble of <paramref name="encoding"/>.
            </remarks>
            <param name="code">The code to be encoded.</param>
            <param name="encoding">The encoding to be used when transforming <paramref name="code"/> into the binary array that will be saved as generated file. Defaults to <see cref="F:Kodeo.Reegenerator.Generators.RenderResults.DefaultEncoding"/>.</param>
            <returns>A byte array containing the encoded code.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RenderResults.AdditionalResults">
            <summary>
            Gets the additional rendered files.
            </summary>
            <value>An <see cref="P:Kodeo.Reegenerator.Generators.RenderResults.AdditionalResults"/> instance containing the additional rendered files.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RenderResults.IsEnabled">
            <summary>
            Determines whether all the results are disabled, meaning that the rendering process did not actually take place and
            that the all generated files are not supposed to change (<see cref="P:Kodeo.Reegenerator.Generators.RenderResults.GeneratedCode" /> and all <see cref="P:Kodeo.Reegenerator.Generators.RenderResults.AdditionalResults"/>).
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.RenderResults.IsResultEnabled">
            <summary>
            Determines whether <see cref="P:Kodeo.Reegenerator.Generators.RenderResults.GeneratedCode" /> is disabled, meaning that the rendering process did not actually take place and
            that the generated file is not supposed to change.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.StatusBarTraceListener">
            <summary>
            Trace listener that writes to the Visual Studio status bar. 
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.StatusBarTraceListener.#ctor(EnvDTE.DTE)">
            <summary>
            Initialized a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.StatusBarTraceListener"/> class 
            in a given IDE.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="dte"/> is null.</exception>
            <param name="dte">The <b>EnvDTE.DTE</b> instance whose status bar this instance will use.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.StatusBarTraceListener.Write(System.String)">
            <summary>
            Writes a message to the status bar.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.StatusBarTraceListener.WriteLine(System.String)">
            <summary>
            Writes a message to the status bar. The new line character is ignored.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Template.CodeRenderer">
            <summary>
            Code renderer that generates code for Reegenerator template files (<c>.rgt</c>).
            </summary>
            <remarks>
            The structure of an rgt file is quite similar to an aspx/ascx file. 
            The rgt file custom tool property is set to <see cref="F:Kodeo.Reegenerator.Constants.RgenTemplate"/>.
            Visual Studio will create a <see cref="T:Kodeo.Reegenerator.Generators.Template.CodeRenderer"/> instance to render the 
            code associated with the rgt file.
            The generated code will implement a partial class that inherits from <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer"/>.
            The class will be invoked by another custom tool (e.g. <see cref="T:Kodeo.Reegenerator.Generators.Renderer.CustomTool"/>).
            <list type="table">
            <listheader>
                <item>Directive</item>
                <description>Details</description>
            </listheader>
            <item>
                <term>Template</term>
                <description>Directive that identifies the language of the rgt file and the name of the class to be generated.
                    This directive must appear exactly once at the beginning of the rgt file.
                    <para>Valid attributes are:</para>
                    <list type="table">
                        <listheader>
                            <item>Attribute</item>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>Language</term>
                            <description>Can be <c>C#</c> or <c>VB</c>.</description>
                        </item>
                        <item>
                            <term>ClassName</term>
                            <description>Determines the name of the partial class to be generated in the Designer file. 
                                <para>Note that rgt files normally have a code file attached that implements the same partial class. 
                                    Therefore, if you change this attribute you should also change the code file.
                                </para>
                            </description>
                        </item>
                        <item>
                            <term>ParentClass</term>
                            <description>Determines the name of the parent class of the generated class. 
                                <para>If empty or not specified it defaults to <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer"/>.</para>
                            </description>
                        </item>
                        <item>
                            <term>DefaultExtension</term>
                            <description>Determines the default extension for files generated with this code renderer.</description>
                        </item>
                        <item>
                            <term>DisplayName</term>
                            <description>Determines the display name of this code renderer.</description>
                        </item>
                        <item>
                            <term>Description</term>
                            <description>Determines the description for this code renderer.</description>
                        </item>
                    </list>
                </description>
            </item>
            <item>
                <term>Reference</term>
                <description>Instructs the renderer to reference an assembly. 
                    This directive is used only by template renderers that are not compiled.
                    <para>Valid attributes are:</para>
                    <list type="table">
                        <listheader>
                            <item>Attribute</item>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>Assembly</term>
                            <description>
                                The path or the full name of the assembly to be referenced.
                                <para>If a full path is specified, you can use path directives as per <see cref="M:Kodeo.Reegenerator.Wrappers.ProjectItem.ExpandPath(System.String)"/>.</para>
                            </description>
                        </item>
                    </list>
                </description>
            </item>
            <item>
                <term>Include</term>
                <description>Instructs the renderer to include a file.
                    This directive is used only by template renderers that are not compiled.
                    <para>Valid attributes are:</para>
                    <list type="table">
                        <listheader>
                            <item>Attribute</item>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>Path</term>
                            <description>
                                The path or the file to be included.
                                <para>You can use path directives as per <see cref="M:Kodeo.Reegenerator.Wrappers.ProjectItem.ExpandPath(System.String)"/>.</para>
                            </description>
                        </item>
                    </list>
                </description>
            </item>
            <item>
                <term>Import</term>
                <description>Instructs the renderer to import types defined in an assembly. 
                    This is equivalent to the <c>using</c> or <c>Imports</c> statement.
                    <para>Valid attributes are:</para>
                    <list type="table">
                        <listheader>
                            <item>Attribute</item>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>Namespace</term>
                            <description>
                                The namespace to be imported.
                                <para>Once you have a namespace imported you do not have to refer types belonging 
                                    to that assembly with their full name.</para>
                            </description>
                        </item>
                    </list>
                </description>
            </item>
            </list>
            <para>Following the optional Import directives is the script that will derive the Render method of
            the generated class. The script (displayed as gray italic) can have islands of code between <c>&lt;%</c> and <c>%&gt;</c>.
            The script can also have inline expressions between <c>&lt;%=</c> and <c>%&gt;</c>.
            </para>
            <para>
            Please note that the code and the expressions must be in the <see cref="P:Kodeo.Reegenerator.Generators.Template.CodeRenderer.Language"/> language, 
            otherwise the compilation of the resulting code will fail.
            </para>
            <para>
            Following the script, you can define methods. 
            Each method definition can contain parameter directives followed by a 
            script similar to the Render method script (see the example).
            The method definition must end with <c>&lt;%/ Method %&gt;</c>.
            </para>
            <para>
            These are the directives that concur to defining a method in the rgt file:
            </para>
            <list type="table">
            <listheader>
                <item>Directive</item>
                <description>Details</description>
            </listheader>
            <item>
                <term>Method</term>
                <description>Directive that instructs the renderer to create a method in the resulting code.
                    This method is callable from the rgt script or from the code behind.
                    <para>Valid attributes are:</para>
                    <list type="table">
                        <listheader>
                            <item>Attribute</item>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>Name</term>
                            <description>
                                The name of the method. Translates directly into the name of the method generated in the generated file.
                                You should therefore choose a name that is unique for the rgt file and the code behind.
                            </description>
                        </item>
                        <item>
                            <term>ReturnType</term>
                            <description>
                                Determines the return type of the method. It is optional and if omitted, the method will return nothing.
                                <para>
                                    It is recommended to use CLR types instead of language specific types.
                                    e.g. <c>string</c> should be <c>System.String</c>.
                                </para>
                            </description>
                        </item>
                    </list>
                </description>
            </item>
            <item>
                <term>Parameter</term>
                <description>Parameter directive that defines a parameter for a method in the rgt file.
                    It can de defined only after a method directive.
                    <para>Valid attributes are:</para>
                    <list type="table">
                        <listheader>
                            <item>Attribute</item>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>Name</term>
                            <description>
                                The name of the parameter. Translates directly into a parameter name of the generated method.
                                You should therefore choose a name that is unique for the method.
                            </description>
                        </item>
                        <item>
                            <term>Type</term>
                            <description>
                                Determines the type of the paratmer.
                                <para>
                                    It is recommended to use CLR types instead of language specific types.
                                    e.g. <c>string</c> should be <c>System.String</c>.
                                </para>
                            </description>
                        </item>
                    </list>
                </description>
            </item>
            </list>
            <example>
            This is an example of the content of an rgt file:
            <code>
            &lt;%@ Template Language="C#" ClassName="Template1" %&gt;
            &lt;%@ Import Namespace="System" %&gt;
            &lt;%@ Import Namespace="Kodeo.Reegenerator" %&gt;
            &lt;%@ Import Namespace="Kodeo.Reegenerator.Wrappers" %&gt;
             
            // -------------------------------------------------------
            // Automatically generated with Kodeo's Reegenerator
            // Generator: Template1
            // Generation date: &lt;%= System.DateTime.Now.ToString("yyyy-MM-dd hh:mm") %&gt;
            // Generated by: &lt;%= System.Security.Principal.WindowsIdentity.GetCurrent().Name %&gt;
            // -------------------------------------------------------
            
            &lt;% 
                Output.WriteLine("// Generated from adhoc code");
            %&gt;
            
            &lt;% RenderComment("Comment test"); %&gt;
            
            &lt;%= "Inline expression" %&gt;
            
            &lt;%@ Method Name="RenderComment" %&gt;
                &lt;%@ Parameter Name="comment" Type="System.String" %&gt;
            The comment is: &lt;%= comment %&gt;	
            &lt;%/ Method %&gt;
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Template.CodeRenderer.#ctor(Kodeo.Reegenerator.Generators.Template.Loader)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.Template.CodeRenderer"/> class from a rgt template loader.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="loader"/> is <c>null</c>.</exception>
            <param name="loader">The <see cref="P:Kodeo.Reegenerator.Generators.Template.CodeRenderer.Loader"/> instance to be used to load directives.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Template.CodeRenderer.#ctor(Kodeo.Reegenerator.Language.Script)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.Template.CodeRenderer"/> class from a rgt template.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="script"/> is <c>null</c>.</exception>
            <param name="script">The <see cref="T:Kodeo.Reegenerator.Language.Script"/> to be rendered.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Template.CodeRenderer.Loader">
            <summary>
            Gets the <see cref="T:Kodeo.Reegenerator.Generators.Template.Loader"/> instance that loaded the directives.
            </summary>
            <value>The <see cref="T:Kodeo.Reegenerator.Generators.Template.Loader"/> instance received as parameter at construction time.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Template.CodeRenderer.Language">
            <summary>
            Gets the language specified in the <c>Template</c> directive.
            </summary>
            <value>The language used by the rgt file and the the language 
            of the generated file as defined in the <c>Template</c> directive of the rgt file.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Template.CodeRenderer.GeneratedClassName">
            <summary>
            Gets the name of the class to be rendered by this instance.
            </summary>
            <value>The generated class name as defined in the <c>Template</c> directive of the rgt file.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Template.CodeRenderer.Render">
            <summary>
            Creates the results of the render process.
            </summary>
            <remarks>
            The renderer loads the source rgt files and renders a class that implements <see cref="T:Kodeo.Reegenerator.Generators.ICodeRenderer"/>.
            <para>
            You can inspect the results of the render process by opening the designer file dependent on the rgt file.
            </para>
            </remarks>
            <exception cref="T:System.ApplicationException">The rgt file contains errors.</exception>
            <returns>An instance of <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/> containing the render results. The instance does not contain any additional files.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Template.CodeRenderer.AssembleScript">
            <summary>
            Assembles the result of the template transformation into source code.
            </summary>
            <remarks>The rendered code implements a class that inherits from <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer"/>.</remarks>
            <returns>The rendered code in the <see cref="P:Kodeo.Reegenerator.Generators.Template.CodeRenderer.Language"/> language.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Template.CustomTool">
            <summary>
            Custom tool associated with rgt file.
            </summary>
            <remarks>
            An rgt file has a structure quite similar to an aspx/ascx file. 
            The rgt file custom tool property is set to <see cref="F:Kodeo.Reegenerator.Constants.RgenTemplate"/>.
            <para>
            It uses a <see cref="T:Kodeo.Reegenerator.Generators.Template.Loader"/> instance to load the contents of the rgt file it runs on.
            It then uses a <see cref="T:Kodeo.Reegenerator.Generators.Template.CodeRenderer"/> to generate the code from the rgt file.
            </para>
            <para>
            The generated code will implement a partial class that inherits from <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer"/>.
            The class will be invoked by another custom tool (e.g. <see cref="T:Kodeo.Reegenerator.Generators.Renderer.CustomTool"/>).
            </para>
            <para>See <see cref="T:Kodeo.Reegenerator.Generators.Template.CodeRenderer"/> for a description of the rgt file structure.</para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Template.CustomTool.CreateRenderer">
            <summary>
            Creates the <see cref="T:Kodeo.Reegenerator.Generators.Template.CodeRenderer"/> renderer that is specific for rgt files.
            </summary>
            <returns>An <see cref="T:Kodeo.Reegenerator.Generators.ICodeRenderer"/> instance that will always be of <see cref="T:Kodeo.Reegenerator.Generators.Template.CodeRenderer"/> type.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Template.Loader">
            <summary>
            Loads a rgt file file from a given path.
            </summary>
            <remarks>
            See <see cref="T:Kodeo.Reegenerator.Generators.Template.CodeRenderer"/> for a description of the rgt file structure.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Template.Loader.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Generators.Template.Loader"/> class from a given path.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
            <param name="path">The template file path.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Template.Loader.Path">
            <summary>
            Gets the full path of the template file.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Template.Loader.Script">
            <summary>
            Gets the <see cref="T:Kodeo.Reegenerator.Language.Script"/> as loaded from the <see cref="P:Kodeo.Reegenerator.Generators.Template.Loader.Path"/> location.
            </summary>
            <value>The <see cref="T:Kodeo.Reegenerator.Language.Script"/> instance that reflects the contents of the rgt file located at <see cref="P:Kodeo.Reegenerator.Generators.Template.Loader.Path"/>.</value>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Web.MinifyExtensions">
            <summary>
            Provides methods to minimize css.
            </summary>
            <remarks>
            <para>Software License Agreement (BSD License)
            Copyright (c) 2009, Yahoo! Inc.
            All rights reserved.</para>
            <para>Redistribution and use of this software in source and binary forms, with or without modification, are
            permitted provided that the following conditions are met:
                * Redistributions of source code must retain the above copyright notice, this list of conditions
                  and the following disclaimer.
                * Redistributions in binary form must reproduce the above copyright notice, this list of conditions
                  and the following disclaimer in the documentation and/or other materials provided with the distribution.
                * Neither the name of Yahoo! Inc. nor the names of its contributors may be used to endorse or promote
                  products derived from this software without specific prior written permission of Yahoo! Inc.</para>
            <para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
            WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
            PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
            DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
            PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
            HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
            NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
            POSSIBILITY OF SUCH DAMAGE.</para>
            <para>The following code was adapted by Daniel Crenna from Isaac Schlueter's original code. No modifications
            (other than the attaching the license and adding this notice) have been made.</para>
            <para>http://dimebrain.com/2008/03/a-better-css-mi.html</para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Web.MinifyExtensions.CssMinify(System.String)">
            <summary>
            Minifies CSS.
            </summary>
            <param name="css">The CSS content to minify.</param>
            <returns>Minified CSS content.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Web.MinifyExtensions.CssMinify(System.String,System.Int32)">
            <summary>
            Minifies CSS with a column width maximum.
            </summary>
            <param name="css">The CSS content to minify.</param>
            <param name="columnWidth">The maximum column width.</param>
            <returns>Minified CSS content.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Web.MinifyCss">
            <summary>
            Code renderer that minifies css files.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Web.MinifyCss.Render">
            <summary>
            Invokes <see cref="M:Kodeo.Reegenerator.Generators.Web.MinifyExtensions.CssMinify(System.String)"/> to minify js files.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Web.MinifyJavaScript">
            <summary>
            Code renderer that minifies js files.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Web.MinifyJavaScript.Render">
            <summary>
            Invokes <see cref="T:Kodeo.Reegenerator.Generators.Web.MinifyJavaScript.JavaScriptMinifier"/> to minify js files.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Web.MinifyJavaScript.JavaScriptMinifier">
            <summary>
            Original java script minifier.
            </summary>
            <remarks>
            <para>Originally written in 'C', this code has been converted to the C# language.
            The author's copyright message is reproduced below.</para>
            <para>All modifications from the original to C# are placed in the public domain.</para>
            <para>jsmin.c</para>
            <para>2007-05-22</para>
            <para>Copyright (c) 2002 Douglas Crockford  (www.crockford.com)</para>
            <para>Permission is hereby granted, free of charge, to any person obtaining a copy of
            this software and associated documentation files (the "Software"), to deal in
            the Software without restriction, including without limitation the rights to
            use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
            of the Software, and to permit persons to whom the Software is furnished to do
            so, subject to the following conditions:</para>
            <para>The above copyright notice and this permission notice shall be included in all
            copies or substantial portions of the Software.</para>
            <para>The Software shall be used for Good, not Evil.</para>
            <para>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
            SOFTWARE.</para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Web.MinifyJavaScript.JavaScriptMinifier.Minify(System.String)">
            <summary>
            Minifies the javascript source of a file.
            </summary>
            <param name="path">The javascript file source path.</param>
            <returns>The minified javascript source.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Web.MinifyJavaScript.JavaScriptMinifier.MinifySource(System.String)">
            <summary>
            Minifies the javascript source.
            </summary>
            <param name="source">The javascript source.</param>
            <returns>The minified javascript source.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer">
            <summary>
            Code renderer that uses schema file as source of information for code generation.
            Improves upon the xsd.exe libraries.
            </summary>
            <remarks>
            The results will be similar to the ones obtained by using the xsd.exe tool,
            but you have more options regarding what and how gets generated.
            </remarks>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer.GenerateArraysAsLists">
            <summary>
            If true, the array properties which are generated by XSD.exe as arrays will be generated as lists instead.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer.RemoveClassesForIncludedSchemas">
            <summary>
            If true, the classes defined from included schemas which are emitted by XSD.exe as arrays will be not be generated.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer.RemoveDebuggerAttribute">
            <summary>
            If true, the classes defined from included schemas which are emitted by XSD.exe as arrays will be not be generated.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer.GenerateInternalClasses">
            <summary>
            If true, the classes generated by XSD.exe as public will be generated as internal instead.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer.GenerateFactoryClass">
            <summary>
            If true, the classes generated by XSD.exe as public will be generated as internal instead.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer.DoNotGenerateDoCreate">
            <summary>
            If true, the classes generated by XSD.exe as public will be generated as internal instead.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer.XmlSchema">
            <summary>
            Gets the project item
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer.Render">
            <summary>
            Invokes the xsd assemblies to create the serializable classes.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer.CreateCodeCompileUnit">
            <summary>
            Creates a <see cref="T:System.CodeDom.CodeCompileUnit"/> from 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Xsd.CustomTool">
            <summary>
            Custom tool that can be associated with xsd files.
            </summary>
            <remarks>
            The results will be similar to the ones obtained by using the xsd.exe tool,
            but you have more options regarding what and how gets generated.
            <para>
            It invokes <see cref="T:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Xsd.CustomTool.Render">
            <summary>
            Renders the code by utilizing and instance of <see cref="T:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer"/>.
            </summary>
            <returns>The generated code.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Xsd.CustomTool.CreateRenderer">
            <summary>
            Create an instance of <see cref="T:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer"/>.
            </summary>
            <returns>an instance of <see cref="T:Kodeo.Reegenerator.Generators.Xsd.CodeRenderer"/>.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Xsd.IInitializable">
            <summary>
            Interface that gives the inheritors the ability to be initialized from an XML document.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Xsd.IInitializable.Init(Kodeo.Reegenerator.Wrappers.ProjectItem)">
            <summary>
            Initializes inheritors from a project item.
            </summary>
            <remarks>
            This method is called after the XML file has been loaded from the path 
            and validated against the schema.
            It gives the opportunity to transform or use the loaded information taking 
            into account the source project item.
            </remarks>
            <param name="projectItem">The project item holding the initialization data.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Generators.Xsd.Initializable">
            <summary>
            Simple implementation of <see cref="T:Kodeo.Reegenerator.Generators.Xsd.IInitializable" />.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Generators.Xsd.Initializable.OnInit">
            <summary>
            Override this function to do additional processing.
            This method gets called after <see cref="P:Kodeo.Reegenerator.Generators.Xsd.Initializable.ProjectItem"/> is set.
            </summary>
            <remarks>
            You do not have to call the base method when overriding as it does nothing.
            </remarks>
        </member>
        <member name="P:Kodeo.Reegenerator.Generators.Xsd.Initializable.ProjectItem">
            <summary>
            Gets the project item this instance has been deserialiezed from.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Constants">
            <summary>
            Defines various constants used throughout the Reegenerator project.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.CompanyName">
            <summary>
            Defines the company name.
            </summary>
            <value>The value is <c>Kodeo Limited</c>.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.ProductName">
            <summary>
            Defines the product name.
            </summary>
            <value>The value is <c>Reegenerator</c>.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.Version">
            <summary>
            Defines the current version number.
            </summary>
            <value>The current version number.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.CurrentVersion">
            <summary>
            The <see cref="T:System.Version"/> of <see cref="F:Kodeo.Reegenerator.Constants.Version"/>.
            </summary>
            <value>The current version.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RgenXsd">
            <summary>
            The name of the custom tool that runs on <c>xsd</c> files.
            </summary>
            <remarks>
            See <see cref="T:Kodeo.Reegenerator.Generators.Xsd.CustomTool"/>.
            </remarks>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RgenTemplate">
            <summary>
            The name of the custom tool that runs on <c>rgt</c> files.
            </summary>
            <remarks>
            See <see cref="T:Kodeo.Reegenerator.Generators.Template.CustomTool"/> for a description of the <c>rgt</c> file structure.
            </remarks>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RgenRenderer">
            <summary>
            The name of the custom tool that runs on any file (<see cref="T:Kodeo.Reegenerator.Generators.Renderer.CustomTool"/>).
            </summary>
            <remarks>To attach the RgenRenderer custom tool to a project item, follow these steps:
            <para>
            <list type="bullet">
            <item><term>Select the item you want the custom tool to run on (it must belong to a class library, console application or windows application project).</term></item>
            <item><term>Right-click on it and select <c>Attach Renderers...</c> and follow the wizard</term></item>
            <br/> or <br/>
            <item><term>Press F4 to display the properties of the item.</term></item>
            <item><term>Type <c>RgenRenderer</c> in the Custom Tool property.</term></item>
            <item><term>Press enter.</term></item>
            </list>
            </para>
            <para>
            To run the custom tool you can either save the project item or right-click it in the solution explorer and click Run Custom Rool.
            </para>
            </remarks>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RgenProjectType">
            <summary>
            The name of a project global variable that stores the type of a project.
            </summary>
            <remarks>
            A number of project wizards might store the type of the project being created.
            Other project wizards can use that information to prompt the user to choose same solution's projects selected by type.
            The project type is stored in the current project as a global variable named <c>RgenProjectType</c>.
            </remarks>
            <value>The value is <c>RgenProjectType</c>.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RenderersLibrary">
            <summary>
            The value of <see cref="F:Kodeo.Reegenerator.Constants.RgenProjectType"/> representing the Renderers library project.
            </summary>
            <value>The value is <c>RenderersLibrary</c>.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.XmlNamespaceRoot">
            <summary>
            The name of a project global variable that contain the XML namespace to be used as target by XML schemas.
            </summary>
            <remarks>
            The Reegenerator XML schema wizard prompt the user for an XML namespace to be used by schema being created.
            Teh default value proposed to the user is stored in the current project as a global variable.
            The key of the global variable is <c>RgenXmlNamespaceRoot</c>.
            </remarks>
            <value>The value is <c>RgenXmlNamespaceRoot</c>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Constants.UserSettingsPath">
            <summary>
            The path where Reegenerator stores history and various settings.
            </summary>
            <value>The value is full path of the <c>Kodeo\Reegenerator</c> subfolder located under the user's specific <c>ApplicationData</c> folder.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RegistryReegeneratorPath">
            <summary>
            Defines the path of the registry key holding the Reegenerator product information.
            </summary>
            <value>The value is <c>SOFTWARE\Kodeo Limited\Reegenerator</c> relative to <c>HKLM</c>.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RegistryPathKey">
            <summary>
            Defines the key name of the registry value that holds the path to the Reegenerator assembly.
            </summary>
            <remarks>
            The value is located under <see cref="F:Kodeo.Reegenerator.Constants.RegistryReegeneratorPath"/> and is set at install time.
            </remarks>
            <value>The value is <c>Path</c>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Constants.ReegeneratorDir">
            <summary>
            The directory where the Reegenerator binaries have been installed.
            </summary>
            <value>The value is the directory of the value of <see cref="P:Kodeo.Reegenerator.Constants.ReegeneratorPath"/>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Constants.ReegeneratorPath">
            <summary>
            The full path of the Reegenerator assembly as installed in the installation directory.
            </summary>
            <remarks>
            The path will normally be located under <c>C:\Program Files (x86)\Microsoft Visual Studio XX.0\Common7\IDE\Extensions\xxxxxxxx</c>.
            This dll will be used by Visual Studio when performing Reegenerator operations.
            When creating an renderer library pro1ect, this dll will be copied within the project.
            </remarks>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RegistryRegistrationEmailAddress">
            <summary>
            Defines the key name of the registry value that holds email address Reegenerator is licensed to.
            </summary>
            <value>The value is <c>RegistrationEmailAddress</c>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Constants.RegistrationEmailAddress">
            <summary>
            Gets the email address Reegenerator is licensed to.
            </summary>
            <value>The email address Reegenerator is licensed to.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RegistryRegistrationSerialNumber">
            <summary>
            Defines the key name of the registry value that holds serial number associated with <see cref="F:Kodeo.Reegenerator.Constants.RegistryRegistrationEmailAddress"/>.
            </summary>
            <value>The value is <c>RegistrationSerialNumber</c>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Constants.RegistrationSerialNumber">
            <summary>
            Gets the serial number associated with the Reegenerator license.
            </summary>
            <value>The serial number associated with the Reegenerator license.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Constants.FrameworkDir">
            <summary>
            Gets the path of the Microsoft .NET framework.
            </summary>
            <value>The value is <c>%windir%\Microsoft.NET\Framework\version</c>. The <c>%windir%</c> environment
            variable is expanded to the location of the Windows installation.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RegistryVisualStudioAssembliesHintPath">
            <summary>
            The location in the registry that allows Visual Studio to display the Reegenerator
            assemblies when adding references to projects.
            </summary>
            <remarks>The default value of the registry entry is set at setup time to the value of <see cref="P:Kodeo.Reegenerator.Constants.ReegeneratorDir"/>.</remarks>
            <value>Its value is <c>SOFTWARE\Microsoft\.NETFramework\AssemblyFolders\Reegenerator</c> realtive to <c>HKLM</c>.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RendererTag">
            <summary>
            The tag that identifies renderer directives.
            </summary>
            <value>The value is <c>renderer</c>.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.XmlSchemaSourceAttribute">
            <summary>
            The source attribute that identifies the Reegenerator <c>xs:appinfo</c> element in XML schema files.
            </summary>
            <remarks>
            The Reegenerator directives stored in XML schema files are located under the <c>xs:appinfo</c> structure.
            This structure can be used by other tools (e.g. dataset designer). The Reegenerator directives are therefore stored
            under a <c>xs:appinfo</c> element that has a <c>source</c> attribute whose value is <c>urn:Kodeo.Reegenerator</c>.
            </remarks>
            <value>The value is <c>urn:Kodeo.Reegenerator</c>.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RendererTagXMLNS">
            <summary>
            The XML namespace used by the Reegenerators directives.
            </summary>
            <value>The value is <c>urn:Kodeo.Reegenerator:renderer</c></value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RgenTemplateFileExtension">
            <summary>
            The extension for the Reegenerator template files.
            </summary>
            <value>The value is <c>.rgt</c></value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RgenRenderersPropertyKey">
            <summary>
            The key of the property that contains renderes directives when stored in the project file.
            </summary>
            <remarks>
            When the directives are stored in the project files, they are stored as the string value of a project item property.
            The property key name is <c>rgenRenderers</c>.
            </remarks>
            <value>The value is <c>rgenRenderers</c>.</value>
        </member>
        <member name="T:Kodeo.Reegenerator.Constants.VsProjectTypes">
            <summary>
            Defines the GUIDs for various Visual Studio projects' kinds.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.VsProjectTypes.SolutionFolder">
            <summary>
            The GUID of a solution folder.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.VsProjectTypes.VisualBasic">
            <summary>
            The GUID of a Visual Basic project.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.VsProjectTypes.VisualCSharp">
            <summary>
            The GUID of a Visual C# project.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.VsProjectTypes.VisualCPP">
            <summary>
            The GUID of a Visual C++ project.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.VsProjectTypes.VisualJSharp">
            <summary>
            The GUID of a Visual J# project.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.VsProjectTypes.WebProject">
            <summary>
            The GUID of a web project.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.VsProjectTypes.VsaProject">
            <summary>
            The GUID of a web project.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Constants.RegistryGeneratorsKeyPath(EnvDTE.Solution)">
            <summary>
            Defines the path of the registry key holding the information about the generators installed in Visual Studio.
            </summary>
            <value>The value is <c>SOFTWARE\Microsoft\VisualStudio\10.0\Generators</c> relative to <c>HKLM</c>.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Constants.RegistryCLSIDKeyPathPath(EnvDTE.Solution)">
            <summary>
            Defines the path of the registry key holding the information about the CLSID used by Visual Studio.
            </summary>
            <value>The value is <c>SOFTWARE\Microsoft\VisualStudio\10.0\CLSID</c> relative to <c>HKLM</c>.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RgenDependenciesFileName">
            <summary>
            The name of the file that contains the dependencies.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RgenAttachedRenderersFileName">
            <summary>
            The name of the file that contains information about renderers attached to project items.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Constants.GetEula">
            <summary>
            Gets the Reegenerator EULA.
            </summary>
            <returns>A string containing Reegenerator EULA.</returns>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RegistryIsFirstRun">
            <summary>
            Defines the key name of the registry value that holds the value for <see cref="P:Kodeo.Reegenerator.Constants.IsFirstRun"/>.
            </summary>
            <value>The value is <c>IsFirstRun</c>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Constants.IsFirstRun">
            <summary>
            Gets or sets a value telling whether the first run of Reegenerator is in progress.
            </summary>
            <value>A value telling whether the first run of Reegenerator is in progress.</value>
        </member>
        <member name="F:Kodeo.Reegenerator.Constants.RegistryParticipateExperience">
            <summary>
            Defines the key name of the registry value that holds the value for <see cref="P:Kodeo.Reegenerator.Constants.ParticipateExperience"/>.
            </summary>
            <value>The value is <c>ParticipateExperience</c>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Constants.ParticipateExperience">
            <summary>
            Gets or sets a value telling whether the user participate to the Reegenerator experience improvement program.
            </summary>
            <value>A value telling whether the user participate to the Reegenerator experience improvement program.</value>
        </member>
        <member name="T:Kodeo.Reegenerator.IPackageVersionService">
            <summary>
            <b>This class supports versioning for Visual Sudio package.</b>
            <para><b>This interface is for internal use only.</b></para>
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.IPackageVersionService.GetVersion">
            <summary>
            Gets the version supported by the service package.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.AnLex">
            <summary>
            Implements the lexical analyzer for the Reegenerator template langauge.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.AnLex.SymbolType">
            <summary>
            Represents all the types of the symbols returned by the GetNext method of the <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> class.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.None">
            <summary>
            No symbol.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.ErrorNotTerminatedString">
            <summary>
            A non terminated string. This can happen if a &quot; character cannot be 
            matched by another &quot; due to reaching the end of file or a directive.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.EOF">
            <summary>
            The end of file symbol. Returned when there are no more characters in the input stream.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.NewLines">
            <summary>
            A sequence of carriage return and line feed characters.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.Spaces">
            <summary>
            A sequence of space characters (tabs or spaces).
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.Equals">
            <summary>
            The equals sign.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.DirectiveAt">
            <summary>
            The &lt;%@ directive.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.DirectiveEquals">
            <summary>
            The &lt;%= directive. 
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.DirectiveBegin">
            <summary>
            The &lt;% directive. 
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.DirectiveEnd">
            <summary>
            The %&gt; directive. 
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.DirectiveAtEnd">
            <summary>
            The &lt;/ directive. 
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.Symbol">
            <summary>
            Represents a suite of alfanumeric characters or the underscore sign. The first character is non numeric.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.String">
            <summary>
            Represents a string. The string is a suite of characters enclosed in &quot; characters.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.Script">
            <summary>
            Represents a suite of characters of any type.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.AnLex.Symbol">
            <summary>
            Represents a symbol as returned by the lexical analyzer <see cref="T:Kodeo.Reegenerator.Language.AnLex"/>.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.Symbol.CreateEOF(System.Int32,System.Int32)">
            <summary>
            Creates the a <see cref="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.EOF"/> symbol.
            </summary>
            <param name="position">The symbol's position in the input stream.</param>
            <param name="line">The symbol's line number in the input stream.</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Language.AnLex.Symbol"/> that represent the end of input stream.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.Symbol.Create(System.Int32,System.Int32,Kodeo.Reegenerator.Language.AnLex.SymbolType,System.String)">
            <summary>
            Creates a <see cref="T:Kodeo.Reegenerator.Language.AnLex.Symbol"/> using specified position, type and content.
            </summary>
            <param name="position">The symbol's position in the input stream.</param>
            <param name="line">The symbol's line number in the input stream.</param>
            <param name="type">The <see cref="T:Kodeo.Reegenerator.Language.AnLex.SymbolType"/> of the symbol.</param>
            <param name="content">The content of the symbol (e.g. for symbols it contains the symbol value).</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Language.AnLex.Symbol"/> according to the parameters.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.Symbol.Create(System.Int32,System.Int32,System.Int32,Kodeo.Reegenerator.Language.AnLex.SymbolType,System.String)">
            <summary>
            Creates a <see cref="T:Kodeo.Reegenerator.Language.AnLex.Symbol"/> using specified position, type, content and length.
            </summary>
            <param name="position">The symbol's position in the input stream.</param>
            <param name="line">The symbol's line number in the input stream.</param>
            <param name="type">The <see cref="T:Kodeo.Reegenerator.Language.AnLex.SymbolType"/> of the symbol.</param>
            <param name="content">The content of the symbol (e.g. for symbols it contains the symbol value).</param>
            <param name="length">The length of the symbol in the input stream.</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Language.AnLex.Symbol"/> according to the parameters.</returns>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.Symbol.Position">
            <summary>
            Gets the symbol's position.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.Symbol.Line">
            <summary>
            Gets the symbol's line number.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.Symbol.Type">
            <summary>
            Gets the symbol's <see cref="T:Kodeo.Reegenerator.Language.AnLex.SymbolType"/>.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.Symbol.Content">
            <summary>
            Gets the symbol's content.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.AnLex.Symbol.Length">
            <summary>
            Gets the symbol's length.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.AnLex.Symbol.EndPosition">
            <summary>
            Gets the end position of this symbol (<see cref="F:Kodeo.Reegenerator.Language.AnLex.Symbol.Position"/> + <see cref="F:Kodeo.Reegenerator.Language.AnLex.Symbol.Length"/>).
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.AnLex.Symbol.EndLine">
            <summary>
            Gets the end line of this symbol (<see cref="F:Kodeo.Reegenerator.Language.AnLex.Symbol.Line"/> + the number of new line characters in <see cref="F:Kodeo.Reegenerator.Language.AnLex.Symbol.Content"/>).
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> class.
            </summary>
            <param name="sourceText">The source text to be analyzed.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.AnLex.SourceText">
            <summary>
            Gets the input reader used in the analysis.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.AnLex.Current">
            <summary>
            Gets the symbol returned by the last <see cref="M:Kodeo.Reegenerator.Language.AnLex.GetNext"/> method call.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.AnLex.CurrentPosition">
            <summary>
            Gets the analysis current position (zero based) in the input stream.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.AnLex.CurrentLine">
            <summary>
            Gets the analysis current line (zero based) in the input stream.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.SkipSeparators">
            <summary>
            Positions the symbol read on the next symbol that is not spaces or new lines.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.SkipEmptyLines">
            <summary>
            Skips empty lines starting with the current position.
            </summary>
            <remarks>
            This method will keep the spaces that the next non empty line starts with.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.PushBack">
            <summary>
            Instructs the analyzer to  return the last read symbol 
            when moving to the next symbol.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.PushBack(Kodeo.Reegenerator.Language.AnLex.SymbolType)">
            <summary>
            Calls <see cref="M:Kodeo.Reegenerator.Language.AnLex.PushBack"/> repeatedly until a symbol of <paramref name="symbolType"/> type
            become the first symbol to be returned by <see cref="M:Kodeo.Reegenerator.Language.AnLex.GetNext"/>.
            If the <paramref name="symbolType"/> cannot be found in the history, 
            the result of the next <see cref="M:Kodeo.Reegenerator.Language.AnLex.GetNext"/> call will be undetermined.
            </summary>
            <param name="symbolType">The <paramref name="symbolType"/> to look for.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.PushBack(Kodeo.Reegenerator.Language.AnLex.Symbol)">
            <summary>
            Calls <see cref="M:Kodeo.Reegenerator.Language.AnLex.PushBack"/> repeatedly until a specified symbol 
            becomes the first symbol to be returned by <see cref="M:Kodeo.Reegenerator.Language.AnLex.GetNext"/>.
            If the <paramref name="symbol"/> cannot be found in the history, 
            the result of the next <see cref="M:Kodeo.Reegenerator.Language.AnLex.GetNext"/> call will be undetermined.
            </summary>
            <param name="symbol">The <paramref name="symbol"/> to look for.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.PushBackWithSeparators">
            <summary>
            Calls <see cref="M:Kodeo.Reegenerator.Language.AnLex.PushBack"/> once and then 
            calls it repeatedly to put back any spaces and empty lines.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.Peek">
            <summary>
            Returns the the next symbol optionally skiping the separators without advancing 
            the symbol read position.
            <para>
            The next GetNext method call will return the same symbol.
            </para>
            </summary>
            <returns>The next symbol.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.Peek(System.Boolean)">
            <summary>
            Returns the the next symbol optionally skiping the separators without advancing 
            the symbol read position.
            <para>
            The next GetNext method call will return the same symbol.
            </para>
            </summary>
            <param name="skipSeparators">The skip separators switch. 
            If true, the function ignores spaces and empty lines and returns the first symbol that is not a separator.
            If false the function returns the next symbol no matter what that is.</param>
            <returns>The next symbol.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.GetNext">
            <summary>
            Gets the next symbol skiping spaces and empty lines.
            </summary>
            <returns>The next symbol.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.GetNext(System.Boolean)">
            <summary>
            Gets the next symbol optionally skiping the separators.
            </summary>
            <param name="skipSeparators">The skip separators switch. 
            If <c>true</c>, the function ignores spaces and empty lines and returns the first symbol that is not a separator.
            If <c>false</c> the function returns the next symbol no matter what that is.</param>
            <returns>The next symbol.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.DoGetNext">
            <summary>
            Reads the next symbol if there are no symbols pushed back and returns it. 
            If there are pushed back symbols, it pops the first symbol from the pushed back symbols stack and returns it.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.DoGetNextSymbol">
            <summary>
            This is the function that really reads the next symbol.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns the line and column numbers in the text buffer, given a position number.
            </summary>
            <param name="iPosition">Position number of the desired line.</param>
            <param name="piLine">Pointer to the line number.</param>
            <param name="piColumn">Pointer to the column position on the line.</param>
            <returns>If the method succeeds, it returns Microsoft.VisualStudio.VSConstants.S_OK.
            If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the position number in the text buffer, given a line and column number.
            </summary>
            <param name="iLine">Number of the line whose position is requested.</param>
            <param name="iIndex">Location of the character on iLine.</param>
            <param name="piPosition">Pointer to the equivalent position number.</param>
            <returns>If the method succeeds, it returns Microsoft.VisualStudio.VSConstants.S_OK.
            If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.GetLineCount(System.Int32@)">
            <summary>
            Returns the number of lines in the buffer.
            </summary>
            <param name="piLineCount">Pointer to the number of lines in the buffer.</param>
            <returns>If the method succeeds, it returns Microsoft.VisualStudio.VSConstants.S_OK.
            If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.AnLex.GetLengthOfLine(System.Int32,System.Int32@)">
            <summary>
            Returns the length of a line in the buffer.
            </summary>
            <param name="iLine">Number of the line whose length is requested.</param>
            <param name="piLength">Pointer to the length of the line.</param>
            <returns>If the method succeeds, it returns Microsoft.VisualStudio.VSConstants.S_OK.
            If it fails, it returns an error code.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Atom">
            <summary>
            Represents a portion of text from breaking down a Reegenerator template 
            into syntactical atoms.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Atom.HitTest">
            <summary>
            Represents the results of the <see cref="M:Kodeo.Reegenerator.Language.Atom.GetHitTest(System.Collections.Generic.List{Kodeo.Reegenerator.Language.Atom},System.Int32)"/> method.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Atom.HitTest.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.Atom.HitTest"/> class from a position.
            </summary>
            <param name="position">The position to test.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Atom.HitTest.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.Atom.HitTest"/> class.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Atom.HitTest.EType">
            <summary>
            Represents the possible hit zones.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Atom.HitTest.EType.None">
            <summary>
            No hit zone can be determined. E.g.: the template file is empty.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Atom.HitTest.EType.Atom">
            <summary>
            On an atom. Both <see cref="P:Kodeo.Reegenerator.Language.Atom.HitTest.Atom1"/> and <see cref="P:Kodeo.Reegenerator.Language.Atom.HitTest.Atom2"/> will contain the atom.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Atom.HitTest.EType.Between">
            <summary>
            Between atoms. <see cref="P:Kodeo.Reegenerator.Language.Atom.HitTest.Atom1"/> and <see cref="P:Kodeo.Reegenerator.Language.Atom.HitTest.Atom2"/> will contain the two atoms.
            </summary>
            <remarks>
            Both <see cref="P:Kodeo.Reegenerator.Language.Atom.HitTest.Atom1"/> and <see cref="P:Kodeo.Reegenerator.Language.Atom.HitTest.Atom2"/> can be <c>null</c> 
            when the position is at the begining or the end of the file, but not simultaneously.
            </remarks>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Atom.HitTest.Type">
            <summary>
            Gets the type of the hit.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Atom.HitTest.Atom1">
            <summary>
            Gets the first atom of the hit.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Atom.HitTest.Atom2">
            <summary>
            Gets the second atom of the hit.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Atom.HitTest.Position">
            <summary>
            Gets the position for this hit test.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Atom.HitTest.SameElementOfType``1">
            <summary>
            Gets a value indicating whether the two atoms belong to the same ancestor of a specified type.
            </summary>
            <typeparam name="T">The type of the ancestor.</typeparam>
            <returns>A value indicating whether the two atoms belong to the same ancestor of a specified type.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Atom.GetHitTest(System.Collections.Generic.List{Kodeo.Reegenerator.Language.Atom},System.Int32)">
            <summary>
            Returns hit information within a list of atoms based on a given position.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="atoms"/> is <c>null</c>.</exception>
            <param name="atoms">A list of <see cref="T:Kodeo.Reegenerator.Language.Atom"/> ordered by postition.</param>
            <param name="position">The position to look for.</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Language.Atom.HitTest"/> instance containing hit information.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Atom.#ctor(Kodeo.Reegenerator.Language.Element,System.Int32,System.Int32,System.Int32,Kodeo.Reegenerator.Language.ColorFamily)">
            <summary>
            Create a new instance of the <see cref="T:Kodeo.Reegenerator.Language.Atom"/> class.
            </summary>
            <param name="element">The <see cref="F:Kodeo.Reegenerator.Language.Atom.Element"/> this <see cref="T:Kodeo.Reegenerator.Language.Atom"/> belongs to.</param>
            <param name="position">The position of this atom within the template.</param>
            <param name="line">The start line of this atom within the template.</param>
            <param name="length">The length of the atom.</param>
            <param name="colorFamily">The <see cref="F:Kodeo.Reegenerator.Language.Atom.ColorFamily"/> associated with the atom.</param>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Atom.Element">
            <summary>
            Gets the element this atom belongs to.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Atom.Position">
            <summary>
            Gets the position of this atom within the template.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Atom.Line">
            <summary>
            Gets the starting line of this atom within the template.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Atom.Length">
            <summary>
            The length of this atom.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Atom.ColorFamily">
            <summary>
            The <see cref="F:Kodeo.Reegenerator.Language.Atom.ColorFamily"/> associated with this atom.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Atom.ColorIndex">
            <summary>
            Gets the zero based color index of the <see cref="F:Kodeo.Reegenerator.Language.Atom.ColorFamily"/>.
            </summary>
            <value>the value always is <see cref="F:Kodeo.Reegenerator.Language.Atom.ColorFamily"/> casted as integer.</value>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Attribute">
            <summary>
            Represents the attribute of a directive defined in a Reegenerator template.
            <example>
            This is an example on how to declare a directive with an attribute named 
            <c>AttributeName</c> and a value of <c>AttributeValue</c>:
            <code>
            &lt;%@ Directive AttributeName=&quot;AttributeVale&quot; %&gt;
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Attribute.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.Attribute"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="parent"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="parent"/> is not of <see cref="T:Kodeo.Reegenerator.Language.Attributes"/> type.</exception>
            <param name="parent">The parent element of this attribute.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Attribute.Parent">
            <summary>
            Get the <see cref="T:Kodeo.Reegenerator.Language.Attributes"/> collection this attribute belongs to.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Attribute.Name">
            <summary>
            Gets the name of this attribute.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Attribute.Value">
            <summary>
            Gets the value of this attribute.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Attribute.Load(Kodeo.Reegenerator.Language.AnLex)">
            <summary>
            Loads an attribute from an <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/>.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Attributes">
            <summary>
            Represents a list of attributes of a directive as defined in a Reegenerator template.
            <example>
            The <see cref="T:Kodeo.Reegenerator.Language.Attributes"/> instance will contain two attributes for the following directive declaration:
            <code>
            &lt;%@ Directive AttributeName1=&quot;AttributeVale1&quot; AttributeName2=&quot;AttributeVale2&quot; %&gt;
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Attributes.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.Attributes"/> class.
            </summary>
            <param name="parent">The parent element of this element.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Attributes.Items">
            <summary>
            Gets a dictionary containing all the attributes defined for this instance.
            </summary>
            <remarks>
            The names of the attributes are the keys of the dictionary.
            </remarks>
            <value>The dictionary of attributes defined for this instance.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Attributes.Item(System.String)">
            <summary>
            Gets the value of the attribute identified by <paramref name="key"/>.
            </summary>
            <param name="key">The key of the attribute we are looking for.</param>
            <returns>The value of the attribute identified by <paramref name="key"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Attributes.ContainsKey(System.String)">
            <summary>
            Determines whether this instance contains an 
            attribute with the specified key.
            </summary>
            <param name="key">The key of the attribute to locate.</param>
            <returns><c>true</c> if this instance contains an
            attribute with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Attributes.Load(Kodeo.Reegenerator.Language.AnLex)">
            <summary>
            Loads the attributes from an <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/>.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Attributes.GetValueOrSetError(System.String,Kodeo.Reegenerator.Language.SyntaxError.ErrorType,System.Boolean,Kodeo.Reegenerator.Language.Atom)">
            <summary>
            Gets the value of an attribute identified by its key. 
            If the key cannot be found, it adds an error to the Errors collection.
            </summary>
            <param name="key">The key of the attribute to locate.</param>
            <param name="error">The error to be added to the <see cref="F:Kodeo.Reegenerator.Language.Element.Errors"/> collection.</param>
            <param name="rejectEmptyValue">if false the function accepts empty attribute values. 
            Otherwise, it adds an error into the <see cref="F:Kodeo.Reegenerator.Language.Element.Errors"/> collection if the value is an empty string.</param>
            <param name="containingAtom">The lexical atom that generated the error.</param>
            <returns>The value of the attribute identified by <paramref name="key"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Attributes.GetValueOrDefault(System.String,System.String)">
            <summary>
            Gets the value of an attribute identified by its key. 
            It returns a default value if the attribute cannot be found, 
            </summary>
            <param name="key">The key of the attribute to locate.</param>
            <param name="defaultValue">The value to be returned if <paramref name="key"/> cannot be found.</param>
            <returns><paramref name="defaultValue"/> if <paramref name="key"/> cannot be found; otherwise the value of the attribute identified by <paramref name="key"/>.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Body">
            <summary>
            Represents the body of a method. The method can be <see cref="T:Kodeo.Reegenerator.Language.RenderMethod"/> which is the default method
            of a Reegenerator template, or it can be an explicit declared <see cref="T:Kodeo.Reegenerator.Language.Method"/>.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Body.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.Body"/> class.
            </summary>
            <param name="parent">The parent element of this element.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Body.Load(Kodeo.Reegenerator.Language.AnLex,Kodeo.Reegenerator.Language.AnLex.SymbolType)">
            <summary>
            Loads the method body from an <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            </summary>
            <remarks>
            Different types of method end with a different symbols. <see cref="T:Kodeo.Reegenerator.Language.RenderMethod"/> ends with <see cref="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.DirectiveAt"/> 
            and <see cref="T:Kodeo.Reegenerator.Language.Method"/> ends with <see cref="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.DirectiveAtEnd"/>.
            </remarks>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
            <param name="stopType">The type of the symbol that marks the end of the containing method.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.BodyScript">
            <summary>
            Represents a part of a <see cref="T:Kodeo.Reegenerator.Language.Body"/> that is to be written unchaged 
            to the rendered output. 
            The contents of the <see cref="T:Kodeo.Reegenerator.Language.BodyScript"/> will be rendered unchanged.
            </summary>
            <remarks>
            This class loads what appears in the Reegenerator template as grayed.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.BodyScript.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.BodyScript"/> class.
            </summary>
            <param name="parent">The parent element of this instance.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.BodyScript.Content">
            <summary>
            The content of the body script. The value of the content will
            be rendered unchanged.
            </summary>
            <remarks>
            This property represents what appears in a Reegenerator template as grayed. It will be transformed into
            a direct write into the resulting rendered code.
            </remarks>
            <value>The content of the body script.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.BodyScript.Load(Kodeo.Reegenerator.Language.AnLex,Kodeo.Reegenerator.Language.AnLex.SymbolType)">
            <summary>
            Loads the body script from a <see cref="T:Kodeo.Reegenerator.Language.AnLex"/>.
            It reads any symbol into the <see cref="P:Kodeo.Reegenerator.Language.BodyScript.Content"/> until it reaches
            a directive.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/>.</param>
            <param name="stopType">The type of the symbol that end the body.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Code">
            <summary>
            Represents a piece of code inserted in a method body.
            </summary>
            <remarks>
            The code must be written in the same language as the language of the Reegenerator template, 
            otherwise the resulting renderer will not compile.
            <para>
            When a Reegenerator template is transformed into a renderer class, the <see cref="T:Kodeo.Reegenerator.Language.BodyScript"/> classes
            become <c>Write</c> calls on the output stream of the render results. <see cref="T:Kodeo.Reegenerator.Language.Code"/> classes content
            become a part of the render class without any change.
            </para>
            <example>
            This is a very simple example on how to write code in a Reegenerator template:
            <code>
            body script
            &lt;% MethodCall(); %&gt;
            body script
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Code.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.Code"/> class.
            </summary>
            <param name="parent">The parent element of this instance.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Code.Content">
            <summary>
            Gets the code that becomes a part of the <see cref="M:Kodeo.Reegenerator.Generators.ICodeRenderer.Render"/> method.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Code.Load(Kodeo.Reegenerator.Language.AnLex)">
            <summary>
            Loads the code from a <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            It reads any symbol into the <see cref="P:Kodeo.Reegenerator.Language.Code.Content"/> until it reaches
            the %&gt; directive.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.CodeExpression">
            <summary>
            Represents the code expression whose result is sent to the rendered output. 
            <example>
            <code>
            body script
            &lt;%= this.GetValue() %&gt;
            body script
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.CodeExpression.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.CodeExpression"/> class.
            </summary>
            <param name="parent">The parent element of this instance.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.CodeExpression.Content">
            <summary>
            Gets the code expression whose results will be sent to the rendered output.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.CodeExpression.Load(Kodeo.Reegenerator.Language.AnLex)">
            <summary>
            Loads the code expression from a <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            It reads any symbol into the <see cref="P:Kodeo.Reegenerator.Language.CodeExpression.Content"/> until it reaches
            the %&gt; directive.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.ColorFamily">
            <summary>
            Represents the different types of colorization for a Reegenerator template elements.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.ColorFamily.DirectiveMarker">
            <summary>
            A directive marker.
            </summary>
            <remarks>
            <para>These are the markers and the associated <see cref="T:Kodeo.Reegenerator.Language.AnLex.SymbolType"/>:</para>
            <list type="table">
            <listheader>
                <term>Marker</term>
                <description>Directive</description>
            </listheader>
            <item>
                <term>&lt;%@</term>
                <description><see cref="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.DirectiveAt"/></description>
            </item>
            <item>
                <term>&lt;%=</term>
                <description><see cref="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.DirectiveEquals"/></description>
            </item>
            <item>
                <term>&lt;%</term>
                <description><see cref="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.DirectiveBegin"/></description>
            </item>
            <item>
                <term>%&gt;</term>
                <description><see cref="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.DirectiveEnd"/></description>
            </item>
            <item>
                <term>&lt;%/</term>
                <description><see cref="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.DirectiveAtEnd"/></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.ColorFamily.DirectiveName">
            <summary>
            A directive name. This is the symbol that follows a &lt;%@ directive.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.ColorFamily.Attribute">
            <summary>
            The attribute of a directive as defined in <see cref="F:Kodeo.Reegenerator.Language.ColorFamily.Attribute"/> belonging to <see cref="T:Kodeo.Reegenerator.Language.Attributes"/>.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.ColorFamily.String">
            <summary>
            A string. This is the value of an as defined in <see cref="F:Kodeo.Reegenerator.Language.ColorFamily.Attribute"/>.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.ColorFamily.Script">
            <summary>
            A script that is to rendered unchanged. 
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.ColorFamily.Text">
            <summary>
            Plain text. This can be code (<see cref="T:Kodeo.Reegenerator.Language.Code"/>) or code expression (<see cref="T:Kodeo.Reegenerator.Language.CodeExpression"/>).
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.UnexpectedDirective">
            <summary>
            Represents an unknown directive.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.UnexpectedDirective.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.UnexpectedDirective"/> class.
            </summary>
            <param name="parent">The parent element of this instance.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.UnexpectedDirective.Load(Kodeo.Reegenerator.Language.AnLex)">
            <summary>
            Loads all the contents of an unknown directive from an <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Element">
            <summary>
            The base class for all syntactical elements loaded from a Reegenerator template.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Element.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.Element"/> class.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Element.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.Element"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="parent"/> is <c>null</c>.</exception>
            <param name="parent">The parent element of this element.</param>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Element.Guid">
            <summary>
            Gets the unique identifier associated with this element.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Element.Parent">
            <summary>
            Get the parent <see cref="T:Kodeo.Reegenerator.Language.Element"/> of this instance.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Element.Errors">
            <summary>
            Gets the list of errors encoutered so far in the analysis process.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Element.Atoms">
            <summary>
            Gets the list of lexical atoms the element has been loaded from.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Element.Children">
            <summary>
            Gets the list of children elements.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Element.HasErrors">
            <summary>
            Gets a value that tells whether the element or any of its children has errors.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Element.AddError(Kodeo.Reegenerator.Language.AnLex,Kodeo.Reegenerator.Language.SyntaxError.ErrorType)">
            <summary>
            Adds an error to the list of errors.
            </summary>
            <param name="anLex">The <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance that generated the error.</param>
            <param name="error">The <see cref="T:Kodeo.Reegenerator.Language.SyntaxError.ErrorType"/> of the error to be added.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Element.AddError(Kodeo.Reegenerator.Language.SyntaxError.ErrorType,System.Int32,System.Int32)">
            <summary>
            Adds an error to the list of errors.
            </summary>
            <param name="error">The <see cref="T:Kodeo.Reegenerator.Language.SyntaxError.ErrorType"/> of the error to be added.</param>
            <param name="position">The position of the error in the input stream of the lexical analyzer.</param>
            <param name="length">The length of the error in the input stream of the lexical analyzer.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Element.AcceptSymbol(Kodeo.Reegenerator.Language.AnLex,System.String,Kodeo.Reegenerator.Language.ColorFamily,Kodeo.Reegenerator.Language.SyntaxError.ErrorType)">
            <summary>
            Accepts an atom of type <see cref="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.Symbol"/> from an <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            </summary>
            <remarks>
            The method gets the next symbol and if it is of <see cref="F:Kodeo.Reegenerator.Language.AnLex.SymbolType.Symbol"/> type
            and the value if the <paramref name="value"/>, it adds it to the list of atoms and <c>true</c> is returned.
            Otherwise an error is added to <see cref="F:Kodeo.Reegenerator.Language.Element.Errors"/> and <c>false</c> is returned.
            </remarks>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
            <param name="value">The value of the symbol.</param>
            <param name="colorFamily">The <see cref="T:Kodeo.Reegenerator.Language.ColorFamily"/> of the atom to be added if a matching symbol is found.</param>
            <param name="error">The <see cref="T:Kodeo.Reegenerator.Language.SyntaxError.ErrorType"/> of the error to be added if a matching symbol is not found.</param>
            <returns><c>true</c> if a matching symbol is found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Element.Accept(Kodeo.Reegenerator.Language.AnLex,Kodeo.Reegenerator.Language.AnLex.SymbolType,Kodeo.Reegenerator.Language.ColorFamily,Kodeo.Reegenerator.Language.SyntaxError.ErrorType)">
            <summary>
            Accepts an atom of a specified type. 
            </summary>
            <remarks>
            The method gets the next symbol and if it is of <paramref name="symbolType"/> type,
            it adds it to the list of atoms and <c>true</c> is returned.
            If the read symbol is not of <paramref name="symbolType"/> type, 
            an error is added to <see cref="F:Kodeo.Reegenerator.Language.Element.Errors"/> and <c>false</c> is returned.
            </remarks>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
            <param name="symbolType">The symbol type expected by the caller to be retrieved from <paramref name="anLex"/>.</param>
            <param name="colorFamily">The <see cref="T:Kodeo.Reegenerator.Language.ColorFamily"/> of the atom to be added if <paramref name="symbolType"/> is found.</param>
            <param name="error">The <see cref="T:Kodeo.Reegenerator.Language.SyntaxError.ErrorType"/> of the error to be added if <paramref name="symbolType"/> is not found.</param>
            <returns><c>true</c> if <paramref name="symbolType"/> is found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Element.AddAtom(System.Int32,System.Int32,System.Int32,Kodeo.Reegenerator.Language.ColorFamily)">
            <summary>
            Adds an atom to <see cref="F:Kodeo.Reegenerator.Language.Element.Atoms"/>.
            </summary>
            <param name="position">The position of the atom in input stream.</param>
            <param name="line">The starting line of the atom in input stream.</param>
            <param name="length">The length of the atom.</param>
            <param name="colorFamily">The <see cref="T:Kodeo.Reegenerator.Language.ColorFamily"/> associated with the atom.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Element.Synchronize(Kodeo.Reegenerator.Language.AnLex,System.Boolean,Kodeo.Reegenerator.Language.AnLex.SymbolType[])">
            <summary>
            Reads symbols from an <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance until it reaches one of a specified symbol types.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
            <param name="keepSynchronizationSymbol">Controls whether the syncronization symbol is pushed back (and consequently returned by the next <see cref="M:Kodeo.Reegenerator.Language.AnLex.GetNext"/> call).</param>
            <param name="symbolsToSynchronizeTo">An array of <see cref="T:Kodeo.Reegenerator.Language.AnLex.SymbolType"/> to synchronize to.</param>
            <returns>A string containing all the values of the symbols read until reaching a synchronization symbol.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Element.AllAtoms">
            <summary>
            Gets a list with all the atoms found in this instance and all the children.
            </summary>
            <remarks>The list is always sorted ascending on <see cref="F:Kodeo.Reegenerator.Language.Atom.Position"/></remarks>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Element.Position">
            <summary>
            Gets the position of the first atom of this element.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Element.Length">
            <summary>
            Gets the length in characters of all the atoms that form this element.
            </summary>
            <remarks>
            The value of this property is the difference between the end position of the last atom 
            and the start position of the first atom.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Element.GetElementOfType``1">
            <summary>
            Walks the hierarchy of the element and returns the first element of the required type.
            </summary>
            <remarks>
            The method returns this instance if it is of the required type. If not, it loops on the parent elements 
            to find the required type. If no element matches <typeparamref name="T"/>, <c>null</c> is returned.
            </remarks>
            <typeparam name="T">The type of the element to be retrieved.</typeparam>
            <returns>An element of type <typeparamref name="T"/> from this element hierarchy.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Element.GetElementsOfType``1">
            <summary>
            Walks the hierarchy of the element and returns the all direct or indirect 
            elements of the required type
            </summary>
            <typeparam name="T">The type of the elements to be retrieved.</typeparam>
            <returns>A list of elements of type <typeparamref name="T"/> from this element hierarchy.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.SyntaxError">
            <summary>
            Represents a syntactical error that occured 
            during the analysis of a Reegenerator template.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.SyntaxError.ErrorType">
            <summary>
            Defines the types of syntactical error that might occur during the analysis
            of a Reegenerator template.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.AttributeNameExpected">
            <summary>
            Attribute name not found. 
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.AttributeValueExpected">
            <summary>
            Attribute value not found. The attribute value is a string that follows 
            an 'attributeName = ' construct.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.DirectiveAtExpected">
            <summary>
            &lt;%@ expected.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.DirectiveAtEndExpected">
            <summary>
            &lt;%/ expected.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.DirectiveNameExpected">
            <summary>
            Directive name expected.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.DirectiveUnexpected">
            <summary>
            Unexpected directive name.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.DirectiveEqualsExpected">
            <summary>
            &lt;%= expected.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.DirectiveBeginExpected">
            <summary>
            &lt;% expected.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.DirectiveEndExpected">
            <summary>
            %&gt; expected.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.TemplateDirectiveNotDefined">
            <summary>
            Template directive not defined.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.TemplateDirectiveAlreadyDefined">
            <summary>
            Template directive alredy defined.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.DuplicateAttribute">
            <summary>
            The name of the attribute is duplicated in the directive.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.EqualsExpected">
            <summary>
            = sign expected.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.MethodAlreadyDefined">
            <summary>
            The method has already been defined. The 'Render' name is
            assigned by default to the default render procedure 
            generated from the Reegenerator script.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.MethodExpected">
            <summary>
            Method symbol expected.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.MethodNameAttributeNotFound">
            <summary>
            The Name attribute of a Method directive cannot be found.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.TemplateExpected">
            <summary>
            Template symbol expected.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.TemplateLanguageAttributeNotFound">
            <summary>
            The Language attribute of a Template directive cannot be found.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.TemplateCodeFileAttributeNotFound">
            <summary>
            The CodeFile attribute of a Template directive cannot be found.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.TemplateClassNameAttributeNotFound">
            <summary>
            The ClassName attribute of a Template directive cannot be found.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.IncludeExpected">
            <summary>
            Include symbol expected.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.IncludePathAttributeNotFound">
            <summary>
            The Path attribute of an Include directive cannot be found.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.IncludeDuplicatedPath">
            <summary>
            Duplicated import namespace.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.ReferenceDuplicatedAssembly">
            <summary>
            The reference assembly has already been referenced.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.ReferenceExpected">
            <summary>
            Reference symbol expected.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.ReferencePathAttributeNotFound">
            <summary>
            The Path attribute of a Reference directive cannot be found.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.ImportExpected">
            <summary>
            Import symbol expected.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.ImportDuplicatedNamespace">
            <summary>
            Duplicated import namespace.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.ImportNamespaceAttributeNotFound">
            <summary>
            The Namespace attribute of an Import directive cannot be found.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.ParameterExpected">
            <summary>
            Parameter symbol expected.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.ParameterNameAttributeNotFound">
            <summary>
            The Name attribute of a Parameter directive cannot be found.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.ParameterTypeAttributeNotFound">
            <summary>
            The Type attribute of a Parameter directive cannot be found.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.ErrorType.ParameterAlreadyDefined">
            <summary>
            The parameter Name attribute value has already been defined in another 
            parameter belonging to the method.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.SyntaxError.#ctor(Kodeo.Reegenerator.Language.SyntaxError.ErrorType,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.SyntaxError"/> class.
            </summary>
            <exception cref="T:System.ArgumentException"><paramref name="position"/> is less than <c>0</c>.</exception>
            <param name="error">The <see cref="T:Kodeo.Reegenerator.Language.SyntaxError.ErrorType"/> of this instance.</param>
            <param name="position">The position in the input stream.</param>
            <param name="length">The length of the error.</param>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.Position">
            <summary>
            Gets the position of the error in the input stream.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.Length">
            <summary>
            Gets the length of the error.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.SyntaxError.Error">
            <summary>
            Gets the <see cref="T:Kodeo.Reegenerator.Language.SyntaxError.ErrorType"/> of this instance.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.SyntaxError.Message">
            <summary>
            Gets the detailed message associated with this instance.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Import">
            <summary>
            Represents an import directive as defined in a Reegenerator template.
            The import directive has to be defined after the template directive.
            The import directive will allow the template writer to use types in a namespace 
            without having to fully qualify the use of a type in that namespace.
            <example>
            This is an example on how to define an import directive that uses System.Data assembly.
            <code>
            &lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Import.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.Import"/> class.
            </summary>
            <param name="parent">The parent element of this instance.</param>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Import.Keyword">
            <summary>
            The keyword that identifies a <see cref="T:Kodeo.Reegenerator.Language.Import"/> directive in a Reegenerator template.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Import.NamespaceAttribute">
            <summary>
            The name of the attribute that defines the namespace of the import.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Import.Namespace">
            <summary>
            The name of the namespace to import.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Import.Load(Kodeo.Reegenerator.Language.AnLex)">
            <summary>
            Loads an import directive from an <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Method">
            <summary>
            Represents a method as declared in a Reegenerator template file.
            </summary>
            <example>
            This is an example on how to declare a method:
            <code>
            &lt;%@ Method Name="RenderExample" %&gt;
                    &lt;%@ Parameter Name="parameter" Type="System.String" %&gt;
                Render this parameter as &lt;%= parameter %&gt;
            &lt;%/ Method %&gt;
            </code>
            </example>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Method.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.Method"/> class.
            </summary>
            <param name="parent">The parent element of this instance.</param>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Method.Keyword">
            <summary>
            The keyword that identifies a <see cref="T:Kodeo.Reegenerator.Language.Method"/> directive in a Reegenerator template.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Method.NameAttribute">
            <summary>
            The name of the attribute that defines the name of the method.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Method.ReturnTypeAttribute">
            <summary>
            The name of the attribute that defines the return type of the method.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Method.EndsWithNewLineAttribute">
            <summary>
            The name of the attribute that defines whether the method ends with a new line.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Method.DefineOutputParameterAttribute">
            <summary>
            The name of the attribute that defines whether the method defines the output parameter that will be used for renderering instead of base renderer output.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Method.Load(Kodeo.Reegenerator.Language.AnLex)">
            <summary>
            Loads a method from an <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Method.BeginHeaderAtom">
            <summary>
            Gets the atom this method header starts with.
            </summary>
            <value>The atom this method starts with.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Method.EndHeaderAtom">
            <summary>
            Gets the atom this method header ends with.
            </summary>
            <value>The atom this method ends with.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Method.BeginFooterAtom">
            <summary>
            Gets the atom this method footer ends with.
            </summary>
            <value>The atom this method ends with.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Method.EndFooterAtom">
            <summary>
            Gets the atom this method footer ends with.
            </summary>
            <value>The atom this method ends with.</value>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.MethodBase">
            <summary>
            Represents the abstract definition of a method as declared in 
            the Reegenerator template.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.MethodBase.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.MethodBase"/> class.
            </summary>
            <param name="parent">The parent element of this instance.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.MethodBase.#ctor(Kodeo.Reegenerator.Language.Element,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.MethodBase"/> with a specified name.
            </summary>
            <param name="parent">The parent element of this instance.</param>
            <param name="name">The name of this method.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.MethodBase.Name">
            <summary>
            Gets name of this method.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.MethodBase.ReturnType">
            <summary>
            Gets the type returned by this function. If <c>null</c> or empty, the method returns nothing.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.MethodBase.EndsWithNewLine">
            <summary>
            Determines whether the method output a new line at the end.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.MethodBase.DefineOutputParameter">
            <summary>
            Determines whether the method defines the output parameter that will be used for renderering instead of base renderer output.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.MethodBase.Parameters">
            <summary>
            Gets all the parameters defined for this method.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.MethodBase.LoadBody(Kodeo.Reegenerator.Language.AnLex,Kodeo.Reegenerator.Language.AnLex.SymbolType)">
            <summary>
            Loads the body of a method from an <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
            <param name="stopType">The type of the symbol that marks the end of the containing method.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.MethodParameter">
            <summary>
            Represents a parameter directive as defined in a Reegenerator template.
            The parameter directive has to be defined whithin a method definition.
            </summary>
            <remarks>
            <example>
            This is an example on how to define a method with parameters:
            <code>
            &lt;%@ Method Name="RenderExample" %&gt;
                    &lt;%@ Parameter Name="parameter" Type="System.String" %&gt;
                Render this paramter as &lt;%= parameter %&gt;
            &lt;%/ Method %&gt;
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.MethodParameter.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.MethodParameter"/> class.
            </summary>
            <param name="parent">The parent element of this instance.</param>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.MethodParameter.Keyword">
            <summary>
            The keyword that identifies a <see cref="T:Kodeo.Reegenerator.Language.MethodParameter"/> directive in a Reegenerator template.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.MethodParameter.NameAttribute">
            <summary>
            The name of the attribute that defines the name of the parameter.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.MethodParameter.TypeAttribute">
            <summary>
            The name of the attribute that defines the type of the parameter.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.MethodParameter.Name">
            <summary>
            The name of this parameter.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.MethodParameter.Type">
            <summary>
            The type of the parameter.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.MethodParameter.Load(Kodeo.Reegenerator.Language.AnLex)">
            <summary>
            Loads a parameter directive from an <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.MethodParameter.BeginMarkerAtom">
            <summary>
            Gets the atom this parameter directive starts with.
            </summary>
            <value>The atom this method starts with.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.MethodParameter.EndMarkerAtom">
            <summary>
            Gets the atom this parameter directive ends with.
            </summary>
            <value>The atom this method ends with.</value>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.MethodParameters">
            <summary>
            Represents all the parameter directives as defined for a method in a Reegenerator template.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.MethodParameters.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.MethodParameters"/> class.
            </summary>
            <param name="parent">The parent element of this instance.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.MethodParameters.Items">
            <summary>
            Gets all parameters as loaded from a Reegenerator template.
            </summary>
            <value>All parameters as loaded from a Reegenerator template.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.MethodParameters.Load(Kodeo.Reegenerator.Language.AnLex)">
            <summary>
            Loads all the parameter directives from an <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.RenderMethod">
            <summary>
            Represents the default render method as defined in a Reegenerator template file.
            </summary>
            <remarks>
            <example>
            This is the body of the default render method.
            <code>
            &lt;%@ Template Language=&quot;C#&quot; CodeFile=&quot;ClassExample.cs&quot; ClassName=&quot;ClassExample&quot; %&gt;
            This is the body of the default render method.
            &lt;%@ Method Name=&quot;OtherMethod&quot; %&gt;
                This is the body of a method.
            &lt;%/ Method %&gt;
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.RenderMethod.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.RenderMethod"/> class.
            The name of created method will always be <c>Render</c>.
            </summary>
            <param name="parent">The parent element of this instance.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.RenderMethod.Load(Kodeo.Reegenerator.Language.AnLex)">
            <summary>
            Loads the body of this method from an <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Script">
            <summary>
            Represents a Reegenerator template script.
            </summary>
            <remarks>
            You can use this class to load an rgt file by using the <see cref="M:Kodeo.Reegenerator.Language.Script.Load(Kodeo.Reegenerator.Language.AnLex)"/> method.
            <para>
            After loading the template from an <see cref="P:Kodeo.Reegenerator.Language.Script.AnLex"/> instance, 
            you should check the <see cref="P:Kodeo.Reegenerator.Language.Script.AllErrors"/> to see if there were any errors when loading the template.
            </para>
            <example>
            This is an example of a simple Reegenerator template:
            <code>
            &lt;%@ Template Language=&quot;C#&quot; ClassName=&quot;ClassExample&quot; %&gt;
            The default render method.
            &lt;%@ Method Name=&quot;OtherMethod&quot; %&gt;
                The enclosing method body.
            &lt;%/ Method %&gt;
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Script.FromPath(System.String)">
            <summary>
            Loads a <see cref="T:Kodeo.Reegenerator.Language.Script"/> instance from an rgt file specified by path.
            </summary>
            <param name="path">The path of the rgt file.</param>
            <returns>An instance of <see cref="T:Kodeo.Reegenerator.Language.Script"/> as loaded from <paramref name="path"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Script.FromTemplate(System.String)">
            <summary>
            Loads a <see cref="T:Kodeo.Reegenerator.Language.Script"/> instance from the contents of an rgt file.
            </summary>
            <param name="template">The rgt content.</param>
            <returns>An instance of <see cref="T:Kodeo.Reegenerator.Language.Script"/> as loaded from <paramref name="template"/>.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Script.AnLex">
            <summary>
            Get the <see cref="P:Kodeo.Reegenerator.Language.Script.AnLex"/> object that was used to load the script from an rgt file.
            </summary>
        </member>
        <member name="E:Kodeo.Reegenerator.Language.Script.ReplaceHandler">
            <summary>
            Occurs when a contained language (e.g. C# or VB) region is set to the contained code.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Script.ElementReplaceHandler">
            <summary>
            Method that get called when <see cref="E:Kodeo.Reegenerator.Language.Script.ReplaceHandler"/> gets raised.
            </summary>
            <param name="eventArgs">An instance of <see cref="T:Kodeo.Reegenerator.Language.Script.ElementReplaceEventArgs"/> 
            containing details about tge contained region.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Script.ElementReplaceEventArgs">
            <summary>
            Contains the details about the contained language region as raised by <see cref="E:Kodeo.Reegenerator.Language.Script.ReplaceHandler"/>.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Script.ElementReplaceEventArgs.ElementReplace">
            <summary>
            An contained code section.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Script.ElementReplaceEventArgs.ElementReplace.StartPosition1">
            <summary>
            Start position in the original text.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Script.ElementReplaceEventArgs.ElementReplace.EndPosition1">
            <summary>
            End position in the original text.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Script.ElementReplaceEventArgs.ElementReplace.StartPosition2">
            <summary>
            Start position in the generated text.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Script.ElementReplaceEventArgs.ElementReplace.EndPosition2">
            <summary>
            End position in the generated text.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Script.ElementReplaceEventArgs.ReplacedElements">
            <summary>
            The list of <see cref="T:Kodeo.Reegenerator.Language.Script.ElementReplaceEventArgs.ElementReplace"/> that occured throughout the whole rgt template.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Script.AssembleScript(Kodeo.Reegenerator.Wrappers.ProjectItem,System.Type)">
            <summary>
            Assembles the result of the template transformation into source code.
            </summary>
            <remarks>The rendered code implements a class that inherits from <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer"/>.</remarks>
            <returns>The rendered code in the <see cref="P:Kodeo.Reegenerator.Language.Script.Language"/> language.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Script.AssembleScript(System.String)">
            <summary>
            Assembles the result of the template transformation into source code.
            </summary>
            <param name="codeNamespace">The namespace of the generated class.</param>
            <remarks>The rendered code implements a class that inherits from <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer"/>.</remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Script.GetCodeNamespace(System.String,System.Type)">
            <summary>
            Creates a code that defines a class with a Render function. 
            The function contains just a comment statement that is a marker for the 
            insertion point for the code generated from the script file.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Script.Language">
            <summary>
            Gets the language specified in the <c>Template</c> directive.
            </summary>
            <value>The language used by the rgt file and the the language 
            of the generated file as defined in the <c>Template</c> directive of the rgt file.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Script.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.Script"/> class.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Script.TemplateDirective">
            <summary>
            Gets the <see cref="T:Kodeo.Reegenerator.Language.Template"/> directive as loaded from a <see cref="P:Kodeo.Reegenerator.Language.Script.AnLex"/> instance.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Script.ImportDirectives">
            <summary>
            Gets all the <see cref="T:Kodeo.Reegenerator.Language.Import"/> directives as loaded from an <see cref="P:Kodeo.Reegenerator.Language.Script.AnLex"/> instance.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Script.RenderMethod">
            <summary>
            Gets the <see cref="P:Kodeo.Reegenerator.Language.Script.RenderMethod"/> as loaded from an <see cref="P:Kodeo.Reegenerator.Language.Script.AnLex"/> instance.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Script.Methods">
            <summary>
            Gets all the methods as loaded from an <see cref="P:Kodeo.Reegenerator.Language.Script.AnLex"/> instance.
            </summary>
            <remarks>
            This returned list of methods will include the <see cref="P:Kodeo.Reegenerator.Language.Script.RenderMethod"/> on the first position.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Script.Load(Kodeo.Reegenerator.Language.AnLex)">
            <summary>
            Load the script from an <see cref="P:Kodeo.Reegenerator.Language.Script.AnLex"/> instance.
            </summary>
            <remarks>
            It is assumed that <paramref name="anLex"/> has just been opened and is positioned at the 
            beginning of the template file.
            </remarks>
            <param name="anLex">The source <see cref="P:Kodeo.Reegenerator.Language.Script.AnLex"/> instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="anLex"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Script.AllErrors">
            <summary>
            Gets a list with all the errors found in this instance and all the childern.
            </summary>
            <remarks>The list is always sorted ascending on <see cref="F:Kodeo.Reegenerator.Language.SyntaxError.Position"/>.</remarks>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.Template">
            <summary>
            Represents the template directive that a Reegenerator template must start with.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Template.#ctor(Kodeo.Reegenerator.Language.Element)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.Template"/> class.
            </summary>
            <param name="parent">The parent element of this element.</param>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Template.Keyword">
            <summary>
            The keyword that identifies a <see cref="T:Kodeo.Reegenerator.Language.Template"/> directive in a Reegenerator template.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Template.LanguageAttribute">
            <summary>
            The name of the attribute that defines the language of the template file.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Template.ClassNameAttribute">
            <summary>
            The name of the attribute that defines the name of the class to be generated.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Template.ParentClassAttribute">
            <summary>
            The name of the attribute that defines the class to inherit from.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Template.DefaultExtensionAttribute">
            <summary>
            The name of the attribute that defines the default extention.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Template.DisplayNameAttribute">
            <summary>
            The name of the attribute that defines the display name.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Template.DescriptionAttribute">
            <summary>
            The name of the attribute that defines the description.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Template.HideInDialogAttribute">
            <summary>
            If this is true, the user cannot select the generator in the user interface.
            </summary>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.Template.RequiresGlobalServicesAttribute">
            <summary>
            If this is true, the renderer requires access to Visual Studio global services.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Template.Language">
            <summary>
            Gets the language of the template.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Template.ClassName">
            <summary>
            Gets the name of the class that will be generated based on the contents of the 
            Reegenerator template file.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Template.ParentClass">
            <summary>
            Gets the name of the class to inherit from.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Template.DefaultExtension">
            <summary>
            Gets the default extension for files generated with this template.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Template.DisplayName">
            <summary>
            Gets the display name for this template.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Template.Description">
            <summary>
            Gets the description for this template.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Template.HideInDialog">
            <summary>
            Gets a value that tells whether the code generator is hidden in the picker dialog.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.Template.RequiresGlobalServices">
            <summary>
            Gets a value that tells whether the code generator requires access to Visual Studio global services.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.Template.Load(Kodeo.Reegenerator.Language.AnLex)">
            <summary>
            Loads a template directive from an <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.
            </summary>
            <param name="anLex">The source <see cref="T:Kodeo.Reegenerator.Language.AnLex"/> instance.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Language.TemplateEditor">
            <summary>
            Implements an editor for the template language.
            </summary>
            <remarks>
            This is a rich text box that offers coloring and intellisense for the templates.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.TemplateEditor.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Language.TemplateEditor"/> class.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.TemplateEditor.GetColumnFromIndex(System.Int32)">
            <summary>
            Returns the column number from the specified index
            </summary>
            <param name="index">index of the character</param>
            <returns>column number</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.TemplateEditor.GetIndexFromLineAndColumn(System.Int32,System.Int32)">
            <summary>
            Returns the index from the specified line and column number
            </summary>
            <param name="line">line number</param>
            <param name="column">column number</param>
            <returns>index</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.TemplateEditor.TextDocument">
            <summary>
            This property exposes the ITextDocument interface associated with
            our Rich Text editor.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.TemplateEditor.TextRange">
            <summary>
            This property will return the current ITextRange interface.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.TemplateEditor.TextSelection">
            <summary>
            This property will return the current ITextSelection interface.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.TemplateEditor.IsCursorAtTheEndOfSelection">
            <summary>
            Gets a value indicating whether the cursor is at the end of the selection.
            </summary>
            <value><c>true</c> if the cursor is at the end of the selection; <c>false</c> otherwise.</value>
        </member>
        <member name="E:Kodeo.Reegenerator.Language.TemplateEditor.TypeoverChanged">
            <summary>
            Occurs when the value of <see cref="P:Kodeo.Reegenerator.Language.TemplateEditor.Typeover"/> changes.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Language.TemplateEditor.Typeover">
            <summary>
            Gets a value indicating whether the editor is on type over mode.
            </summary>
            <value><c>true</c> if the editor is in type over mode; <c>false</c> otherwise.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.TemplateEditor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.TemplateEditor.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the TextChanged event and does the colorizing.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Kodeo.Reegenerator.Language.TemplateEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.TemplateEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Language.TemplateEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.TrialRunsExceededException">
            <summary>
            Represents an error that occurs when the number of trials has been exceeded.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.TrialRunsExceededException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kodeo.Reegenerator.TrialRunsExceededException"/> class.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.TrialRunsExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kodeo.Reegenerator.TrialRunsExceededException"/> class with a specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.TrialRunsExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kodeo.Reegenerator.TrialRunsExceededException"/> class with a specified
            error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.TrialRunsExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kodeo.Reegenerator.TrialRunsExceededException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="T:Kodeo.Reegenerator.Properties.Resources_2010">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources_2010.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources_2010.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources_2010.Reegenerator_EULA">
             <summary>
               Looks up a localized string similar to {\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi0\deflang5129\deflangfe5129\themelang5129\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f34\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria Math;}
            {\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 020206 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.CommentGenerator">
             <summary>
               Looks up a localized string similar to -------------------------------------------------------
             Automatically generated with Kodeo&apos;s Reegenerator
             Generator: RgenTemplate (internal)
             Generation date: {0}
             Generated by: {1}
            -------------------------------------------------------.
             </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.CommentGeneratorNonCommercial">
             <summary>
               Looks up a localized string similar to -------------------------------------------------------
             Automatically generated with Kodeo&apos;s Reegenerator for NON-COMMERCIAL USE
             Generator: RgenTemplate (internal)
             Generation date: {0}
             Generated by: {1}
            -------------------------------------------------------.
             </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.CommentGeneratorNonCommercialRenderer">
             <summary>
               Looks up a localized string similar to -----------------------------------------------------------
             Generated with Kodeo&apos;s Reegenerator for NON-COMMERCIAL USE
            -----------------------------------------------------------.
             </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.CommentsGeneratorClass">
            <summary>
              Looks up a localized string similar to {0} generator class (automatically generated)..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.CommentsRender">
            <summary>
              Looks up a localized string similar to Renders the code as defined in the source script file..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorAssemblyNotLoaded">
            <summary>
              Looks up a localized string similar to Assembly {0} not loaded in the {1} application domain.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorAttributeCannotBeFound">
            <summary>
              Looks up a localized string similar to Attribute {0} cannot be found for the template processing instruction.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorAttributeNotDefinedForDirective">
            <summary>
              Looks up a localized string similar to Attribute {0} not defined for directive {1}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCannotFindAttribute">
            <summary>
              Looks up a localized string similar to Cannot find attribute {0}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCannotFindElement">
            <summary>
              Looks up a localized string similar to Cannot find element {0}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCannotFindElementInProject">
            <summary>
              Looks up a localized string similar to Cannot find element {0} in project {1}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCannotFindElementInProjectItem">
            <summary>
              Looks up a localized string similar to Cannot find element {0} in project item {1}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCannotFindParameterAttribute">
            <summary>
              Looks up a localized string similar to Cannot find parameter {0} for attribute {1}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCannotFindSchema">
            <summary>
              Looks up a localized string similar to Cannot find schema object {0}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCannotRemoveDirectivesFromProject">
            <summary>
              Looks up a localized string similar to Cannot remove the directives from the project file.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCaptureNotFound">
            <summary>
              Looks up a localized string similar to Cannot find a capture within {0} group.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCustomToolCLSIDBadConfigured">
            <summary>
              Looks up a localized string similar to The CLSID {0} for custom tool {1} is not configured properly.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCustomToolCLSIDNotFound">
            <summary>
              Looks up a localized string similar to The CLSID {0} for custom tool {1} cannot be found.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCustomToolExecutionFailure">
            <summary>
              Looks up a localized string similar to Custom tool {0} execution has failed.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCustomToolNoCLSID">
            <summary>
              Looks up a localized string similar to Custom tool {0} does not have the CLSID configured.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCustomToolNotInstalled">
            <summary>
              Looks up a localized string similar to Custom tool {0} is not installed for language {1}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCustomToolProjectType">
            <summary>
              Looks up a localized string similar to Custom tool {0} cannot be executed in the containing project.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorCustomToolWrongInterfaces">
            <summary>
              Looks up a localized string similar to Custom tool {0} maps to a class that does not implement the required interfaces.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorDictionaryDuplicateKey">
            <summary>
              Looks up a localized string similar to Duplicate dictionary key {0}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorDictionaryKeyNotFound">
            <summary>
              Looks up a localized string similar to Key {0} not found in the dictionary.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorDictionaryNotEnoughSpace">
            <summary>
              Looks up a localized string similar to The number of elements in the source collection {0} is greater than the available space from {1} to the end of the destination ({2}).
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorDirectiveAttributesBadFormat">
            <summary>
              Looks up a localized string similar to Directive attributes are are not is a key value pair list format..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorDirectiveDefinitionNotFound">
            <summary>
              Looks up a localized string similar to Directive {0} xmlns=&quot;urn:Kodeo.Reegenerator:renderer&quot; has not been defined.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorDirectiveUnknown">
            <summary>
              Looks up a localized string similar to Directive {0} unknown.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorDuplicatedExtensionOrPath">
            <summary>
              Looks up a localized string similar to Duplicated extension or path &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorFileCheckOut">
            <summary>
              Looks up a localized string similar to Cannot check out file {0}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorFilePathOverlap">
            <summary>
              Looks up a localized string similar to Generated file path overlap: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorFilesCheckOut">
            <summary>
              Looks up a localized string similar to Cannot check out all files.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorGeneratorClassDoesNotImplementRequiredInterfaces">
            <summary>
              Looks up a localized string similar to The generator class must implement Kodeo.CodeGeneration.Generators.ICodeRenderer and implement System.System.MarshalByRefObject. Alternatively inherit from Kodeo.CodeGeneration.Generators._CodeRenderer class (override void Render() method))..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorGeneratorProjectBuildFailed">
            <summary>
              Looks up a localized string similar to Generator project {0} build failed. Please see the Build Output pane for detailed error messages..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorGetDefaultExtension">
            <summary>
              Looks up a localized string similar to The call to GetDefaultExtension() has failed due to the exception:.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorGetProjectItemService">
            <summary>
              Looks up a localized string similar to Unable to get the EnvDTE.ProjectItem service.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorGetProjectOutputPath">
            <summary>
              Looks up a localized string similar to Cannot retrieve the output path of the {0} project.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorGetServiceProvider">
            <summary>
              Looks up a localized string similar to Unable to get ServiceProvider from site object. This can be due to calls executed before the instance is sited (e.g. in constructor).
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorGlobalVariableNotFound">
            <summary>
              Looks up a localized string similar to Global project variable {0} cannot be found.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorInvalidIncludeType">
            <summary>
              Looks up a localized string similar to Invalid include type.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorInvalidRendererDirective">
            <summary>
              Looks up a localized string similar to Invalid renderer directive.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorItemAndProjectPath">
            <summary>
              Looks up a localized string similar to Item path {0} does not start with project path {1}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorMarshalByRefObjectNotImplemented">
            <summary>
              Looks up a localized string similar to Code renderer {0} defined in the {1} assembly must implement the System.MarshalByRefObject interface to be accessed across application domains boundaries.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorMultipleDirectiveDefinition">
            <summary>
              Looks up a localized string similar to Directive &apos;{0}&apos; has been defined more than once.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorNoGeneratorInfoAttached">
            <summary>
              Looks up a localized string similar to No generators information is attached to the project item. Use &apos;Attach Renderers...&apos; to correct this.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorNoMatchRGTTemplate">
            <summary>
              Looks up a localized string similar to The source file is not compatible with the rgt template format.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorPageAlreadyInPages">
            <summary>
              Looks up a localized string similar to Page is already contained in this instance.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorPageBelongsToOtherPages">
            <summary>
              Looks up a localized string similar to Page belongs to another Pages instance..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorPathPropertyNotFound">
            <summary>
              Looks up a localized string similar to Cannot find a custom property named &apos;path&apos; containing the path to the template in the {0} document.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorProjectItemNoProperties">
            <summary>
              Looks up a localized string similar to Project item does not support properties.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorProjectItemNotFound">
            <summary>
              Looks up a localized string similar to Project item {0} not found in solution {1}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorProjectItemPropertyNotExists">
            <summary>
              Looks up a localized string similar to Project item property {0} does not exist.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorProjectItemSolutionDifferentThanXmlSchemaSet">
            <summary>
              Looks up a localized string similar to The solution the project item belons to is not the same as the schema set solution.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorProjectNotFound">
            <summary>
              Looks up a localized string similar to Project {0} not found in solution {1}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorProjectProperty">
            <summary>
              Looks up a localized string similar to Cannot find property {0} for project {1}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorPropertyNotFound">
            <summary>
              Looks up a localized string similar to Cannot find property {0}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorReegeneratorAssemblyNotFound">
            <summary>
              Looks up a localized string similar to Reegenerator assembly not found at {0}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorRegistryEntryNotFound">
            <summary>
              Looks up a localized string similar to Cannot find the HKEY_LOCAL_MACHINE\{0} registry entry.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorSchemaNotLoaded">
            <summary>
              Looks up a localized string similar to The schema located at {0} has not been loaded..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorSourcesArrayWithEmptyElements">
            <summary>
              Looks up a localized string similar to Sources array contains null or empty elements.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorTemplateAttributeNotFound">
            <summary>
              Looks up a localized string similar to Cannot found attribute {0} in the template annotation.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorTemplateCompilation">
            <summary>
              Looks up a localized string similar to Template {0} compilation error:{1}{2}{1}Please check the {3} Output..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorTemplateInformationNotFound">
            <summary>
              Looks up a localized string similar to Cannot find template information in the {0} schema.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorTrialRunsExceeded">
            <summary>
              Looks up a localized string similar to The allowed number of renderer executions during the trial within this IDE instance has been exceeded.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.ErrorUnknownIncludeType">
            <summary>
              Looks up a localized string similar to Unknown include type {0}.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.Folder">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.Info48">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.LeftDown16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.LeftUp16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.Minus16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.MsgBoxCopySchema">
            <summary>
              Looks up a localized string similar to To enable design time xml schema, open file properties by pressing F4 and then paste in the Schemas property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.NewBook48">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.PaneCodeGenerationOuput">
            <summary>
              Looks up a localized string similar to Reegenerator.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.PaneGeneratedCode">
            <summary>
              Looks up a localized string similar to Reegenerator Code.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.Plus16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.Reegenerator128">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.Renderer16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.Renderer48">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.RgenDependencies">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;RgenDependencies xmlns=&quot;http://www.reegenerator.com/RgenDependenciesSchema.xsd&quot;&gt;
            &lt;!-- dependencies sample. The associated schema is located in %ProgramFiles%\Kodeo Limited\Reegenerator &lt;version&gt;\RgenDependenciesSchema.xsd
               The file must be located in the solution&apos;s root folder.
              &lt;DependencyProjectItem Path=&quot;$(SolutionDir)\Project\aaa.xml&quot;&gt;
                &lt;DependsOn Path=&quot;xxx.xml&quot;/&gt;
                &lt;DependsOn Path=&quot;$(ProjectDir)\yyy.cs&quot; /&gt;
              &lt;/DependencyProjectItem&gt;
            
              &lt;Dependen [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.Save48">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorAttributeNameExpected">
            <summary>
              Looks up a localized string similar to Attribute name expected.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorAttributeValueExpected">
            <summary>
              Looks up a localized string similar to Attribute value expected.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorDirectiveAtEndExpected">
            <summary>
              Looks up a localized string similar to Directive begin (&apos;&lt;%/&apos;) expected.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorDirectiveAtExpected">
            <summary>
              Looks up a localized string similar to Directive begin (&apos;&lt;%@&apos;) expected.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorDirectiveBeginExpected">
            <summary>
              Looks up a localized string similar to Directive begin (&apos;&lt;%&apos;) expected.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorDirectiveEndExpected">
            <summary>
              Looks up a localized string similar to Directive end (&apos;%&gt;&apos;) expected.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorDirectiveEqualsExpected">
            <summary>
              Looks up a localized string similar to Directive begin (&apos;&lt;%=&apos;) expected.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorDirectiveNameExpected">
            <summary>
              Looks up a localized string similar to Directive name expected..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorDirectiveUnexpected">
            <summary>
              Looks up a localized string similar to Unexpected directive name..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorDuplicateAttribute">
            <summary>
              Looks up a localized string similar to Attribute already defined.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorEqualsExpected">
            <summary>
              Looks up a localized string similar to Equals sign (&apos;=&apos;)  expected.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorForEachExpected">
            <summary>
              Looks up a localized string similar to &apos;ForEach&apos; expected .
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorImportDuplicatedNamespace">
            <summary>
              Looks up a localized string similar to Duplicated import namespace.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorImportExpected">
            <summary>
              Looks up a localized string similar to &apos;Import&apos; expected .
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorImportNamespaceAttributeNotFound">
            <summary>
              Looks up a localized string similar to &apos;Namespace&apos; attribute not found for import directive.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorIncludeDuplicatedPath">
            <summary>
              Looks up a localized string similar to Duplicated include path.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorIncludeExpected">
            <summary>
              Looks up a localized string similar to &apos;Include&apos; expected .
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorIncludePathAttributeNotFound">
            <summary>
              Looks up a localized string similar to &apos;Path&apos; attribute not found for include directive.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorMethodAlreadyDefined">
            <summary>
              Looks up a localized string similar to Method already defined.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorMethodExpected">
            <summary>
              Looks up a localized string similar to &apos;Method&apos; expected .
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorMethodNameAttributeNotFound">
            <summary>
              Looks up a localized string similar to &apos;Name&apos; attribute not found for method definition.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorParameterAlreadyDefined">
            <summary>
              Looks up a localized string similar to Parameter already defined.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorParameterExpected">
            <summary>
              Looks up a localized string similar to &apos;Parameter&apos; expected .
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorParameterNameAttributeNotFound">
            <summary>
              Looks up a localized string similar to &apos;Name&apos; attribute not found for parameter definition.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorParameterTypeAttributeNotFound">
            <summary>
              Looks up a localized string similar to &apos;Type&apos; attribute not found for parameter definition.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorReferenceDuplicatedAssembly">
            <summary>
              Looks up a localized string similar to The reference assembly has already been referenced..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorReferenceExpected">
            <summary>
              Looks up a localized string similar to &apos;Reference&apos; expected .
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorReferencePathAttributeNotFound">
            <summary>
              Looks up a localized string similar to &apos;Path&apos; attribute not found for reference directive.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorTemplateClassNameAttributeNotFound">
            <summary>
              Looks up a localized string similar to &apos;ClassName&apos; attribute not found for template definition.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorTemplateCodeFileAttributeNotFound">
            <summary>
              Looks up a localized string similar to &apos;CodeFile&apos; attribute not found for template definition.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorTemplateDirectiveAlreadyDefined">
            <summary>
              Looks up a localized string similar to Template directive already defined.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorTemplateDirectiveNotDefined">
            <summary>
              Looks up a localized string similar to Template directive not defined.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorTemplateExpected">
            <summary>
              Looks up a localized string similar to &apos;Template&apos; expected .
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.SyntaxErrorTemplateLanguageAttributeNotFound">
            <summary>
              Looks up a localized string similar to &apos;Language&apos; attribute not found for template definition.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.Tick128">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceCodeAssembled">
            <summary>
              Looks up a localized string similar to Code template successfully assembled..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceCodeCompiled">
            <summary>
              Looks up a localized string similar to Code successfully compiled..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceCodeGenerated">
            <summary>
              Looks up a localized string similar to Code successfully generated..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceCodeGenerationFailed">
            <summary>
              Looks up a localized string similar to {0} - finished generating with errors:.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceCodeGenerationProgress">
            <summary>
              Looks up a localized string similar to Code generation progress....
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceCodeGenerationStarted">
            <summary>
              Looks up a localized string similar to Code generation started....
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceCodeGenerationSucceeded">
            <summary>
              Looks up a localized string similar to {0} - finished generating with success..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceCodeLoaded">
            <summary>
              Looks up a localized string similar to Template code for {0} successfully loaded in the application domain..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceFoundTemplate">
            <summary>
              Looks up a localized string similar to Found template {0} and using {1} extension..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceGeneratingCode">
            <summary>
              Looks up a localized string similar to {0} - started generating..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceProjectItemSaved">
            <summary>
              Looks up a localized string similar to Project item {0} saved successfully..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceRegistrationUnsuccessful">
            <summary>
              Looks up a localized string similar to Cannot register Reegenerator. Email address or key are incorrect or there is an incorrect machine registration already in place..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceSavingProjectItem">
            <summary>
              Looks up a localized string similar to Saving project item {0}..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.TraceTrialRunsRemaining">
            <summary>
              Looks up a localized string similar to Rendered by Reegenerator for NON-COMMERCIAL USE..
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Properties.Resources.VSProject_genericproject">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Trace">
            <summary>
            Provides a set of methods and properties that help you trace the execution of your code. It behaves like the classic trace, but it keeps 
            a separate list of listeners, so that its display does not mix with the others trace outputs.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Trace.Listeners">
            <summary>
            Gets the collection of listeners that is monitoring the trace output.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.Add(System.Diagnostics.TraceListener)">
            <summary>Adds a listener to the list of listeners.</summary>
            <returns>The position at which the new listener was inserted.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.Remove(System.Diagnostics.TraceListener)">
            <summary>Removes from the collection the specified listener.</summary>
            <param name="listener">A listener to remove from the list. </param>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.Clear">
            <summary>
            Clears all the listeners from the list.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.Indent">
            <summary>
            Increments the current <see cref="P:Kodeo.Reegenerator.Trace.IndentLevel" />.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.Unindent">
            <summary>
            Decrements the current <see cref="P:Kodeo.Reegenerator.Trace.IndentLevel" />.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Trace.IndentLevel">
            <summary>
            Gets or sets the indent level.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Trace.IndentSize">
            <summary>
            Gets or sets the indent size.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Trace.AutoFlush">
            <summary>
            Determines whethere the listeners are flushed after a write operation.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.Write(System.String)">
            <summary>
            Writes a message to the trace listeners in the <see cref="P:Kodeo.Reegenerator.Trace.Listeners" /> collection.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.Write(System.Object)">
            <summary>
            Writes an object's value to the trace listeners in the <see cref="P:Kodeo.Reegenerator.Trace.Listeners" /> collection.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.Write(System.String,System.String)">
            <summary>
            Writes a message to the trace listeners in the <see cref="P:Kodeo.Reegenerator.Trace.Listeners" /> collection.
            </summary>
            <param name="message">The message to write.</param>
            <param name="category">A category name used to organize the output. </param>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.Write(System.Object,System.String)">
            <summary>
            Writes an object's value to the trace listeners in the <see cref="P:Kodeo.Reegenerator.Trace.Listeners" /> collection.
            </summary>
            <param name="value">The value to write</param>
            <param name="category">A category name used to organize the output. </param>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.WriteLine(System.String)">
            <summary>
            Writes a message to the trace listeners in the <see cref="P:Kodeo.Reegenerator.Trace.Listeners" /> collection.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.WriteLine(System.Object)">
            <summary>
            Writes an object's value to the trace listeners in the <see cref="P:Kodeo.Reegenerator.Trace.Listeners" /> collection.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.WriteLine(System.String,System.String)">
            <summary>
            Writes a message to the trace listeners in the <see cref="P:Kodeo.Reegenerator.Trace.Listeners" /> collection.
            </summary>
            <param name="message">The message to WriteLine.</param>
            <param name="category">A category name used to organize the output. </param>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.WriteLine(System.Object,System.String)">
            <summary>
            Writes an object's value to the trace listeners in the <see cref="P:Kodeo.Reegenerator.Trace.Listeners" /> collection.
            </summary>
            <param name="value">The value to WriteLine</param>
            <param name="category">A category name used to organize the output. </param>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.Flush">
            <summary>
            Flushes the trace listeners in the <see cref="P:Kodeo.Reegenerator.Trace.Listeners" /> collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Trace.Close">
            <summary>
            Flushes the output buffer, and then closes all the <see cref="P:Kodeo.Reegenerator.Trace.Listeners" />.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.CodeElement">
            <summary>
            Provides various helper methods for manipulating code elements.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetAttribute(EnvDTE.CodeElements,System.String,System.Boolean)">
            <summary>
            Gets an attribute with a specified name from a collection of attributes.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="attributes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="attributeName"/> is <c>null</c> or empty.</exception>
            <param name="attributes">The collection of attributes containing <paramref name="attributeName"/>.</param>
            <param name="attributeName">The full name of the type of the attribute.</param>
            <param name="throwIfNotFound">If true and the attribute cannot be found, an error will be thrown.</param>
            <returns>The attribute whose full type name equals <paramref name="attributeName"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetAttributeParamValue(EnvDTE.CodeElements,System.String,System.String,System.Boolean)">
            <summary>
            Gets the value of a parameter of an atrribute. 
            </summary>
            <remarks>
            When you write code, you can attach attributes to code elements. These elements normally have an attributes collection. 
            These method helps you look into the attributes collection for a specified attribute.
            It then searches for a named parameter of the attribute constructor and tries to returns the value of the named parameter.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="attributes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="attributeName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameterName"/> is <c>null</c> or empty.</exception>
            <param name="attributes">The collection of attributes containing <paramref name="attributeName"/>.</param>
            <param name="attributeName">The full name of the type of the attribute.</param>
            <param name="parameterName">The name of the parameter of the attribute constructor.</param>
            <param name="throwIfNotFound">If true and the value cannot be found, an error will be thrown.</param>
            <returns>The value of a parameter of an atrribute belonging to a collection of attributes.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.FindElement(EnvDTE.DTE,System.String,System.Boolean)">
            <summary>
            Finds a code element belonging to the active solution of a <b>EnvDTE.DTE</b> instance.
            </summary>
            <param name="dte">The <b>EnvDTE.DTE</b> containing the solution to look into.</param>
            <param name="fullName">The full name of the element to look for.</param>
            <param name="throwIfNotFound">If <c>true</c>, an error is thrown if <paramref name="fullName"/> cannot be found.</param>
            <returns>A <c>CodeElement2</c> ideintified by <paramref name="fullName"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.FindElement(Kodeo.Reegenerator.Wrappers.Project,System.String,System.Boolean)">
            <summary>
            Finds a code element belonging to a project instance.
            </summary>
            <param name="project">The project to look for the code element.</param>
            <param name="fullName">The full name of the code element to look for.</param>
            <param name="throwIfNotFound">If <c>true</c>, an error is thrown if <paramref name="fullName"/> cannot be found.</param>
            <returns>A <c>CodeElement2</c> ideintified by <paramref name="fullName"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.FindElement(Kodeo.Reegenerator.Wrappers.ProjectItem,System.String,System.Boolean)">
            <summary>
            Finds a code element belonging to a project item.
            </summary>
            <param name="projectItem">The project item to look for the code element.</param>
            <param name="fullName">The full name of the code element to look for.</param>
            <param name="throwIfNotFound">If <c>true</c>, an error is thrown if <paramref name="fullName"/> cannot be found.</param>
            <returns>A <c>CodeElement2</c> ideintified by <paramref name="fullName"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetComments(System.String)">
            <summary>
            Gets the doc comments associated with a code element. 
            </summary>
            <remarks>
            These comments are usually stored in the DocComment property of the code element.
            They start and end with a doc tag that is not visible in the code. 
            These two tags will be striped by this method.
            You should would call this function by passing
            the value of the DocComments property of a code element.
            </remarks>
            <param name="docComments">The doc comments associated with a code element.</param>
            <returns>The comments with no doc comments artifacts.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetSummary(System.String)">
            <summary>
            Gets the summary from a doc comments.
            </summary>
            <remarks>
            This method uses the result of the <see cref="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetComments(System.String)"/> methods and returns
            the comments found enclosed in <c>summary</c> tags.
            </remarks>
            <param name="docComments">The doc comments to retrieve summary from.</param>
            <returns>The summary as extracted from <paramref name="docComments"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetCommentsNoReturn(System.String)">
            <summary>
            Gets the doc comments associated with a code element, excluding the returns tag.
            </summary>
            <remarks>
            These comments are usually stored in the DocComment property of the code element.
            They start and end with a doc tag that is not visible in the code. 
            These two tags will be striped by this method.
            You should would call this function by passing
            the value of the DocComments property of a CodeFunction element.
            </remarks>
            <param name="docComments">The doc comments associated with a code element.</param>
            <returns>The comments with no doc comments artifacts and no returns tag.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetMethodGenericName(EnvDTE.CodeFunction)">
            <summary>
            Gets the name of a method including generic information.
            e.g. string fn&lt;T&gt;(T t) will return fn&lt;T&gt;.
            </summary>
            <remarks>
            This method is necessary because the Name property of <b>EnvDTE.CodeFunction</b> does not 
            include the generics information.
            </remarks>
            <param name="method">The method whose generic name is to be retrieved.</param>
            <returns>The generic name of <paramref name="method"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetCodeElements``1(EnvDTE.CodeElements)">
            <summary>
            Recursively gets the code elements of a specific type from a collections of code elements.
            </summary>
            <typeparam name="T">The type of the code elements to be retrieved (e.g. EnvDTE.CodeInterface).</typeparam>
            <param name="codeElements">The code elements collection to be parsed.</param>
            <returns>A dictionary keys by the element's full name with value that is a list 
            with all the partial definitions of type <typeparamref name="T"/> for the key.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.TraverseCodeElements``1(EnvDTE.CodeElements,System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Recursively explores a collection of code elements for elements of a specific type.
            This includes all code elements in external libraries referenced by the project.
            If you need to explore only code elements declared within the project use <see cref="M:Kodeo.Reegenerator.Wrappers.CodeElement.TraverseHierarchyForCodeElements``1(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Action{``0},System.Func{``0,System.Boolean})"/> instead.
            </summary>
            <typeparam name="T">The type to be explored (e.g. EnvDTE.CodeInteface).</typeparam>
            <param name="codeElements">The collection of elements.</param>
            <param name="action">The action to be done when an element of type <typeparamref name="T"/> is found.</param>
            <param name="filter">Use this to filter out certain elements.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.TraverseSolutionForCodeElements``1(EnvDTE.Solution,System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a solution and performs action on code elements of a certain type (e.g. EnvDTE.CodeInterface).
            </summary>
            <typeparam name="T">The type to be explored (e.g. EnvDTE.CodeInteface).</typeparam>
            <param name="solution">The solution to be traversed.</param>
            <param name="action">The action to be done when an element of type <typeparamref name="T"/> is found.</param>
            <param name="filter">Use this to filter out certain elements.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.TraverseHierarchyForCodeElements``1(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a hierarchy and performs action on code elements of a sertain type (e.g. EnvDTE.CodeInterface).
            </summary>
            <typeparam name="T">The type to be explored (e.g. EnvDTE.CodeInteface).</typeparam>
            <param name="hierarchy">The hierarchy to be traversed.</param>
            <param name="action">The action to be done when an element of type <typeparamref name="T"/> is found.</param>
            <param name="filter">Use this to filter out certain elements.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetProperties(System.Collections.Generic.List{EnvDTE.CodeInterface},System.Func{EnvDTE.CodeProperty,System.Boolean})">
            <summary>
            Gets a filtered list of properties from partial definitions of an interface.
            </summary>
            <param name="partials">The partials definitions for the interface.</param>
            <param name="filter">The filter function.</param>
            <returns>A filtered list of properties from partial definitions of an interface.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetProperties(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{EnvDTE.CodeInterface}},System.Func{EnvDTE.CodeProperty,System.Boolean})">
            <summary>
            Gets a filtered list of properties from partial definitions of a multiple interfaces.
            </summary>
            <param name="partials">The partials definitions for the interfaces.</param>
            <param name="filter">The filter function.</param>
            <returns>A filtered list of properties from partial definitions of all interfaces.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetProperties(System.Collections.Generic.List{EnvDTE.CodeClass},System.Func{EnvDTE.CodeProperty,System.Boolean})">
            <summary>
            Gets a filtered list of properties from partial definitions of a class.
            </summary>
            <param name="partials">The partials definitions for the class.</param>
            <param name="filter">The filter function.</param>
            <returns>A filtered list of properties from partial definitions of a class.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetProperties(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{EnvDTE.CodeClass}},System.Func{EnvDTE.CodeProperty,System.Boolean})">
            <summary>
            Gets a filtered list of properties from partial definitions of multiple classes.
            </summary>
            <param name="partials">The partials definitions for the classes.</param>
            <param name="filter">The filter function.</param>
            <returns>A filtered list of properties from partial definitions of all classes.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetMethods(System.Collections.Generic.List{EnvDTE.CodeInterface},System.Func{EnvDTE.CodeFunction,System.Boolean})">
            <summary>
            Gets a filtered list of methods from partial definitions of an interface.
            </summary>
            <param name="partials">The partials definitions for the interface.</param>
            <param name="filter">The filter function.</param>
            <returns>A filtered list of methods from partial definitions of an interface.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetMethods(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{EnvDTE.CodeInterface}},System.Func{EnvDTE.CodeFunction,System.Boolean})">
            <summary>
            Gets a filtered list of methods from partial definitions of a multiple interfaces.
            </summary>
            <param name="partials">The partials definitions for the interfaces.</param>
            <param name="filter">The filter function.</param>
            <returns>A filtered list of methods from partial definitions of all interfaces.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetMethods(System.Collections.Generic.List{EnvDTE.CodeClass},System.Func{EnvDTE.CodeFunction,System.Boolean})">
            <summary>
            Gets a filtered list of methods from partial definitions of an interface.
            </summary>
            <param name="partials">The partials definitions for the interface.</param>
            <param name="filter">The filter function.</param>
            <returns>A filtered list of methods from partial definitions of a class.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.CodeElement.GetMethods(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{EnvDTE.CodeClass}},System.Func{EnvDTE.CodeFunction,System.Boolean})">
            <summary>
            Gets a filtered list of methods from partial definitions of a multiple interfaces.
            </summary>
            <param name="partials">The partials definitions for the interfaces.</param>
            <param name="filter">The filter function.</param>
            <returns>A filtered list of methods from partial definitions of all interfaces.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.GlobalsDictionary">
            <summary>
            Implements a dictionary using an <b>EnvDTE.Globals</b> instance as persistance storage.
            </summary>
            <remarks>
            Can be used to persist properties for projects. 
            The dictionary values are persisted in the project file as user properties for the project.
            <para>
            <b>Note: </b> This class is not thread safe and does not invalidate 
            an enumeration process when a global propery gets changed via this collection, IDE or SDK interfaces.
            </para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.#ctor(EnvDTE.Globals)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.GlobalsDictionary"/> from an <b>EnvDTE.Globals</b> instance.
            </summary>
            <param name="globals">The <b>EnvDTE.Globals</b> instance that provides values for the ditionary.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Globals">
            <summary>
            Gets the <b>EnvDTE.Globals</b> used as a persistance storage by this dictionary.
            </summary>
            <value>The <b>EnvDTE.Globals</b> used as a persistance storage by this dictionary.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Add(System.String,System.String)">
            <summary>
            Adds an element with the provided key and value to this instance.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key as <paramref name="key"/> already exists in the dictionary.</exception>
            <param name="key">The string to use as the key of the element to add.</param>
            <param name="value">The string to use as the value of the element to add.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains an element with the specified key. 
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c> or empty.</exception>
            <param name="key">The key to located in the dictionary.</param>
            <returns><c>true</c> if the dictionary contains an element with the key; otherwise, <c>false</c>. </returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Keys">
            <summary>
            Gets a collection containing the keys of the IDictionary.
            </summary>
            <remarks>
            The order of the keys in the returned collection is unspecified, 
            but it is guaranteed to be the same order as the corresponding values 
            in the collection returned by the <see cref="P:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Values"/> property.
            </remarks>
            <value>A collection containing the keys of the dictionary.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the dictionary.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c> or empty.</exception>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element is successfully removed; otherwise, <c>false</c>. This method also returns <c>false</c> if key was not found in the original IDictionary. </returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c> or empty.</exception>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, 
            if the key is found; otherwise, <c>null</c>. 
            This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the dictionary contains an element with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
            <remarks>
            The order of the values in the returned collection is unspecified, 
            but it is guaranteed to be the same order as the corresponding keys in the 
            collection returned by the <see cref="P:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Keys"/> property.
            </remarks>
            <value>A collection containing the keys of the dictionary.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key. 
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException">value is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> cannot be found in the dictionary.</exception>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds an item to the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.</exception>
            <param name="item">The item to be added to the collection.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The item to locate in the collection.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the collection; oterwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index. 
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source collection is greater than the available space 
            from <paramref name="arrayIndex"/> to the end of the destination.
            </exception>
            <param name="array">The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The number of elements contained in the collection.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the first occurrence of an item from the collection. 
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns><c>true</c> if the item was successfuly removed from the collection; otherise, <c>false</c>. 
            The method also returns <c>false</c> if <paramref name="item"/> is not found in the original collection.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <b>System.Collections.IEnumerator</b> that iterates through a collection. 
            </summary>
            <returns>An <b>System.Collections.IEnumerator</b> instance that can be used to iterate through the collection. </returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:Kodeo.Reegenerator.Wrappers.GlobalsDictionary"/>.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Enumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
            <value>The element at the current position of the enumerator.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Enumerator"/>.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
            <value>The element at the current position of the enumerator.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:Kodeo.Reegenerator.Wrappers.GlobalsDictionary"/>.
            </summary>
            <returns><c>true</c> if the enumerator was successfuly advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.GlobalsDictionary.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, 
            which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.Project">
            <summary>
            Wrapper class for <b>EnvDTE.Project</b> that provides additional functionality.
            </summary>
            <remarks>
            Wraps a <b>EnvDTE.Project</b> instance and provides
            various helper functions.
            <para>
            You can create instances of this class by using the static methods provided by this class.
            You choose the method to use based on the information you have access to:
            <list type="table">
                <listheader>
                    <term>Information</term>
                    <description>Methods</description>
                </listheader>
                <item>
                    <term>The solution instance and the project file path</term>
                    <description>Use <see cref="M:Kodeo.Reegenerator.Wrappers.Project.FromPath(EnvDTE.Solution,System.String)"/> or <see cref="M:Kodeo.Reegenerator.Wrappers.Project.FromPath(EnvDTE.Solution,System.String,System.Boolean)"/>.</description>
                </item>
                <item>
                    <term>The solution instance and the project unique name</term>
                    <description>Use <see cref="M:Kodeo.Reegenerator.Wrappers.Project.FromUniqueName(EnvDTE.Solution,System.String)"/> or <see cref="M:Kodeo.Reegenerator.Wrappers.Project.FromUniqueName(EnvDTE.Solution,System.String,System.Boolean)"/>.</description>
                </item>
                <item>
                    <term>The hierarchy of the project</term>
                    <description>Use <see cref="M:Kodeo.Reegenerator.Wrappers.Project.FromHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)"/>.</description>
                </item>
                <item>
                    <term>The hierarchy of the parent project of the project and the id of the project within the parent project.</term>
                    <description>Use <see cref="M:Kodeo.Reegenerator.Wrappers.Project.FromHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)"/>.</description>
                </item>
                <item>
                    <term>An <b>EnvDTE.Project</b> instance</term>
                    <description>Use <see cref="M:Kodeo.Reegenerator.Wrappers.Project.FromProject(EnvDTE.Project)"/>.</description>
                </item>
            </list>
            </para>
            <para>
            When you are authoring a renderer you normally inherit from the <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer"/> class
            which gives you access to the <see cref="P:Kodeo.Reegenerator.Generators.CodeRenderer.ProjectItem"/> property.
            Through this property you can get hold of the DTE object and then of the <b>EnvDTE.Solution</b>.
            </para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.FromProject(EnvDTE.Project)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> class from a <b>EnvDTE.Project</b> instance.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="project"/> is <c>null</c>.</exception>
            <param name="project">The <b>EnvDTE.Project</b> project to be wrapped.</param>
            <returns>An instance of <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> that wraps <paramref name="project"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.#ctor(EnvDTE.Project)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> class from a <b>EnvDTE.Project</b> instance.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="project"/> is <c>null</c>.</exception>
            <param name="project">The <b>EnvDTE.Project</b> that is being wrapped by this instance.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.DteObject">
            <summary>
            Gets the <b>EnvDTE.Project</b> wrapped by this instance.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.Solution">
            <summary>
            Gets the <b>EnvDTE.Solution</b> this project belongs to.
            </summary>
            <value>The <b>EnvDTE.Solution</b> this project item belongs to.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.FromHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> class that wraps the <b>EnvDTE.Project</b>
            with a specified id within a <b>Microsoft.VisualStudio.Shell.Interop.IVsHierarchy</b> instance.
            </summary>
            <param name="vsHierarchy">The hierarchy containing the project.</param>
            <param name="itemId">The id of the project in the hierarchy.</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> instance wrapping the <b>EnvDTE.Project</b> with the <paramref name="itemId"/> within <paramref name="vsHierarchy"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.FromHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> class that wraps the <b>EnvDTE.Project</b>
            associated with a <b>Microsoft.VisualStudio.Shell.Interop.IVsHierarchy</b> instance.
            </summary>
            <param name="vsHierarchy">The hierarchy associated with the project.</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> instance wrapping the <b>EnvDTE.Project</b> associated with <paramref name="vsHierarchy"/>.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.VsProject3">
            <summary>
            Gets the <b>Microsoft.VisualStudio.Shell.Interop.IVsProject3</b> associated with <see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/>.
            </summary>
            <value>The <b>Microsoft.VisualStudio.Shell.Interop.IVsProject3</b> associated with <see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.VsHierarchy">
            <summary>
            Gets the <b>Microsoft.VisualStudio.Shell.Interop.IVsHierarchy</b> associated with <see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/>.
            </summary>
            <value>The <b>Microsoft.VisualStudio.Shell.Interop.IVsHierarchy</b> associated with <see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.VsBuildPropertyStorage">
            <summary>
            Gets the <b>Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage</b> associated with <see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/>.
            </summary>
            <value>The <b>Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage</b> associated with <see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.VsHierarchyId">
            <summary>
            Gets the id if this instance within the hierarchy of the containing project (<see cref="P:Kodeo.Reegenerator.Wrappers.Project.VsHierarchy"/>).
            </summary>
            <value>The id if this instance within the hierarchy of the containing project. </value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.VsParentHierarchy">
            <summary>
            Gets the parent <b>Microsoft.VisualStudio.Shell.Interop.IVsHierarchy</b> for <see cref="P:Kodeo.Reegenerator.Wrappers.Project.VsHierarchy"/>.
            </summary>
            <value>The parent <b>Microsoft.VisualStudio.Shell.Interop.IVsHierarchy</b> for <see cref="P:Kodeo.Reegenerator.Wrappers.Project.VsHierarchy"/>.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.FromUniqueName(EnvDTE.Solution,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> class
            identified by its unique name within a specified <b>EnvDTE.Solution</b>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uniqueName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="solution"/> does not contain a project identified by <paramref name="uniqueName"/>.</exception>
            <param name="solution">The solution containing the project.</param>
            <param name="uniqueName">The unique name of the project.</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> instance wrapping the project indentified by <paramref name="uniqueName"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.FromUniqueName(EnvDTE.Solution,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> class
            identified by its unique name within a specified <b>EnvDTE.Solution</b>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uniqueName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="solution"/> does not contain a project identified by <paramref name="uniqueName"/>.</exception>
            <param name="solution">The solution containing the project.</param>
            <param name="uniqueName">The unique name of the project.</param>
            <param name="throwIfNotFound">Controls whether an error is thrown if the project cannot be found.</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> instance wrapping the project indentified by <paramref name="uniqueName"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.FromPath(EnvDTE.Solution,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> class
            located at a specified path and belonging to a specified <b>EnvDTE.Solution</b>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="solution"/> does not contain a project located at <paramref name="path"/>.</exception>
            <param name="solution">The solution containing the project.</param>
            <param name="path">The path of the project.</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> instance wrapping the project located at <paramref name="path"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.FromPath(EnvDTE.Solution,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> class
            located at a specified path and belonging to a specified <b>EnvDTE.Solution</b>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="solution"/> does not contain a project located at <paramref name="path"/>.</exception>
            <param name="solution">The solution containing the project.</param>
            <param name="path">The path of the project.</param>
            <param name="throwIfNotFound">Controls whether an error is thrown if the project cannot be found.</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Wrappers.Project"/> instance wrapping the project located at <paramref name="path"/>
            or null if the cannot be found.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.VsProject">
            <summary>
            Gets the <see cref="T:VSLangProj80.VSProject2"/> for the <see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/>
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.Name">
            <summary>
            Gets the name of the project.
            </summary>
            <value>The name of the project.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.UniqueName">
            <summary>
            Gets the unique name of the project.
            </summary>
            <value>The unique name of the project.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.FullName">
            <summary>
            Gets the full name of the project file.
            </summary>
            <value>The full name of the project file.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.RelativeToDefaultNamespace(System.String)">
            <summary>
            Gets the namespace relative to <see cref="P:Kodeo.Reegenerator.Wrappers.Project.DefaultNamespace"/>.
            </summary>
            <remarks>
            The method removes the project default namespace from the begining of <paramref name="nameSpace"/>.
            </remarks>
            <param name="nameSpace">The namespace to be transformed.</param>
            <value>The relative code namespace associated with the project item.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.ExpandPath(System.String,System.String)">
            <summary>
            Builds an absolute path from a path that is relative to a directory.
            It also replaces path directives with apropriate values.
            </summary>
            <remarks>
            The default directives are:
            <list type="table">
                <listheader>
                    <term>Directive</term>
                    <description>Value</description>
                </listheader>
                <item>
                    <term>$(ProjectDir)</term>
                    <description>The value of <see cref="P:Kodeo.Reegenerator.Wrappers.Project.FullPath"/>.</description>
                </item>
                <item>
                    <term>$(SolutionDir)</term>
                    <description>The directory of the solution <see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/> belongs to.</description>
                </item>
                <item>
                    <term>$(ReegeneratorDir)</term>
                    <description>The directory where Reegenerator has been installed. The value is <see cref="P:Kodeo.Reegenerator.Constants.ReegeneratorDir"/>.</description>
                </item>
                <item>
                    <term>$(FrameworkDir)</term>
                    <description>The .NET Framework. The value is <see cref="P:Kodeo.Reegenerator.Constants.FrameworkDir"/>.</description>
                </item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryRelativeTo"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="relativePath"/> is <c>null</c> or empty.</exception>
            <param name="directoryRelativeTo">The directory <paramref name="relativePath"/> is relative to.</param>
            <param name="relativePath">The path relative to <paramref name="directoryRelativeTo"/> to be transformed in full path.</param>
            <returns>The full path of <paramref name="relativePath"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.CompressPath(System.String,System.String)">
            <summary>
            Transforms an absolute path into a path relative to a directory, also replacing portions
            of the path with path directives.
            </summary>
            <remarks>
            The possible directives are:
            <list type="table">
                <listheader>
                    <term>Directive</term>
                    <description>Value</description>
                </listheader>
                <item>
                    <term>$(ProjectDir)</term>
                    <description>The value of <see cref="T:System.IO.Directory"/>.</description>
                </item>
                <item>
                    <term>$(SolutionDir)</term>
                    <description>The directory of the solution <see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/> belongs to.</description>
                </item>
                <item>
                    <term>$(ReegeneratorDir)</term>
                    <description>The directory where Reegenerator has been installed. The value is <see cref="P:Kodeo.Reegenerator.Constants.ReegeneratorDir"/>.</description>
                </item>
                <item>
                    <term>$(FrameworkDir)</term>
                    <description>The .NET Framework. The value is <see cref="P:Kodeo.Reegenerator.Constants.FrameworkDir"/>.</description>
                </item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryRelativeTo"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <param name="directoryRelativeTo">The directory relative to <paramref name="path"/>.</param>
            <param name="path">The path to be transformed in relative path.</param>
            <returns>The relative path of <paramref name="path"/>.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.RelativePathToSolution">
            <summary>
            Gets a path relative to solution (e.g. <code>$(SolutionDir)\ProjectFolder\ProjectName.csproj</code>).
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.CustomProperties">
            <summary>
            Gets a <see cref="T:Kodeo.Reegenerator.Wrappers.GlobalsDictionary"/> that can be used to store properties for
            the <see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/> project item wrapped by this instance.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.RunCustomTools(System.Boolean)">
            <summary>
            Invokes the custom tool for all the project items associated with a custom tool that belong to a <b>EnvDTE.Project</b>.
            </summary>
            <remarks>
            <see cref="F:Kodeo.Reegenerator.Constants.RgenTemplate"/> custom tools are invoked first and
            then all other custom tools.
            </remarks>
            <param name="runSynchronously">Determines whether to execute run the custom tools synchronously.</param>
            <returns>A <see cref="T:System.Threading.Thread"/> of the thread running the custom tools.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.CheckOut">
            <summary>
            Checks out the associated project (<see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/>).
            </summary>
            <remarks>
            It succeeds if <see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/> is not under source control or if <see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/> has already been checked out.
            </remarks>
            <exception cref="T:System.ApplicationException"><see cref="P:Kodeo.Reegenerator.Wrappers.Project.DteObject"/> cannot be checked out.</exception>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.Build">
            <summary>
            Builds a this project using the active configuration and returns the output path.
            </summary>
            <remarks>
            The path returned by this method depends on the current configuration. E.g. <c>project path\bin\Debug\project output.dll</c>
            if the Debug configuration is on.
            </remarks>
            <exception cref="T:Kodeo.Reegenerator.Wrappers.Project.BuildException">The project associated with this instance build has failed.</exception>
            <returns>The output path of the project.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.Project.BuildException">
            <summary>
            The exception that is thrown when a project build fails.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.BuildException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.Project.BuildException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.DefaultLanguage">
            <summary>
            Gets the default language of the project to generate code as.
            VB when it is a Visual Basic project, C# otherwise.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.CodeDomProvider">
            <summary>
            Returns a <see cref="T:System.CodeDom.Compiler.CodeDomProvider"/> instance for the language of this project.
            </summary>
            <remarks>
            The providers can be for VB, C#. Otherwise it defaults to the C# provider.
            </remarks>
            <returns>A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"/> instance.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.IsReegeneratorProject">
            <summary>
            Tells whether this project is a renderers library project.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.ReegeneratorReferenceVersion">
            <summary>
            Gets the version of Kodeo.Reegenerator.dll reference.
            </summary>
            <remarks>
            Returns <c>null</c> if not referenced or if the project is not a Reegenerator renderers library project.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.ConfigureAsRendererLibrary">
            <summary>
            Makes the changes (if necessary) to this project in order become a renderer library.
            </summary>
            <remarks>
            <see cref="P:Kodeo.Reegenerator.Wrappers.Project.IsReegeneratorProject"/> will become true, the current Kodeo.Reegenerator.dll library and the documentation xml
            are added or updated to the project and the reference to it is set.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.GetCodeElements``1">
            <summary>
            Gets the code elements of a specific type defined in this project.
            </summary>
            <typeparam name="T">The type of the code elements to be retrieved (e.g. EnvDTE.CodeInterface).</typeparam>
            <returns>A dictionary keys by the element's full name with value that is a list
            with all the partial definitions of type <typeparamref name="T"/> for the key.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.CodeModel">
            <summary>
            Gets the code model and makes sure it is synchronized before returning it.
            </summary>
            <remarks>
            Because of the synchronization, it is better to get this property in a local variable and then use the results from there.
            </remarks>
            <value>
            The code model.
            </value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.TraverseCodeElements``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Recursively explores a collection of code elements for elements of a specific type.
            This includes all code elements in external libraries referenced by the project.
            If you need to explore only code elements declared within the project use <see cref="M:Kodeo.Reegenerator.Wrappers.Project.TraverseHierarchyForCodeElements``1(System.Action{``0},System.Func{``0,System.Boolean})"/> instead.
            </summary>
            <typeparam name="T">The type to be explored (e.g. EnvDTE.CodeInteface).</typeparam>
            <param name="action">The action to be done when an element of type <typeparamref name="T"/> is found.</param>
            <param name="filter">Use this to filter out certain elements.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.TraverseHierarchyForCodeElements``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a hierarchy and performs action on code elements (e.g. EnvDTE.CodeInterface).
            </summary>
            <typeparam name="T">The type to be explored (e.g. EnvDTE.CodeInteface).</typeparam>
            <param name="action">The action to be done when an element of type <typeparamref name="T"/> is found.</param>
            <param name="filter">Use this to filter out certain elements.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.GetParentInterfaces(System.Collections.Generic.List{EnvDTE.CodeInterface})">
            <summary>
            Gets all the interfaces an interface inherits from.
            </summary>
            <param name="partials">The partial definitions of the interface.</param>
            <returns>A dictionary keyed by the full name of the interfaces inherited from.
            The values are lists of partial definition of the interfaces inherited from.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.GetParentInterfaces(System.Collections.Generic.List{EnvDTE.CodeInterface},System.Boolean)">
            <summary>
            Gets all the interfaces an interface inherits from.
            </summary>
            <param name="partials">The partial definitions of the interface.</param>
            <param name="recursive">If <c>false</c> the method returns the direct ancestors only.</param>
            <returns>A dictionary keyed by the full name of the interfaces inherited from.
            The values are lists of partial definition of the interfaces inherited from.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.GetParentInterfaces(System.Collections.Generic.List{EnvDTE.CodeClass})">
            <summary>
            Gets all the interfaces a class inherits from.
            </summary>
            <param name="partials">The partial definitions of the interface.</param>
            <returns>A dictionary keyed by the full name of the interfaces inherited from.
            The values are lists of partial definition of the interfaces inherited from.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.GetParentInterfaces(System.Collections.Generic.List{EnvDTE.CodeClass},System.Boolean)">
            <summary>
            Gets all the interfaces a class inherits from.
            </summary>
            <param name="partials">The partial definitions of the interface.</param>
            <param name="recursive">If <c>false</c> the method returns the direct ancestors only.</param>
            <returns>A dictionary keyed by the full name of the interfaces inherited from.
            The values are lists of partial definition of the interfaces inherited from.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.GetParentClasses(System.Collections.Generic.List{EnvDTE.CodeClass})">
            <summary>
            Gets all the classes a class inherits from.
            </summary>
            <param name="partials">The partial definitions of the class.</param>
            <returns>A dictionary keyed by the full name of the classes inherited from.
            The values are lists of partial definition of the classes inherited from.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.GetParentClasses(System.Collections.Generic.List{EnvDTE.CodeClass},System.Boolean)">
            <summary>
            Gets all the classes a class inherits from.
            </summary>
            <param name="partials">The partial definitions of the class.</param>
            <param name="recursive">If <c>false</c> the method returns the direct ancestors only.</param>
            <returns>A dictionary keyed by the full name of the classes inherited from.
            The values are lists of partial definition of the classes inherited from.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.InferComments(System.Collections.Generic.List{EnvDTE.CodeInterface})">
            <summary>
            Tries to automatically determine the comments of an interface.
            </summary>
            <param name="partials">The interface's partials.</param>
            <returns>The comment as defined in the interface's parents or empty if the interface has a comment already.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Project.InferComments(System.Collections.Generic.List{EnvDTE.CodeClass})">
            <summary>
            Tries to automatically determine the comments of a class.
            </summary>
            <param name="partials">The class partials.</param>
            <returns>The comment as defined in the class parent interfaces or empty if the class has a comment already.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.DefaultDesignerExtension">
            <summary>
            Gets the default designer extension.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.SolutionExplorerIcons">
            <summary>
            Gets the image list associated with this project's hierarchy that is used on solution explorer.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.SolutionExplorerIcon">
            <summary>
            Gets the icon displayed in solution explorer for this project.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.AbsoluteProjectDirectory">
            <summary>
            Gets the value of the <c>AbsoluteProjectDirectory</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.ActiveFileSharePath">
            <summary>
            Gets the value of the <c>ActiveFileSharePath</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.ActiveWebAccessMethod">
            <summary>
            Gets the value of the <c>ActiveWebAccessMethod</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.AspnetVersion">
            <summary>
            Gets the value of the <c>AspnetVersion</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.AssemblyFileVersion">
            <summary>
            Gets or sets the value of the <c>AssemblyFileVersion</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.AssemblyGuid">
            <summary>
            Gets or sets the value of the <c>AssemblyGuid</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.AssemblyKeyContainerName">
            <summary>
            Gets or sets the value of the <c>AssemblyKeyContainerName</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.AssemblyKeyProviderName">
            <summary>
            Gets or sets the value of the <c>AssemblyKeyProviderName</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.AssemblyName">
            <summary>
            Gets or sets the value of the <c>AssemblyName</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.AssemblyOriginatorKeyFile">
            <summary>
            Gets or sets the value of the <c>AssemblyOriginatorKeyFile</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.AssemblyOriginatorKeyFileType">
            <summary>
            Gets or sets the value of the <c>AssemblyOriginatorKeyFileType</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.AssemblyOriginatorKeyMode">
            <summary>
            Gets or sets the value of the <c>AssemblyOriginatorKeyMode</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.AssemblyType">
            <summary>
            Gets or sets the value of the <c>AssemblyType</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.AssemblyVersion">
            <summary>
            Gets or sets the value of the <c>AssemblyVersion</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.ComVisible">
            <summary>
            Gets or sets the value of the <c>ComVisible</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.Company">
            <summary>
            Gets or sets the value of the <c>Company</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.Copyright">
            <summary>
            Gets or sets the value of the <c>Copyright</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.DebugSecurityZoneURL">
            <summary>
            Gets or sets the value of the <c>DebugSecurityZoneURL</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.DefaultClientScript">
            <summary>
            Gets or sets the value of the <c>DefaultClientScript</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.DefaultHTMLPageLayout">
            <summary>
            Gets or sets the value of the <c>DefaultHTMLPageLayout</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.DefaultNamespace">
            <summary>
            Gets the default namespace associated with this project.
            </summary>
            <value>The default namespace associated with this project.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.DefaultTargetSchema">
            <summary>
            Gets or sets the value of the <c>DefaultTargetSchema</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.DelaySign">
            <summary>
            Gets or sets the value of the <c>DelaySign</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.Description">
            <summary>
            Gets or sets the value of the <c>Description</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.EnableSecurityDebugging">
            <summary>
            Gets or sets the value of the <c>EnableSecurityDebugging</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.ExcludedPermissions">
            <summary>
            Gets or sets the value of the <c>ExcludedPermissions</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.FileName">
            <summary>
            Gets or sets the value of the <c>FileName</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.FileSharePath">
            <summary>
            Gets or sets the value of the <c>FileSharePath</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.FullPath">
            <summary>
            Gets the value of the <c>FullPath</c> property.
            This is the directory where the project file is located.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.GenerateManifests">
            <summary>
            Gets or sets the value of the <c>GenerateManifests</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.LinkRepair">
            <summary>
            Gets or sets the value of the <c>LinkRepair</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.LocalPath">
            <summary>
            Gets or sets the value of the <c>LocalPath</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.ManifestCertificateThumbprint">
            <summary>
            Gets or sets the value of the <c>ManifestCertificateThumbprint</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.ManifestKeyFile">
            <summary>
            Gets or sets the value of the <c>ManifestKeyFile</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.ManifestTimestampUrl">
            <summary>
            Gets or sets the value of the <c>ManifestTimestampUrl</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.NeutralResourcesLanguage">
            <summary>
            Gets or sets the value of the <c>NeutralResourcesLanguage</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.OfflineURL">
            <summary>
            Gets the value of the <c>OfflineURL</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.OptionCompare">
            <summary>
            Gets or sets the value of the <c>OptionCompare</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.OptionExplicit">
            <summary>
            Gets or sets the value of the <c>OptionExplicit</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.OptionStrict">
            <summary>
            Gets or sets the value of the <c>OptionStrict</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.OutputFileName">
            <summary>
            Gets the value of the <c>OutputFileName</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.OutputType">
            <summary>
            Gets or sets the value of the <c>OutputType</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.PostBuildEvent">
            <summary>
            Gets or sets the value of the <c>PostBuildEvent</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.PreBuildEvent">
            <summary>
            Gets or sets the value of the <c>PreBuildEvent</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.Product">
            <summary>
            Gets or sets the value of the <c>Product</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.ProjectType">
            <summary>
            Gets the value of the <c>ProjectType</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.ReferencePath">
            <summary>
            Gets or sets the value of the <c>ReferencePath</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.RootNamespace">
            <summary>
            Gets or sets the value of the <c>RootNamespace</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.RunPostBuildEvent">
            <summary>
            Gets or sets the value of the <c>RunPostBuildEvent</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.ServerExtensionsVersion">
            <summary>
            Gets the value of the <c>ServerExtensionsVersion</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.SignAssembly">
            <summary>
            Gets or sets the value of the <c>SignAssembly</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.SignManifests">
            <summary>
            Gets or sets the value of the <c>SignManifests</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.StartupObject">
            <summary>
            Gets or sets the value of the <c>StartupObject</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.TargetZone">
            <summary>
            Gets or sets the value of the <c>TargetZone</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.Title">
            <summary>
            Gets or sets the value of the <c>Title</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.Trademark">
            <summary>
            Gets or sets the value of the <c>Trademark</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.TypeComplianceDiagnostics">
            <summary>
            Gets or sets the value of the <c>TypeComplianceDiagnostics</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.URL">
            <summary>
            Gets the value of the <c>URL</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.WebAccessMethod">
            <summary>
            Gets or sets the value of the <c>WebAccessMethod</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.WebServer">
            <summary>
            Gets the value of the <c>WebServer</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.WebServerVersion">
            <summary>
            Gets the value of the <c>WebServerVersion</c> property.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.Project.Win32ResourceFile">
            <summary>
            Gets or sets the value of the <c>Win32ResourceFile</c> property.
            </summary>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.ProjectItem">
            <summary>
            Wrapper class for an <b>EnvDTE.ProjectItem</b> object providing additional functionality.
            </summary>
            <remarks>
            Wraps a <b>EnvDTE.ProjectItem</b> instance and provides
            various helper functions.
            <para>
            You can create instances of this class by using the static methods provided by this class.
            You choose the method to use based on the information you have access to:
            <list type="table">
                <listheader>
                    <term>Information</term>
                    <description>Methods</description>
                </listheader>
                <item>
                    <term>The solution instance and the project item file path</term>
                    <description>Use <see cref="M:Kodeo.Reegenerator.Wrappers.ProjectItem.FromPath(EnvDTE.Solution,System.String)"/> or <see cref="M:Kodeo.Reegenerator.Wrappers.ProjectItem.FromPath(EnvDTE.Solution,System.String,System.Boolean)"/>.</description>
                </item>
                <item>
                    <term>The hierarchy of the parent project id of the project item within the parent project.</term>
                    <description>Use <see cref="M:Kodeo.Reegenerator.Wrappers.ProjectItem.FromHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)"/>.</description>
                </item>
                <item>
                    <term>An <b>EnvDTE.ProjectItem</b> instance</term>
                    <description>Use <see cref="M:Kodeo.Reegenerator.Wrappers.ProjectItem.FromProjectItem(EnvDTE.ProjectItem)"/>.</description>
                </item>
            </list>
            </para>
            <para>
            When you are authoring a renderer you normally inherit from the <see cref="T:Kodeo.Reegenerator.Generators.CodeRenderer"/> class
            which gives you access to the <see cref="P:Kodeo.Reegenerator.Generators.CodeRenderer.ProjectItem"/> property.
            Through this property you can get hold of the DTE object and then of the <b>EnvDTE.Solution</b>. 
            </para>
            </remarks>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.CustomProperties">
            <summary>
            Gets the <see cref="T:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary"/> associated with this item.
            </summary>
            <value>The <see cref="T:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary"/> associated with this item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.AutoGen">
            <summary>
            Tells whether this items is a generated item or not.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DependentUpon">
            <summary>
            The name of the project item this project item is dependent upon.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.LastGenOutput">
            <summary>
            The custom tool last generated dependent file.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.FromHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> class that wraps the <b>EnvDTE.ProjectItem</b>
            with a specified if within a <b>Microsoft.VisualStudio.Shell.Interop.IVsHierarchy</b> instance.
            </summary>
            <param name="vsHierarchy">The hierarchy containing the project item.</param>
            <param name="itemid">The id of the project item in the hierarchy.</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> instance wrapping the <b>EnvDTE.ProjectItem</b> with the <paramref name="itemid"/> within <paramref name="vsHierarchy"/>.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.VsHierarchyId">
            <summary>
            Gets the id if this instance within the hierarchy of the containing project (<see cref="P:Kodeo.Reegenerator.Wrappers.Project.VsHierarchy"/>).
            </summary>
            <value>The id if this instance within the hierarchy of the containing project. </value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.FromProjectItem(EnvDTE.ProjectItem)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> class from an <b>EnvDTE.ProjectItem</b> instance.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectItem"/> is <c>null</c>.</exception>
            <param name="projectItem">The <b>EnvDTE.ProjectItem</b> project item to be wrapped.</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> instance that wraps <paramref name="projectItem"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.#ctor(EnvDTE.ProjectItem)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> class from an <b>EnvDTE.ProjectItem</b> instance.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectItem"/> is <c>null</c>.</exception>
            <param name="projectItem">The <b>EnvDTE.ProjectItem</b> to be wrapped by this instance.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DteObject">
            <summary>
            Gets the <b>EnvDTE.ProjectItem</b> wrapped by this instance.
            </summary>
            <value>The <b>EnvDTE.ProjectItem</b> wrapped by this instance.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Solution">
            <summary>
            Gets the <b>EnvDTE.Solution</b> this project item belongs to.
            </summary>
            <value>The <b>EnvDTE.Solution</b> this project item belongs to.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.InProjectFileCapable">
            <summary>
            Tells whether this projects item can have the attached renderers info stored in its containing project.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Author">
            <summary>
            Gets the author name for this project item.
            </summary>
            <value>The author name for this project item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.BuildAction">
            <summary>
            Gets or sets the build action for this instance.
            </summary>
            <value>The build action for this instance.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.CopyToOutputDirectory">
            <summary>
            Gets or sets a value representing the option regarding copying this instance to the output directory.
            </summary>
            <value>A value representing the option regarding copying this instance to the output directory.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.CustomTool">
            <summary>
            Gets the name of the custom tool associated with this project item.
            </summary>
            <value>The name of the custom tool associated with this project item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.CustomToolNamespace">
            <summary>
            Gets or sets the namespace of the code to be generated from this instance.
            </summary>
            <value>The namespace of the code to be generated from this instance.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.CustomToolOutput">
            <summary>
            Gets the output of the custom tool.
            </summary>
            <value>The output of the custom tool.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DateCreated">
            <summary>
            Gets the creation date of this instance.
            </summary>
            <value>The creation date of this instance.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DateModified">
            <summary>
            Gets the modification date of this instance.
            </summary>
            <value>The modification date of this instance.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Extension">
            <summary>
            Gets the extension of this project item.
            </summary>
            <value>The extension of this project item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.FileName">
            <summary>
            Gets or sets the file name of this project item.
            </summary>
            <value>The file name of this project item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Filesize">
            <summary>
            Gets the size of this project item.
            </summary>
            <value>The size of this project item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.FullPath">
            <summary>
            Gets the full path of this project item.
            </summary>
            <value>The full path of this project item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.HTMLTitle">
            <summary>
            Gets the HTML title of this project item.
            </summary>
            <value>The HTML title of this project item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.IsCustomToolOutput">
            <summary>
            Gets a value indicating whether this project item is the output of a custom tool.
            </summary>
            <value>A value indicating whether this project item is the output of a custom tool.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.IsDependentFile">
            <summary>
            Gets a value indicating whether this project item is dependent on another project item.
            </summary>
            <value>A value indicating whether this project item is dependent on another project item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.IsDesignTimeBuildInput">
            <summary>
            Gets a value indicating whether this project item is input for design time.
            </summary>
            <value>A value indicating whether this project item is input for design time.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.IsLink">
            <summary>
            Gets a value indicating whether this project item is a link to another project item.
            </summary>
            <value>A value indicating whether this project item is a link to another project item</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.IsSharedDesignTimeBuildInput">
            <summary>
            Gets a value indicating whether this project item is input for shared design time.
            </summary>
            <value>A value indicating whether this project item is input for shared design time.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.ItemType">
            <summary>
            Gets the type of this project item.
            </summary>
            <value>The type of this project item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.LocalPath">
            <summary>
            Gets the local path this project item.
            </summary>
            <value>The local path of this project item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.ModifiedBy">
            <summary>
            Gets the name of the author whoc modified this project name.
            </summary>
            <value>The name of the author whoc modified this project name.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.SubType">
            <summary>
            Gets the sub type of this project item.
            </summary>
            <value>The sub type of this project item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.URL">
            <summary>
            Gets the URL of this project name.
            </summary>
            <value>The URL of this project name.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.FromPath(EnvDTE.Solution,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> class 
            located at a specified path and belonging to a specified <b>EnvDTE.Solution</b>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="solution"/> does not contain a project item located at <paramref name="path"/>.</exception>
            <param name="solution">The solution containing the project item.</param>
            <param name="path">The path of the project item.</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> instance wrapping the project item located at <paramref name="path"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.FromPath(EnvDTE.Solution,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> class 
            located at a specified path and belonging to a specified <b>EnvDTE.Solution</b>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="solution"/> does not contain a project item located at <paramref name="path"/>.</exception>
            <param name="solution">The solution containing the project item.</param>
            <param name="path">The path of the project item.</param>
            <param name="throwIfNotFound">if true and the item cannot be found, an error is thrown.</param>
            <returns>A <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> instance wrapping the project item located at <paramref name="path"/>
            or null if the item cannot be found.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.VsProjectItem">
            <summary>
            Gets the <see cref="T:VSLangProj.VSProjectItem"/> for the <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DteObject"/>
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Project">
            <summary>
            Gets a wrapper for the project this item belongs to.
            </summary>
            <value>A wrapper project (<see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Project"/>) for the <b>EnvDTE.Project</b> instance <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DteObject"/> belongs to.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.ParentProjectItem">
            <summary>
            Gets the parent project item if any.
            This will be not <c>null</c> for nested project items or for generated file that are dependent
            on the project item that has a custom tool attached.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Name">
            <summary>
            Gets the name of this project item.
            </summary>
            <remarks>The property will always return the <b>EnvDTE.ProjectItem.Name</b>.</remarks>
            <value>The name of this project item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Directory">
            <summary>
            Gets the directory of this project item.
            </summary>
            <value>The directory of this project item. This is the directory of <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.FullPath"/>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.CodeNamespace">
            <summary>
            Gets the code namespace associated with the project item.
            </summary>
            <remarks>
            If the project item has the <c>CustomToolNamespace</c> property set, it returns its value.
            You can set this property by activating the item properties and then set the value in the property editor.
            If the <c>CustomToolNamespace</c> property is not set, the method retrieves the 
            default namespace for the project it belongs to. It then calculates the item relative path
            to the project directory. The name of subfolder in the relative path becomes 
            a sub namespace in the returned namespace.
            </remarks>
            <value>The code namespace associated with the project item.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.CodeNamespaceRelative">
            <summary>
            Gets the code namespace associated with the project item 
            relative to the default namespace of the containing project.
            </summary>
            <value>The realtive code namespace associated with the project item.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.Save">
            <summary>
            Saves the project item if necessary.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.CloseWithPrompt">
            <summary>
            Closes a project item prompting the user to save it if open and modified.
            </summary>
            <remarks>
            If the project item is not open in any editor, the function returns <c>true</c>.
            If it is open, but not modified, it closes it with no prompt.
            <para>
            If the project item is open and modified, the user will be prompted to save it. 
            He can choose to to save it or not and the method will return true.
            If the user chooses to cancel, the method will return <c>false</c> and the 
            project item will remain open in the editor.
            </para>
            </remarks>
            <returns><c>true</c> if the project item has been closed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.RunCustomTool">
            <summary>
            Runs the custom tool on the <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DteObject"/> if the <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.CustomTool"/> is set.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.RunDirective(Kodeo.Reegenerator.Generators.RgenAttachedRenderer)">
            <summary>
            Executes one directive in the context of this project item.
            </summary>
            <param name="rendererDirective">The directive to execute.</param>
            <returns>The results of the directive execution.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DirectivesManager">
            <summary>
            Gets an instance of <see cref="T:Kodeo.Reegenerator.Generators.Renderer.DirectivesManager"/> contructed from this project item.
            </summary>
            <remarks>This property can be used to retreive information about attached renderers</remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.CheckOut">
            <summary>
            Checks out the wrapped <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DteObject"/>.
            </summary>
            <remarks>
            It succeeds if <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DteObject"/> is not under source control or 
            if <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DteObject"/> has already been checked out by the current user.
            </remarks>
            <exception cref="T:System.ApplicationException"><see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DteObject"/> cannot be checked out.</exception>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.FindDteObject(EnvDTE.Solution,System.String,System.Boolean)">
            <summary>
            Gets the <b>EnvDTE.ProjectItem</b> located at a specified path.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="solution"/> does not contain a project item located at <paramref name="path"/>.</exception>
            <param name="solution">The solution the project item is supposed to belong to.</param>
            <param name="path">The project item's path.</param>
            <param name="throwIfNotFound">Determines whether to throw an exception if no project item cannot be 
            found in <paramref name="solution"/> at the given <paramref name="path"/>.</param>
            <returns>a <b>EnvDTE.ProjectItem</b> instance or <c>null</c> if no project item cannot be found at the specified location.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.ExpandPath(System.String)">
            <summary>
            Builds an absolutute path from a path relative to the path of this project item. 
            </summary>
            <remarks>
            The accepted directives are:
            <list type="table">
                <listheader>
                    <term>Directive</term>
                    <description>Value</description>
                </listheader>
                <item>
                    <term>$(ProjectItemDir)</term>
                    <description>The value of <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Directory"/>.</description>
                </item>
                <item>
                    <term>$(ProjectItemFullPath)</term>
                    <description>The value of <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.FullPath"/>.</description>
                </item>
                <item>
                    <term>$(ProjectDir)</term>
                    <description>The directory that <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Project"/> belongs to.</description>
                </item>
                <item>
                    <term>$(SolutionDir)</term>
                    <description>The directory of the solution <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Project"/> belongs to.</description>
                </item>
                <item> 
                    <term>$(ReegeneratorDir)</term>
                    <description>The directory where Reegenerator has been installed. The value is <see cref="P:Kodeo.Reegenerator.Constants.ReegeneratorDir"/>.</description>
                </item>
                <item>
                    <term>$(FrameworkDir)</term>
                    <description>The .NET Framework. The value is <see cref="P:Kodeo.Reegenerator.Constants.FrameworkDir"/>.</description>
                </item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="relativePath"/> is <c>null</c> or empty.</exception>
            <param name="relativePath">The path that is relative to the path of this item.</param>
            <returns>The full path of the <paramref name="relativePath"/> relative to <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Directory"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.ExpandPath(System.String,System.String)">
            <summary>
            Builds an absolute path from a path that is relative to a directory.
            It also replaces path directives with apropriate values.
            </summary>
            <remarks>
            The default directives are:
            <list type="table">
                <listheader>
                    <term>Directive</term>
                    <description>Value</description>
                </listheader>
                <item>
                    <term>$(ProjectItemDir)</term>
                    <description>The value of <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Directory"/>.</description>
                </item>
                <item>
                    <term>$(ProjectItemFullPath)</term>
                    <description>The value of <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.FullPath"/>.</description>
                </item>
                <item>
                    <term>$(ProjectDir)</term>
                    <description>The directory that <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Project"/> belongs to.</description>
                </item>
                <item>
                    <term>$(SolutionDir)</term>
                    <description>The directory of the solution <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Project"/> belongs to.</description>
                </item>
                <item> 
                    <term>$(ReegeneratorDir)</term>
                    <description>The directory where Reegenerator has been installed. The value is <see cref="P:Kodeo.Reegenerator.Constants.ReegeneratorDir"/>.</description>
                </item>
                <item>
                    <term>$(FrameworkDir)</term>
                    <description>The .NET Framework. The value is <see cref="P:Kodeo.Reegenerator.Constants.FrameworkDir"/>.</description>
                </item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryRelativeTo"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="relativePath"/> is <c>null</c> or empty.</exception>
            <param name="directoryRelativeTo">The directory <paramref name="relativePath"/> is relative to.</param>
            <param name="relativePath">The path relative to <paramref name="directoryRelativeTo"/> to be transformed in full path.</param>
            <returns>The full path of <paramref name="relativePath"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.CompressPath(System.String,System.String)">
            <summary>
            Transforms an absolute path into a path relative to a directory, also replacing portions 
            of the path with path directives.
            </summary>
            <remarks>
            The possible directives are:
            <list type="table">
                <listheader>
                    <term>Directive</term>
                    <description>Value</description>
                </listheader>
                <item>
                    <term>$(ProjectItemDir)</term>
                    <description>The value of <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Directory"/>.</description>
                </item>
                <item>
                    <term>$(ProjectItemFullPath)</term>
                    <description>The value of <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.FullPath"/>.</description>
                </item>
                <item>
                    <term>$(ProjectDir)</term>
                    <description>The directory that <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Project"/> belongs to.</description>
                </item>
                <item>
                    <term>$(SolutionDir)</term>
                    <description>The directory of the solution <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Project"/> belongs to.</description>
                </item>
                <item> 
                    <term>$(ReegeneratorDir)</term>
                    <description>The directory where Reegenerator has been installed. The value is <see cref="P:Kodeo.Reegenerator.Constants.ReegeneratorDir"/>.</description>
                </item>
                <item>
                    <term>$(FrameworkDir)</term>
                    <description>The .NET Framework. The value is <see cref="P:Kodeo.Reegenerator.Constants.FrameworkDir"/>.</description>
                </item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryRelativeTo"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <param name="directoryRelativeTo">The directory relative to <paramref name="path"/>.</param>
            <param name="path">The path to be transformed in relative path.</param>
            <returns>The relative path of <paramref name="path"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.CompressPath(System.String)">
            <summary>
            Transforms an absolute path into a path relative to <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Directory"/>, also replacing portions 
            of the path with path directives.
            </summary>
            <remarks>
            The possible directives are:
            <list type="table">
                <listheader>
                    <term>Directive</term>
                    <description>Value</description>
                </listheader>
                <item>
                    <term>$(ProjectItemDir)</term>
                    <description>The value of <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Directory"/>.</description>
                </item>
                <item>
                    <term>$(ProjectItemFullPath)</term>
                    <description>The value of <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.FullPath"/>.</description>
                </item>
                <item>
                    <term>$(ProjectDir)</term>
                    <description>The directory that <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Project"/> belongs to.</description>
                </item>
                <item>
                    <term>$(SolutionDir)</term>
                    <description>The directory of the solution <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Project"/> belongs to.</description>
                </item>
                <item> 
                    <term>$(ReegeneratorDir)</term>
                    <description>The directory where Reegenerator has been installed. The value is <see cref="P:Kodeo.Reegenerator.Constants.ReegeneratorDir"/>.</description>
                </item>
                <item>
                    <term>$(FrameworkDir)</term>
                    <description>The .NET Framework. The value is <see cref="P:Kodeo.Reegenerator.Constants.FrameworkDir"/>.</description>
                </item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <param name="path">The path to be transformed in relative path.</param>
            <returns>The relative path of <paramref name="path"/>.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.RelativePathToSolution">
            <summary>
            Gets a path relative to solution (e.g. <code>$(SolutionDir)\ProjectFolder\ProjectName.csproj</code>).
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.RelativePathToProject">
            <summary>
            Gets a path relative to <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Project"/> (e.g. <code>$(ProjectDir)\ProjectItemFolder\ProjectItem.cs</code>).
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.Encoding">
            <summary>
            Gets the encoding of this project item if any.
            </summary>
            <value>
            The encoding of this project item.
            </value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.GetCurrentContent">
            <summary>
            Gets the content of a project item as a byte array. If the item is already opened in an editor, 
            it returns the opened version even if it is not saved.
            </summary>
            <remarks>
            The methods attempts to detect the encoding based on the underlying file, by reading the beginning of it. 
            When the file is opened in an editor, the edited string is returned encoded with the detected encoding or <see cref="P:System.Text.Encoding.Default"/> if none is detected.
            When the file is not opened in an editor, the result is the content of the file less the detected encoding preamble.
            </remarks>
            <returns>The current content of this project item</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.GetCurrentContentAsString">
            <summary>
            Gets the content of a project item as a string. If the item is already opened in an editor, 
            it returns the opened version even if it is not saved.
            </summary>
            <returns>The current content of this project item</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.SetCurrentContent(System.Byte[],System.Text.Encoding)">
            <summary>
            Sets the content of a project item as a string. If the item is already opened in an editor, 
            it edits the content of the edit window without saving the file.
            </summary>
            <remarks>
            <paramref name="content"/> must not contain the preamble of <paramref name="encoding"/> as it will be this method.
            </remarks>
            <param name="content">The new content of the project item.</param>
            <param name="encoding">The encoding used by <paramref name="content"/>.</param>
            <returns>The current content of this project item</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.SetCurrentContent(System.String)">
            <summary>
            Gets the content of a project item as a string. If the item is already opened in an editor, 
            it returns the opened version even if it is not saved.
            </summary>
            <param name="content">The new content of the project item.</param>
            <returns>The current content of this project item</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.GetCodeElements``1">
            <summary>
            Gets the code elements of a specific type defined in this project item.
            </summary>
            <typeparam name="T">The type of the code elements to be retrieved (e.g. EnvDTE.CodeInterface).</typeparam>
            <returns>A dictionary keyed by the elements' full names with values that are lists
            containing all the partial definitions with the same full name as the key.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.GetInterfaces">
            <summary>
            Gets the code interfaces defined in this project item.
            </summary>
            <returns>A dictionary keyed by the interfaces' full names with values that are lists 
            containing all the partial definitions with the same full name as the key.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.GetClasses">
            <summary>
            Gets the code classes defined in this project item.
            </summary>
            <returns>A dictionary keyed by the classes' full names with values that are lists 
            containing all the partial definitions with the same full name as the key.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.TraverseCodeElements``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Recursively explores a collection of code elements for elements of a specific type.
            This includes all code elements in external libraries referenced by the project.
            If you need to explore only code elements declared within the project use <see cref="M:Kodeo.Reegenerator.Wrappers.CodeElement.TraverseHierarchyForCodeElements``1(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Action{``0},System.Func{``0,System.Boolean})"/> instead.
            </summary>
            <typeparam name="T">The type to be explored (e.g. EnvDTE.CodeInteface).</typeparam>
            <param name="action">The action to be done when an element of type <typeparamref name="T"/> is found.</param>
            <param name="filter">Use this to filter out certain elements.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.CompressedPathToProject">
            <summary>
            Gets the compressed path of this item relative to its containing project (e.g.: $(ProjectDir)\item.txt).
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.CompressedPathToSolution">
            <summary>
            Gets the compressed path of this item relative to its containing solution (e.g.: $(SolutionDir)\Project\item.txt).
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.ApplyResults(Kodeo.Reegenerator.Generators.RenderResults,System.String,System.Boolean)">
            <summary>
            Creates or updates the child items of a project item as defined in a <see cref="T:Kodeo.Reegenerator.Generators.RenderResults"/> instance.
            </summary>
            <param name="renderResults">The results with the contents and the extensions of the subitems.</param>
            <param name="designerFileExtension">The extension for <see cref="P:Kodeo.Reegenerator.Generators.RenderResults.GeneratedCode"/>.</param>
            <param name="applyDesignerFile">Determines whether the designer file will be created as well. Should be <c>false</c> 
            when running in the context of a custom tool as Visual Studio will take care of it.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.SetChildContent(System.Byte[],System.Text.Encoding,System.String)">
            <summary>
            Creates or updates one child item of this project item.
            </summary>
            <remarks>
            <paramref name="generatedCode"/> must not contain the preamble of <paramref name="encoding"/> as it will be this method.
            </remarks>
            <param name="generatedCode">The content of the child item.</param>
            <param name="encoding">The encoding used by <paramref name="generatedCode"/>. Its preamble will be saved in the resulting file.</param>
            <param name="extension">The child item extension.</param>
            <returns>An instance of <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> for the child item.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.SolutionExplorerIcon">
            <summary>
            Gets the icon displayed in solution explorer for this project item.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.GetChildName(System.String)">
            <summary>
            Gets the designer file name starting from an extension. 
            If no extension is specified then uses the default extension of the project.
            </summary>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.ProjectItem.GetChildFullPath(System.String)">
            <summary>
            
            </summary>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.ProjectItem.FileCodeModel">
            <summary>
            Gets the file code model and makes sure it is synchronized before returning it.
            </summary>
            <remarks>
            Because of the synchronization, it is better to get this property in a local variable and then use the results from there.
            </remarks>
            <value>
            The file code model.
            </value>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.DteProperties">
            <summary>
            Wrapper class for <b>EnvDTE.Properties</b>.
            </summary>
            <remarks>
            Wraps a <b>EnvDTE.Properties</b> instance and provides
            helper functions for retrieving properties values.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.DteProperties.#ctor(EnvDTE.Properties)">
            <summary>
            Initializes a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.DteProperties"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="properties"/> is <c>null</c>.</exception>
            <param name="properties">The <b>EnvDTE.Properties</b> being wrapped.</param>
        </member>
        <member name="F:Kodeo.Reegenerator.Wrappers.DteProperties.DteObject">
            <summary>
            Gets the <b>EnvDTE.Properties</b> wrapped by this instance.
            </summary>
            <value>The <b>EnvDTE.Properties</b> wrapped by this instance.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.DteProperties.Item(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="key"/> cannot be found in the properties list.</exception>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified key. If the specified key is not
            found, an exception is raised.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.DteProperties.GetValue(System.String,System.Boolean)">
            <summary>
            Gets the value associated with a key and optionally throws an error if the key is not found.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="key"/> cannot be found in the properties list.</exception>
            <param name="key">The key of the value to get.</param>
            <param name="throwIfNotFound">If this parameter is true and the <paramref name="key"/> is not found the method throws an error.</param>
            <returns>The value associated with the specified key. If the specified key is not
            found and <paramref name="throwIfNotFound"/> is true, an exception is raised;
            if false, the method returns null.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.DteProperties.SetValue(System.String,System.Object)">
            <summary>
            Sets the value associated with a key.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c> or empty.</exception>
            <param name="key">The key of the value to get.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.DteProperties.GetValueAsString(System.String)">
            <summary>
            Gets the value associated with the specified key as a string.
            If the key is not found, the method returns the emtpy string.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the <paramref name="key"/> if found. If the key is not found, it returns the empty string.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.DteProperties.ContainsKey(System.String)">
            <summary>
            Checks if a given key has been is in the collection.
            </summary>
            <param name="key">The key to search for.</param>
            <returns>true if the key exists in the collection; false otherwise.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.Solution">
            <summary>
            Provides various helper methods like path manipulation or solution hierarchy parsing.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.GatherProjectItemsWithCustomTools(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Collections.Generic.List{Kodeo.Reegenerator.Wrappers.ProjectItem})">
            <summary>
            Retrieves all the project items that belong to an hierarchy with custom tools attached
            and adds them to a <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> list.
            </summary>
            <param name="hierarchy">The hierarchy containing the project items with custom tools.</param>
            <param name="items">The list of <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> to add the items to.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.AsyncExecuteList(System.Collections.IEnumerable,Kodeo.Reegenerator.Wrappers.Solution.AsyncExecute)">
            <summary>
            Asynchronously executes a specified method on each member of a list.
            </summary>
            <remarks>
            The method spawns a thread that enumerates all the object in the <paramref name="executeItems"/>.
            For each object, it call <paramref name="asyncExecute"/> passing the object as parameter.
            When calling this method, you will have to write your own <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.AsyncExecute"/> method, and pass
            it to this method. It will then be executed in the spawned thread context.
            <para>
            The method returns a <see cref="T:System.Threading.Thread"/> instance that you can use to wait for 
            execution end.
            If <paramref name="asyncExecute"/> returns <c>false</c>, 
            the list parsing will not continue with the reamaining objects from the list.
            </para>
            </remarks>
            <param name="executeItems">The list of items </param>
            <param name="asyncExecute">The method to be executed on each object from <paramref name="executeItems"/>.</param>
            <returns>A <see cref="T:System.Threading.Thread"/> that asynchronously processes the list.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.AsyncExecuteList(System.Collections.IEnumerable,Kodeo.Reegenerator.Wrappers.Solution.AsyncExecute,System.Action)">
            <summary>
            Asynchronously executes a specified method on each member of a list.
            </summary>
            <remarks>
            The method spawns a thread that enumerates all the object in the <paramref name="executeItems"/>.
            For each object, it call <paramref name="asyncExecute"/> passing the object as parameter.
            When calling this method, you will have to write your own <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.AsyncExecute"/> method, and pass
            it to this method. It will then be executed in the spawned thread context.
            <para>
            The method returns a <see cref="T:System.Threading.Thread"/> instance that you can use to wait for 
            execution end.
            If <paramref name="asyncExecute"/> returns <c>false</c>, 
            the list parsing will not continue with the reamaining objects from the list.
            </para>
            </remarks>
            <param name="executeItems">The list of items </param>
            <param name="asyncExecute">The method to be executed on each object from <paramref name="executeItems"/>.</param>
            <param name="finalAction">The method to be executed after <paramref name="asyncExecute"/> was executed on all <paramref name="executeItems"/>.</param>
            <returns>A <see cref="T:System.Threading.Thread"/> that asynchronously processes the list.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.Solution.AsyncExecute">
            <summary>
            Represents the method signature that can be passed to <see cref="M:Kodeo.Reegenerator.Wrappers.Solution.AsyncExecuteList(System.Collections.IEnumerable,Kodeo.Reegenerator.Wrappers.Solution.AsyncExecute,System.Action)"/> or <see cref="M:Kodeo.Reegenerator.Wrappers.Solution.AsyncExecuteList(System.Collections.IEnumerable,Kodeo.Reegenerator.Wrappers.Solution.AsyncExecute)"/>.
            </summary>
            <param name="itemToExecute">The current item in the list that was passed to <see cref="M:Kodeo.Reegenerator.Wrappers.Solution.AsyncExecuteList(System.Collections.IEnumerable,Kodeo.Reegenerator.Wrappers.Solution.AsyncExecute,System.Action)"/> or <see cref="M:Kodeo.Reegenerator.Wrappers.Solution.AsyncExecuteList(System.Collections.IEnumerable,Kodeo.Reegenerator.Wrappers.Solution.AsyncExecute)"/>.</param>
            <returns><c>true</c> to let <see cref="M:Kodeo.Reegenerator.Wrappers.Solution.AsyncExecuteList(System.Collections.IEnumerable,Kodeo.Reegenerator.Wrappers.Solution.AsyncExecute,System.Action)"/> or <see cref="M:Kodeo.Reegenerator.Wrappers.Solution.AsyncExecuteList(System.Collections.IEnumerable,Kodeo.Reegenerator.Wrappers.Solution.AsyncExecute)"/> carry on with the remaining items; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.AddDependency(Kodeo.Reegenerator.Wrappers.ProjectItem,Kodeo.Reegenerator.Wrappers.ProjectItem)">
            <summary>
            Adds a generation dependency between two project items. The dependency will show up in the <see cref="F:Kodeo.Reegenerator.Constants.RgenDependenciesFileName"/> 
            file located in the root of the solution.
            </summary>
            <param name="projectItem">The project item that depends on <paramref name="dependsOnProjectItem"/>.</param>
            <param name="dependsOnProjectItem">The project item that </param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.QueueRunCustomTools(System.Collections.Generic.List{Kodeo.Reegenerator.Wrappers.ProjectItem})">
            <summary>
            Queue a list of <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> for custom tool exeution.
            </summary>
            <param name="projectItems">The list of <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> to run the custom tool on.</param>
            <returns>A <see cref="T:System.Threading.Thread"/> of the thread running the custom tools.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.RunCustomTools(System.Collections.Generic.List{Kodeo.Reegenerator.Wrappers.ProjectItem},System.Boolean)">
            <summary>
            Runs the custom tools on a list of <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/>.
            </summary>
            <param name="projectItems">The list of <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> to run the custom tool on.</param>
            <param name="runSynchronously">Determines whether to execute run the custom tools synchronously.</param>
            <returns>A <see cref="T:System.Threading.Thread"/> of the thread running the custom tools.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.RgenFirst(System.Collections.Generic.List{Kodeo.Reegenerator.Wrappers.ProjectItem})">
            <summary>
            Builds a list of <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> having all the items attached
            to a <see cref="F:Kodeo.Reegenerator.Constants.RgenTemplate"/> custom tool on the first positions in the list.
            </summary>
            <param name="projectItems">The source list of <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> in no particular order.</param>
            <returns>A list of <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> having the items attached to <see cref="F:Kodeo.Reegenerator.Constants.RgenTemplate"/> at the beginning of the list.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.AddSolutionItem(EnvDTE.Solution,System.String)">
            <summary>
            Adds an item specified by path to a solution. If the item was already in the solution, it is retrieved.
            Otherwise the item will be added under a solution folder named <see cref="F:Kodeo.Reegenerator.Constants.ProductName" />.
            </summary>
            <param name="solution">The solution.</param>
            <param name="path">The path of the item to be added.</param>
            <returns>An instance of <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> corresponding to the items added or retrieved.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.CheckOut(EnvDTE.Solution,System.String)">
            <summary>
            Checks out a solution file for edit.
            </summary>
            <remarks>
            It still succeeds if the file is not under source control or if it has already been checked out.
            <para>
            This method applies to both project items and projects. If a project must be checked out,
            the path to the project file must be passed to this function.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ApplicationException"><paramref name="fileName"/> cannot be checked out.</exception>
            <param name="solution">The solution that provides the source control provider.</param>
            <param name="fileName">The full path of the file to be checked out.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.CheckOut(EnvDTE.Solution,System.String[])">
            <summary>
            Checks out several solution files for edit.
            </summary>
            <remarks>
            It still succeeds if the files are not under source control or if they has already been checked out.
            <para>
            This method applies to both project items and projects. If a project must be checked out,
            the path to the project file must be passed to this function.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> or <paramref name="filePaths"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">At least one of the files in the <paramref name="filePaths"/> array cannot be checked out.</exception>
            <param name="solution">The solution that provides the source control provider.</param>
            <param name="filePaths">The array of paths to the files to be checked out.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.InvokeInVisualStudioUIThread(System.Action)">
            <summary>
            Calls an action on the Visual Studio UI thread. If the caller is already on the UI thread
            then the call is made directly. Otherwise, the call is transferred onto the
            UI thread and this thread blocks until the call returns. If the UI thread
            throws an exception, that exception is transferred and rethrown on this thread.
            </summary>
            <param name="action">The action to be executed</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.InvokeInVisualStudioUIThread``1(System.Func{``0})">
            <summary>
            Calls an action on the Visual Studio UI thread. If the caller is already on the UI thread
            then the call is made directly. Otherwise, the call is transferred onto the
            UI thread and this thread blocks until the call returns. If the UI thread
            throws an exception, that exception is transferred and rethrown on this thread.
            </summary>
            <param name="method">The method to be executed</param>
            <returns>The result of executing <paramref name="method"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.GetGlobalService``1">
            <summary>
            Gets a global service.
            </summary>
            <typeparam name="T">The type of the service to be returned.</typeparam>
            <returns>A service of the specified type.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.GetHierarchy(EnvDTE.Solution)">
            <summary>
            Retrieves the <b>Microsoft.VisualStudio.Shell.Interop.IVsHierarchy</b> associated with an <b>EnvDTE.Solution</b>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <param name="solution">The <b>EnvDTE.Solution</b> to retrieve hierarchy for.</param>
            <returns>The <b>Microsoft.VisualStudio.Shell.Interop.IVsHierarchy</b> associated with <paramref name="solution"/>.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode">
            <summary>
            Represents the signature of the method that gets called by 
            <see cref="M:Kodeo.Reegenerator.Wrappers.Solution.TraverseHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode,Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren,Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode,System.Object)"/> 
            before processing a hierarchy node.
            </summary>
            <remarks>
            The returned context will be passed to <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren"/> and <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode"/> when executed for the same project item.
            Implementers can use contexts to pass information between the three functions.
            </remarks>
            <param name="vsHierarchy">The hierarchy being processed by 
            <see cref="M:Kodeo.Reegenerator.Wrappers.Solution.TraverseHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode,Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren,Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode,System.Object)"/>.</param>
            <param name="itemId">The id of the item being processed.</param>
            <param name="hierarchyPath">The path of the parent of the item being processed. This is a string of item id seperated by <c>\</c>.</param>
            <param name="context">The current processing context as returned from the execution of 
            <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren"/> over parant item of the current item or as passed to 
            <see cref="M:Kodeo.Reegenerator.Wrappers.Solution.TraverseHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode,Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren,Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode,System.Object)"/> 
            for the first node in the hierarachy.</param>
            <returns>The new processing context that will be passed to <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren"/> and <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode"/>.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren">
            <summary>
            Represents the signature of the method that gets called by 
            <see cref="M:Kodeo.Reegenerator.Wrappers.Solution.TraverseHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode,Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren,Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode,System.Object)"/> 
            before processing the children of a hierarchy node.
            </summary>
            <remarks>
            The returned context will be passed to <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode"/>, <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren"/> and <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode"/>
            when processing the children of the current item.
            </remarks>
            <param name="vsHierarchy">The hierarchy being processed by 
            <see cref="M:Kodeo.Reegenerator.Wrappers.Solution.TraverseHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode,Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren,Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode,System.Object)"/>.</param>
            <param name="itemId">The id of the item being processed.</param>
            <param name="hierarchyPath">The path of the item being processed. This is a string of item id seperated by <c>\</c>.</param>
            <param name="context">The current processing context as returned from <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode"/>.</param>
            <returns>The new processing context that will be passed as context to 
            <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode"/>, <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren"/> and <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode"/> 
            when processing the children of the current item.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode">
            <summary>
            Represents the signature of the method that gets called by 
            <see cref="M:Kodeo.Reegenerator.Wrappers.Solution.TraverseHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode,Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren,Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode,System.Object)"/> 
            after all the children of the node have been processed. 
            </summary>
            <remarks>
            This is the last opportunity for callers to intervene in the processing of a project item.
            </remarks>
            <param name="vsHierarchy">The hierarchy being processed by 
            <see cref="M:Kodeo.Reegenerator.Wrappers.Solution.TraverseHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode,Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren,Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode,System.Object)"/>.</param>
            <param name="itemId">The id of the item being processed.</param>
            <param name="hierarchyPath">The path of the item being processed. This is a string of item id seperated by <c>\</c>.</param>
            <param name="context">The current processing context as returned from <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode"/>.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.TraverseHierarchy(EnvDTE.Solution,Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode,Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren,Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode,System.Object)">
            <summary>
            Traverses the hierarchy of a <b>EnvDTE.Solution</b> and launches methods 
            for each hierarchy item at various processing moments.
            </summary>
            <remarks>
            The method recursively parses all the items of a solution. While parsing, it calls 
            <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode"/>, <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren"/> and <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode"/>
            method at specific processing moments.
            The methods execute within a context that can be modify according to the caller's requirements.
            <para>
            For subhierarchies (e.g. projects), there are differences in passed parameters:
            beforeProcessingNode(parent hierarchy, subhierarchy id within the parent hierarchy, parent hierarchy path, context)
            beforeProcessingChildren(subhierarchy, root id, subhierarchy path, context)
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <param name="solution">The solution to process.</param>
            <param name="beforeProcessingNode"><see cref="T:Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode"/> method that gets called when the processing of a node starts.</param>
            <param name="beforeProcessingChildren"><see cref="T:Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren"/> method that gets called just prior to processing the children of a node.</param>
            <param name="afterProcessingNode"><see cref="T:Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode"/> method that gets called after all node children have been processed.</param>
            <param name="context">The initial processing context.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.TraverseHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode,Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren,Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode,System.Object)">
            <summary>
            Traverses a <b>Microsoft.VisualStudion.Shell.Interop.IVsHierarchy</b> instance and 
            launches methods for each hierarchy item at various processing moments.
            </summary>
            <remarks>
            The method recursively parses all the items of a solution. While parsing, it calls 
            <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode"/>, <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren"/> and <see cref="T:Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode"/>
            method at specific processing moments.
            The methods execute within a context that can be modify according to the caller's requirements.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="vsHierarchy"/> is <c>null</c>.</exception>
            <param name="vsHierarchy">The hierarchy to process.</param>
            <param name="startProcessingNode"><see cref="T:Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode"/> method that gets called when the processing of a node starts.</param>
            <param name="beforeProcessingChildren"><see cref="T:Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren"/> method that gets called just prior to processing the children of a node.</param>
            <param name="endProcessingNode"><see cref="T:Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode"/> method that gets called after all node children have been processed.</param>
            <param name="context">The initial processing context.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.EnumHierarchyItems(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode,Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren,Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode,System.Object)">
            <summary>
            Enumerates over the hierarchy items for the given hierarchy traversing into nested hierarchies.
            </summary>
            <param name="vsHierarchy">hierarchy to enmerate over.</param>
            <param name="itemid">item id of the hierarchy</param>
            <param name="hierarchyPath">The path of the <paramref name="itemid"/> (e.g. solutionid\projectid\folderid). Does not include <paramref name="itemid"/>.</param>
            <param name="startProcessingNode"><see cref="T:Kodeo.Reegenerator.Wrappers.Solution.StartProcessingNode"/> method that gets called when the processing of a node starts.</param>
            <param name="beforeProcessingChildren"><see cref="T:Kodeo.Reegenerator.Wrappers.Solution.BeforeProcessingChildren"/> method that gets called just prior to processing the children of a node.</param>
            <param name="endProcessingNode"><see cref="T:Kodeo.Reegenerator.Wrappers.Solution.EndProcessingNode"/> method that gets called after all node children have been processed.</param>
            <param name="context">The initial processing context.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.GetItemId(System.Object)">
            <summary>
            Gets the item id.
            </summary>
            <param name="pvar">VARIANT holding an itemid.</param>
            <returns>Item Id of the concerned node</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.GetDTESelectedItems(EnvDTE.DTE,System.IntPtr@,Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION[]@)">
            <summary>
            Gets the items selected in the active solution of Visual Studio.
            </summary>
            <param name="dte">The <b>EnvDTE.DTE</b> instance.</param>
            <param name="singleHierarchyPtr">The hierarchy if the selected items belong to one hierarchy only.</param>
            <param name="vsItemSelection">An array of selected items.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.GetDTESelectedItemsCount(EnvDTE.DTE)">
            <summary>
            Gets the number of selected items in the solution explorer.
            </summary>
            <param name="dte">The <b>EnvDTE.DTE</b> instance.</param>
            <returns>The number of selected items in the solution explorer.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.GetHierarchyPath(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
            <summary>
            Gets the hierarchy path of an item. 
            This method walks backwards in the hierarchy chain and builds a path like
            <c>VSConstants.VSITEMID_ROOT\Parent\</c><paramref name="itemId"/>.
            </summary>
            <remarks>
            The returned value is comprised of hierarchy ids. 
            It does not refer to the location on disk.
            </remarks>
            <param name="vsHierarchy">The hierarchy instance.</param>
            <param name="itemId">The item id.</param>
            <returns>The hierarchy path of <paramref name="itemId"/></returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.GetSolutionProjects(EnvDTE.Solution)">
            <summary>
            Gets a list of all the projects belonging to a given solution.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <param name="solution">The solution containing the projects to be returned.</param>
            <returns>A list of all the projects belonging to <paramref name="solution"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.GetSolutionReegeneratorProjects(EnvDTE.Solution)">
            <summary>
            Gets a list of all the Reegenerator projects belonging to a given solution.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <param name="solution">The solution containing the projects to be returned.</param>
            <returns>A list of all the Reegenerator projects belonging to <paramref name="solution"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.CompressPath(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},EnvDTE.Solution)">
            <summary>
            Transforms an absolute path into a path relative to a directory, also replacing portions 
            of the path with path directives.
            </summary>
            <remarks>
            The accepted path directives are:
            <list type="table">
                <listheader>
                    <term>Directive</term>
                    <description>Value</description>
                </listheader>
                <item>
                    <term>$(SolutionDir)</term>
                    <description>The directory of the <paramref name="solution"/> solution file.</description>
                </item>
                <item>
                    <term>$(ReegeneratorDir)</term>
                    <description>The directory where Reegenerator has been installed. The value is <see cref="P:Kodeo.Reegenerator.Constants.ReegeneratorDir"/>.</description>
                </item>
                <item>
                    <term>$(FrameworkDir)</term>
                    <description>The .NET Framework. The value is <see cref="P:Kodeo.Reegenerator.Constants.FrameworkDir"/>.</description>
                </item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <param name="directoryRelativeTo">The path that is relative to this item's path.</param>
            <param name="path">The path that is to be transformed in relative path. Can be null.</param>
            <param name="replacements">An additional dictionary of replacements.</param>
            <param name="solution">The solution that will provide the $(SolutionDir) path directive.</param>
            <returns>The compressed form of <paramref name="path"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.BuildRelativePath(System.String,System.String)">
            <summary>
            Transforms a path into path relative to a directory.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <param name="directoryRelativeTo">The path that is relative to this item's path. Can be <c>null</c>.</param>
            <param name="path">The path to be transformed in relative path.</param>
            <returns>The path relative to <paramref name="directoryRelativeTo"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.SolutionDir(EnvDTE.Solution)">
            <summary>
            Gets the directory of a solution.
            </summary>
            <param name="solution">The solution.</param>
            <returns>The directory of <paramref name="solution"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.Solution.ExpandPath(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},EnvDTE.Solution)">
            <summary>
            Builds an absolute path from a path that is relative to a directory.
            It also replaces path directives with apropriate values.
            </summary>
            <remarks>
            The default directives are:
            <list type="table">
                <listheader>
                    <term>Directive</term>
                    <description>Value</description>
                </listheader>
                <item>
                    <term>$(SolutionDir)</term>
                    <description>The directory of the <paramref name="solution"/> solution file.</description>
                </item>
                <item> 
                    <term>$(ReegeneratorDir)</term>
                    <description>The directory where Reegenerator has been installed. The value is <see cref="P:Kodeo.Reegenerator.Constants.ReegeneratorDir"/>.</description>
                </item>
                <item>
                    <term>$(FrameworkDir)</term>
                    <description>The .NET Framework. The value is <see cref="P:Kodeo.Reegenerator.Constants.FrameworkDir"/>.</description>
                </item>
            </list>
            <para>
            You can pass custom path directives by passing a not empty <paramref name="replacements"/> dictionary.
            The function will search each key occurance in the <paramref name="relativePath"/> and replace it with the 
            associated value from the replacements dictionary.
            Passing the default directives into the  <paramref name="replacements"/> 
            dictionary will generate an exception.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryRelativeTo"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="relativePath"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <param name="directoryRelativeTo">The directory <paramref name="relativePath"/> is relative to.</param>
            <param name="relativePath">The path relative to <paramref name="directoryRelativeTo"/> to be transformed in absolute path.</param>
            <param name="replacements">An optional dictionary of replacements.</param>
            <param name="solution">The <b>EnvDTE.Solution</b> that provides the value for <c>$(SolutionDir)</c>.</param>
            <returns>The full path of <paramref name="relativePath"/>.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary">
            <summary>
            Provides the functionality of <b>Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage</b> as a dictionary.
            </summary>
            <remarks>
            Can be used to persist properties for project items. The project item is identified by its hierarchy id in the 
            containing project hierarchy. 
            The values of this dictionary are stored in the project file as build properties for the project
            identified by <see cref="P:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.HierarchyId"/>.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage,System.UInt32)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="vsBuildPropertyStorage"/> is <c>null</c>.</exception>
            <param name="vsBuildPropertyStorage">The build property storage. This is the hierarchy of the project containing the project item.</param>
            <param name="hierarchyId">The id of the project item in the <paramref name="vsBuildPropertyStorage"/>.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.VsBuildPropertyStorage">
            <summary>
            Gets the build property storage of this instance.
            </summary>
            <remarks>
            This property is actually the hierarchy of the project that contains the project item.
            This is because the properties are stored in the project file as 
            MSBuild properties associated with <see cref="P:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.HierarchyId"/>. 
            </remarks>
            <value>The hierarcy of the project whose project file stores the MSBuild properties.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.HierarchyId">
            <summary>
            Gets the id of the project item whose properties are to be exposed.
            </summary>
            <value>The id of the project item whose properties are to be exposed.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.Add(System.String,System.String)">
            <summary>
            Adds an element with the provided key and value to this instance.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key as <paramref name="key"/> already exists in the dictionary.</exception>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains an element with the specified key. 
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c> or empty.</exception>
            <param name="key">The key to locate in the dictionary.</param>
            <returns><c>true</c> if the dictionary contains an element with the key; otherwise, <c>false</c>. </returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.Keys">
            <summary>
            Gets a collection containing the keys of the IDictionary.
            </summary>
            <remarks>
            The order of the keys in the returned collection is unspecified, 
            but it is guaranteed to be the same order as the corresponding values 
            in the collection returned by the <see cref="P:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.Values"/> property.
            </remarks>
            <value>A collection containing the keys of the dictionary.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the dictionary.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c> or empty.</exception>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element is successfully removed; otherwise, <c>false</c>. This method also returns <c>false</c> if key was not found in the original IDictionary. </returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c> or empty.</exception>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, 
            if the key is found; otherwise, <c>null</c>. 
            This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the dictionary contains an element with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
            <remarks>
            The order of the values in the returned collection is unspecified, 
            but it is guaranteed to be the same order as the corresponding keys in the 
            collection returned by the <see cref="P:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.Keys"/> property.
            </remarks>
            <value>A collection containing the keys of the dictionary.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key. 
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException">value is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> cannot be found in the dictionary.</exception>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds an item to the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.</exception>
            <param name="item">The item to be added to the collection.</param>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The item to locate in the collection.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the collection; oterwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index. 
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source collection is greater than the available space 
            from <paramref name="arrayIndex"/> to the end of the destination.
            </exception>
            <param name="array">The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The number of elements contained in the collection.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>Always <c>false</c>.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the first occurrence of an item from the collection. 
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns><c>true</c> if the item was successfuly removed from the collection; otherise, <c>false</c>. 
            The method also returns <c>false</c> if <paramref name="item"/> is not found in the original collection.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.VsBuildPropertiesDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <b>System.Collections.IEnumerator</b> that iterates through a collection. 
            </summary>
            <returns>An <b>System.Collections.IEnumerator</b> instance that can be used to iterate through the collection. </returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.XmlDocument">
            <summary>
            Wrapper class for a <b>EnvDTE.ProjectItem</b> that is an XML file.
            </summary>
            <remarks>
            Inherits from <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> and provides the ability to access
            the contents of the wrapped project item as an <see cref="T:System.Xml.XmlDocument"/>.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlDocument.FromPath(EnvDTE.Solution,System.String)">
            <summary>
            Creates an instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.XmlDocument"/> class from a given path.
            </summary>
            <remarks>
            The method tries to find the project item located at <paramref name="path"/>
            in the solution <paramref name="solution"/>.
            It then creates the new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.XmlDocument"/> class using the project item.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="solution"/> does not contain a project item located at <paramref name="path"/>.</exception>
            <param name="solution">The <b>EnvDTE.Solution</b> the XML file is included in.</param>
            <param name="path">The full path of the XML file being loaded.</param>
            <returns>An <see cref="T:Kodeo.Reegenerator.Wrappers.XmlDocument"/> instance that wraps an XML file located at the given path 
            and included in the given solution.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlDocument.FromProjectItem(EnvDTE.ProjectItem)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.XmlDocument"/> class from a <b>EnvDTE.ProjectItem</b> instance.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectItem"/> is <c>null</c>.</exception>
            <param name="projectItem">A <b>EnvDTE.ProjectItem</b> instance that is an XML file.</param>
            <returns>An <see cref="T:Kodeo.Reegenerator.Wrappers.XmlDocument"/> instance that wraps <paramref name="projectItem"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlDocument.FromProjectItem(Kodeo.Reegenerator.Wrappers.ProjectItem)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.XmlDocument"/> class from a <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> instance.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectItem"/> is <c>null</c>.</exception>
            <param name="projectItem">A <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> instance that is an XML file.</param>
            <returns>An <see cref="T:Kodeo.Reegenerator.Wrappers.XmlDocument"/> instance that wraps <paramref name="projectItem"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlDocument.#ctor(EnvDTE.ProjectItem)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.XmlDocument"/> class based on a project item.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectItem"/> is <c>null</c>.</exception>
            <param name="projectItem">An project item that is an XML file.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlDocument.Content">
            <summary>
            Gets the XML document as loaded from the wrapped project item.
            </summary>
            <remarks>
            The XML document is loaded when first accessed from <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DteObject"/> project item.
            Any subsequent accesses will use the cached XML document.
            </remarks>
            <value>The XML document as loaded from the wrapped project item.</value>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.XmlQualifiedName">
            <summary>
            Wrapper class for <see cref="T:System.Xml.XmlQualifiedName"/> 
            providing added functionality.
            </summary>
            <remarks>
            This class helps to qualifying XML schema names. 
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.#ctor(System.Xml.XmlQualifiedName)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.XmlQualifiedName"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlQualifiedName"/> is <c>null</c>.</exception>
            <param name="xmlQualifiedName">The XML schema object that defines the xmlQualifiedName.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.Content">
            <summary>
            Gets the wrapped <see cref="T:System.Xml.XmlQualifiedName"/> object.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.Name">
            <summary>
            Gets the name of the <see cref="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.Content"/>.
            </summary>
            <value>The name of the <see cref="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.Content"/>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.XmlNamespace">
            <summary>
            Gets the XML namespace of the <see cref="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.Content"/>. 
            </summary>
            <remarks>
            Although there is no programmatic link between <see cref="T:Kodeo.Reegenerator.Wrappers.XmlQualifiedName"/> and <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/>,
            the qualified name is generally created from the contents of an XML schema. 
            The <see cref="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.XmlNamespace"/> can be different than the <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchema.TargetNamespace"/>
            of the schema it belongs to.
            </remarks>
            <value>The XML namespace of the <see cref="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.Content"/>. </value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.XmlFullName">
            <summary>
            Gets the full XML name of this instance (XmlNameSpace:Description).
            </summary>
            <remarks>
            This property always returns <see cref="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.XmlNamespace"/>:<see cref="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.Name"/>.
            </remarks>
            <value>The full XML name of this instance</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.XmlSchema">
            <summary>
            Wrapper class for a <b>EnvDTE.Project</b> that is an XML schema file.
            </summary>
            <remarks>
            Inherits from <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> and provides the ability to access
            the contents of the wrapped project item as an <see cref="T:System.Xml.Schema.XmlSchema"/>.
            <para>
            The <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> will always be bound to an <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchema.XmlSchemaSet"/> instance.
            When you create an <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> instance using a static function, an <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchema.XmlSchemaSet"/> instance
            is created. The required XML schema is created within the set and then returned to the caller.
            </para>
            <para>
            The <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchema.XmlSchemaSet"/> will load all the XML schemas referenced directly or indirectly and will compile
            the resulting set, thus resolving all XML type references.
            </para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlSchema.FromPath(EnvDTE.Solution,System.String)">
            <summary>
            Creates an <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> from a given path and a solution instance.
            </summary>
            <remarks>
            The <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> instance is created in an <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchema.XmlSchemaSet"/> instance
            that will look into <paramref name="solution"/> to find the included XML schemas.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <param name="solution">The <b>EnvDTE.Solution</b> the schema file is included in.</param>
            <param name="path">The full path of the schema being loaded.</param>
            <returns>An <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> instance that wraps a schema file located at the given path and included in the given solution.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlSchema.FromProjectItem(EnvDTE.ProjectItem)">
            <summary>
            Creates a <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> from a <b>EnvDTE.ProjectItem</b>.
            </summary>
            <remarks>
            The <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> instance is created in an <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchema.XmlSchemaSet"/> instance
            that will use <paramref name="projectItem"/> to resolve included XML schemas.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectItem"/> is <c>null</c>.</exception>
            <param name="projectItem">The <b>EnvDTE.ProjectItem</b> that contains the xsd schema.</param>
            <returns>An <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> instance that wraps <paramref name="projectItem"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlSchema.FromProjectItem(Kodeo.Reegenerator.Wrappers.ProjectItem)">
            <summary>
            Creates a <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> from a <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/>.
            </summary>
            <remarks>
            The <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> instance is created in an <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchema.XmlSchemaSet"/> instance
            that will use <paramref name="projectItem"/> to resolve included XML schemas.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectItem"/> is <c>null</c>.</exception>
            <param name="projectItem">The <see cref="T:Kodeo.Reegenerator.Wrappers.ProjectItem"/> that contains the xsd schema.</param>
            <returns>An <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> instance that wraps <paramref name="projectItem"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlSchema.#ctor(EnvDTE.ProjectItem,Kodeo.Reegenerator.Wrappers.XmlSchemaSet,System.Xml.Schema.XmlSchema)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> class.
            Loads the wrapped schema from a file and then adds it to the XML schema set.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchema.XmlSchemaSet">
            <summary>
            Gets the schema set this schema belongs to.
            </summary>
            <value>The schema set this schema belongs to.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchema.Content">
            <summary>
            Gets the <see cref="T:System.Xml.Schema.XmlSchema"/> instance loaded from <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DteObject"/>.
            </summary>
            <value>The <see cref="T:System.Xml.Schema.XmlSchema"/> instance loaded from <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.DteObject"/>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchema.Id">
            <summary>
            Gets the schema id as defined in the XML schema file or
            the name of the schema file if the ID is not defined.
            </summary>
            <value>The schema id as defined in <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchema.Content"/></value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchema.XmlNamespace">
            <summary>
            Gets the default XML namespace as defined in the XML schema file.
            </summary>
            <value>The default XML namespace as defined in <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchema.Content"/>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchema.TargetNamespace">
            <summary>
            Gets the target XML namespace as defined  in the XML schema file.
            </summary>
            <value>The target XML namespace as defined in <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchema.Content"/>.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchema.Namespaces">
            <summary>
            Gets a dictionary containing all the XML namespaces defined  in the XML schema file.
            </summary>
            <remarks>
            The keys of the dictionary are the names of the XML namespaces and the values are the XML namespaces.
            E.g. a <c>name=urn:Solution.name</c> defined in <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchema.Content"/> becomes a <c>name</c>/<c>urn:Solution.name</c> dictionary pair.
            If the xmlns namespace is not defined in the schema, it is artificially added to the dictionary with a default value of empty string.
            </remarks>
            <value>A dictionary containing all the XML namespaces defined in <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchema.Content"/>.</value>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.XmlSchemaSet">
            <summary>
            Wrapper class for <see cref="T:System.Xml.Schema.XmlSchemaSet"/> providing additional functionality.
            </summary>
            <remarks>
            This class is used to aggregate all schema that referenced directly or indirectly by an XML schema.
            When an <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> is created, an instance of <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchemaSet"/> is firstly created and
            the initial schema is loaded into it. Then all XML schemas referenced directly or indirectly are loaded as well.
            The resulting set is then compiled to make sure that schemas resolve properly.
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.#ctor(EnvDTE.Solution)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchemaSet"/> class.
            </summary>
            <remarks>
            The <paramref name="solution"/> will be used to find the XML schemas refered by other schemas.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="solution"/> is <c>null</c>.</exception>
            <param name="solution">The <b>EnvDTE.Solution</b> where this instance will look for included schemas project items.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.Solution">
            <summary>
            Get the <b>EnvDTE.Solution</b> that contains all the XML schemas in this set.
            </summary>
            <value>The <b>EnvDTE.Solution</b> that contains all the XML schemas in this set.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.Content">
            <summary>
            Gets the <see cref="T:System.Xml.Schema.XmlSchemaSet"/> wrapped by this instance.
            </summary>
            <value>The <see cref="T:System.Xml.Schema.XmlSchemaSet"/> wrapped by this instance.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.XmlSchemas">
            <summary>
            Gets a dictionary containing the <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> instances that belong to this set.
            </summary>
            <remarks>
            The dictionary is keyed on the XML namespaces of the contained schemas (see <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchema.XmlNamespace"/>).
            </remarks>
            <value>The dictionary of <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> that belong to this set.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.DefaultXmlSchema">
            <summary>
            Gets the first loaded <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> in this set.
            </summary>
            <value>The first loaded <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> in this set.</value>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.GetSchemaByProjectItem(EnvDTE.ProjectItem)">
            <summary>
            Loads an <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> into this set from a <b>EnvDTE.ProjectItem</b>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectItem"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The solution <paramref name="projectItem"/> belongs to is not the 
            same as <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.Solution"/>.</exception>
            <param name="projectItem">The project item to be loaded as an XML schema into this schema set.</param>
            <returns>The <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> as loaded from the <paramref name="projectItem"/>.</returns>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.GetSchemaByPath(System.String,System.Boolean)">
            <summary>
            Loands an <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> into this set from a specified path.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> cannot be found.</exception>
            <param name="path">The full path of the XML schema to be loaded.</param>
            <param name="throwIfNotFound">Determines whether an error is thrown when <paramref name="path"/>
            cannot be found as a project item belonging to <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.Solution"/>.</param>
            <returns>The <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> loaded from <paramref name="path"/>.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.FindXmlSchemaObjectResults">
            <summary>
            Helper class for finding an XML schema object definition (e.g. a complex type).
            Returned by the <see cref="M:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.FindXmlSchemaObject(System.Xml.XmlQualifiedName,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.FindXmlSchemaObjectResults.XmlSchema">
            <summary>
            Gets the <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.FindXmlSchemaObjectResults.XmlSchema"/> object in which the find was successfull.
            </summary>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.FindXmlSchemaObjectResults.XmlSchemaObject">
            <summary>
            Gets the <see cref="T:System.Xml.Schema.XmlSchemaObject"/> object 
            found by the <see cref="M:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.FindXmlSchemaObject(System.Xml.XmlQualifiedName,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.FindXmlSchemaObject(System.Xml.XmlQualifiedName,System.Boolean)">
            <summary>
            Finds the definition of a schema object by searching in all contained XML schema.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlQualifiedName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="xmlQualifiedName"/> cannot be found.</exception>
            <param name="xmlQualifiedName">The qualified description of the schema object we are looking for 
            (e.g. <c>urn:XmlNamespace:ObjectName</c>).</param>
            <param name="throwIfNotFound">Determines whether an error is thrown when <paramref name="xmlQualifiedName"/> 
            cannot be found within the contained XML schemas.</param>
            <returns>a <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchemaSet.FindXmlSchemaObjectResults"/> object containing the <see cref="T:System.Xml.Schema.XmlSchemaObject"/> object and the associated <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchema"/> object.</returns>
        </member>
        <member name="T:Kodeo.Reegenerator.Wrappers.XmlSchemaType">
            <summary>
            Wrapper class for <see cref="T:System.Xml.Schema.XmlSchemaType"/> 
            providing extra functionality.
            </summary>
            <remarks>
            Instances of this class are created when a <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchemaType.XmlSchema"/> class instance is loaded.
            An XML schema complex or simple type will translate into an instance of this class.
            <para>
            An instance of this class is qualified from two points of view:
            <list type="table">
            <listheader>
                <item>Qualified as</item>
                <description>Details</description>
            </listheader>
            <item>
                <term>XML</term>
                <description>The XML namespace uniquely identifies this instance in the XML world. This instance is derived from 
            and is therefore described by <see cref="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.XmlNamespace"/>
            , <see cref="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.Name"/> and <see cref="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.XmlFullName"/>.
                </description>
            </item>
            <item>
                <term>Code</term>
                <description>This class can be used to translate from XML types into generated classes and enumerations. 
            The XML schema determines the code namespace and the <see cref="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.Name"/> also defines the name 
            of the resulting code type.
            The properties that describe this class from a code point of view are <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchemaType.CodeNamespace"/>
            , <see cref="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.Name"/> and <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchemaType.CodeFullName"/>.
                </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Kodeo.Reegenerator.Wrappers.XmlSchemaType.#ctor(Kodeo.Reegenerator.Wrappers.XmlSchema,System.Xml.Schema.XmlSchemaType)">
            <summary>
            Creates a new instance of the <see cref="T:Kodeo.Reegenerator.Wrappers.XmlSchemaType"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlSchema"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlSchemaType"/> is <c>null</c>.</exception>
            <param name="xmlSchema">The <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchemaType.XmlSchema"/> instance that defines the schema type being created.</param>
            <param name="xmlSchemaType">The <see cref="T:System.Xml.Schema.XmlSchemaType"/> to be wrapped.</param>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchemaType.XmlSchema">
            <summary>
            Gets the <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchemaType.XmlSchema"/> this instance belongs to.
            </summary>
            <value>The <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchemaType.XmlSchema"/> this instance belongs to.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchemaType.Content">
            <summary>
            Gets the wrapped <see cref="T:System.Xml.Schema.XmlSchemaType"/> object.
            </summary>
            <value>The wrapped <see cref="T:System.Xml.Schema.XmlSchemaType"/> object.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchemaType.CodeNamespace">
            <summary>
            Gets the code namespace of this schema type.
            </summary>
            <remarks>
            The code namespace is the same as the code namespace of the <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchemaType.XmlSchema"/>.
            See <see cref="P:Kodeo.Reegenerator.Wrappers.ProjectItem.CodeNamespace"/> for detailed explanations on 
            how the code namespace is determined for a project item.
            </remarks>
            <value>The code namespace of this schema type.</value>
        </member>
        <member name="P:Kodeo.Reegenerator.Wrappers.XmlSchemaType.CodeFullName">
            <summary>
            Gets the full code name of this schema type.
            </summary>
            <remarks>
            The full code name always is <see cref="P:Kodeo.Reegenerator.Wrappers.XmlSchemaType.CodeNamespace"/>.<see cref="P:Kodeo.Reegenerator.Wrappers.XmlQualifiedName.Name"/>.
            </remarks>
            <value>The full code name of this schema type.</value>
        </member>
    </members>
</doc>
